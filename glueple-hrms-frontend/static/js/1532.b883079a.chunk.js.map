{"version":3,"file":"static/js/1532.b883079a.chunk.js","mappings":"mRAUA,MA+PA,EA/PkCA,IAC9B,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,MACR,uBAAEC,EAAsB,0BAAEC,IAA8BC,EAAAA,EAAAA,KAAYC,GAAc,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,kBACpF,qBACFC,EAAoB,UACpBC,EAAS,gBACTC,EAAe,+BACfC,EAA8B,wBAC9BC,GACAZ,GAEGa,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,CAAC,IAC/BC,EAAkCC,IAAuCF,EAAAA,EAAAA,UAAS,CACrFG,SAAU,KACVC,aAAc,GACdC,eAAgB,GAChBC,oBAAqB,GACrBC,WAAY,KACZC,WAAW,IAGTC,EAAmBA,CAACC,EAAGC,KAAe,IAADC,EACvC,MAAMC,EAAOF,IAAqB,QAAZC,EAAIF,EAAEI,cAAM,IAAAF,OAAA,EAARA,EAAUC,OAC9B,MAAEE,EAAK,KAAEC,EAAI,QAAEC,GAAa,OAADP,QAAC,IAADA,GAAAA,EAAGI,OAASJ,EAAEI,OAAS,CAAEC,MAAOL,GAEjER,GAAoCgB,IAChC,MAAMC,EAAe,IACdD,EACH,CAACL,GAAgB,aAATG,EAAsBC,EAAUF,GAK5C,MAHa,iBAATF,IACAM,EAAab,qBAAsBc,EAAAA,EAAAA,IAAgBL,IAEhDI,CAAY,IAIvBpB,GAAUsB,IAAU,IACbA,EACH,CAACR,QAAOS,KACT,GA4BPC,EAAAA,EAAAA,YAAU,IACE,KACJC,GAAW,GAEhB,CAAC9B,KAEJ6B,EAAAA,EAAAA,YAAU,KACF9B,GACAS,EAAoC,CAChCC,SAAU,CAAEY,MAA2B,OAApBtB,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBU,SAAUsB,MAA2B,OAApBhC,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBU,UAChFC,aAAkC,OAApBX,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBW,aACpCC,eAAoC,OAApBZ,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBY,eACtCC,oBAAyC,OAApBb,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBa,oBAC3CC,WAAY,CAAEQ,MAA2B,OAApBtB,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBc,WAAYkB,MAA2B,OAApBhC,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBiC,iBACpFlB,UAA+B,OAApBf,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBe,WAEzC,GACD,CAACf,IAEJ,MAAM+B,EAAYA,KACdtB,EAAoC,CAChCC,SAAU,KACVC,aAAc,GACdC,eAAgB,GAChBC,oBAAqB,GACrBC,WAAY,KACZC,WAAW,GACb,EAEN,OACImB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKG,UAAW,6BAA4BpC,EAAY,OAAS,IAC7DqC,UAAW,EACXC,MAAO,CACHC,WAAYvC,EAAY,UAAY,SACpCwC,MAAO,SAEXC,GAAG,kBAAiBN,SAAA,EAEpBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,mBAAkBD,SAAA,EAC7BO,EAAAA,EAAAA,KAAA,MAAIN,UAAU,6CAA4CD,SAAyB3C,EAAvBO,EAAyB,2BAAgC,kCACrH2C,EAAAA,EAAAA,KAAA,UAAQpB,KAAK,SAASc,UAAU,YAAY,kBAAgB,YAAY,aAAW,QAC/EO,QAASA,IAAM1C,UAIvByC,EAAAA,EAAAA,KAAA,OAAKN,UAAU,4BAA2BD,UACtCF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,YAAWD,SAAA,EACtBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,MAAKD,SAAA,EAChBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kBAAiBD,UAC5BO,EAAAA,EAAAA,KAACE,EAAAA,GAAK,CAACC,KAAMrD,EAAE,mBAAoBsD,UAAU,SAGrDJ,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,kBAAiBD,SAAA,EAC5BO,EAAAA,EAAAA,KAACK,EAAAA,EAAY,CACTC,KAA6B,OAAvB7C,QAAuB,IAAvBA,OAAuB,EAAvBA,EAAyB8C,iBAC/BC,YAAa1D,EAAE,+BACf6B,OAAuC,OAAhCd,QAAgC,IAAhCA,OAAgC,EAAhCA,EAAkCE,WAAY,GACrD0C,aAAeC,GAAmBrC,EAAiBqC,EAAgB,YACnEjC,KAAK,cAEF,OAANf,QAAM,IAANA,OAAM,EAANA,EAAQK,YACLiC,EAAAA,EAAAA,KAACW,EAAAA,GAAW,CAACR,KAAMzC,EAAOK,oBAK1CwB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,MAAKD,SAAA,EAChBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kBAAiBD,UAC5BO,EAAAA,EAAAA,KAACE,EAAAA,GAAK,CAACC,KAAMrD,EAAE,sBAAuBsD,UAAU,SAGxDJ,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,kBAAiBD,SAAA,EAC5BO,EAAAA,EAAAA,KAACY,EAAAA,GAAK,CACFhC,KAAK,OACL4B,YAAa1D,EAAE,4BACf6B,MAAuC,OAAhCd,QAAgC,IAAhCA,OAAgC,EAAhCA,EAAkCG,aACzCS,KAAK,eACLoC,SAAWvC,GAAMD,EAAiBC,MAE/B,OAANZ,QAAM,IAANA,OAAM,EAANA,EAAQM,gBACLgC,EAAAA,EAAAA,KAACW,EAAAA,GAAW,CAACR,KAAMzC,EAAOM,wBAK1CuB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,MAAKD,SAAA,EAChBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kBAAiBD,UAC5BO,EAAAA,EAAAA,KAACE,EAAAA,GAAK,CAACC,KAAMrD,EAAE,4BAA6BsD,UAAU,SAG9DJ,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,kBAAiBD,SAAA,EAC5BO,EAAAA,EAAAA,KAAA,SAAOpB,KAAK,OAAOc,UAAU,oBACzBjB,KAAK,sBACL+B,YAAa1D,EAAE,0BACf6B,MAAuC,OAAhCd,QAAgC,IAAhCA,OAAgC,EAAhCA,EAAkCK,oBACzC2C,SAAWvC,GAAMD,EAAiBC,MAG/B,OAANZ,QAAM,IAANA,OAAM,EAANA,EAAQQ,uBACL8B,EAAAA,EAAAA,KAACW,EAAAA,GAAW,CAACR,KAAMzC,EAAOQ,+BAK1CqB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,MAAKD,SAAA,EAChBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kBAAiBD,UAC5BO,EAAAA,EAAAA,KAACE,EAAAA,GAAK,CAACC,KAAMrD,EAAE,wBAAyBsD,UAAU,SAG1DJ,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,kBAAiBD,SAAA,EAC5BO,EAAAA,EAAAA,KAACY,EAAAA,GAAK,CACFhC,KAAK,OACL4B,YAAa1D,EAAE,8BACf6B,MAAuC,OAAhCd,QAAgC,IAAhCA,OAAgC,EAAhCA,EAAkCI,eACzCQ,KAAK,iBACLoC,SAAWvC,GAAMD,EAAiBC,MAE/B,OAANZ,QAAM,IAANA,OAAM,EAANA,EAAQO,kBACL+B,EAAAA,EAAAA,KAACW,EAAAA,GAAW,CAACR,KAAMzC,EAAOO,0BAK1CsB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,MAAKD,SAAA,EAChBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kBAAiBD,UAC5BO,EAAAA,EAAAA,KAACE,EAAAA,GAAK,CAACC,KAAMrD,EAAE,2BAGvBkD,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kBAAiBD,UAC5BO,EAAAA,EAAAA,KAACK,EAAAA,EAAY,CACTC,KAA6B,OAAvB7C,QAAuB,IAAvBA,OAAuB,EAAvBA,EAAyBqD,kBAC/BN,YAAa1D,EAAE,0BACf6B,OAAuC,OAAhCd,QAAgC,IAAhCA,OAAgC,EAAhCA,EAAkCM,aAAc,GACvDsC,aAAeC,GAAmBrC,EAAiBqC,EAAgB,cACnEjC,KAAK,uBAKrBc,EAAAA,EAAAA,MAAA,OAAKG,UAAU,MAAKD,SAAA,EAChBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kBAAiBD,UAChCO,EAAAA,EAAAA,KAACE,EAAAA,GAAK,CAACC,KAAMrD,EAAE,0BAGnBkD,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kBAAiBD,UAC5BO,EAAAA,EAAAA,KAACe,EAAAA,GAAY,CAEThB,GAAI,YACJlB,QAAyC,OAAhChB,QAAgC,IAAhCA,OAAgC,EAAhCA,EAAkCO,UAC3CqC,aAAenC,GAAMD,EAAiBC,GACtCG,KAAM,aAJD,0BAY7BuB,EAAAA,EAAAA,KAAA,OAAKN,UAAU,mBAAkBD,UAC7BO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,sDAAqDD,UAChEO,EAAAA,EAAAA,KAACgB,EAAAA,GAAY,CACTb,KAA6BrD,EAAvBO,EAAyB,cAAmB,eAClD4D,WAAY,uBACZC,YAAaA,IAzMHC,WAC9B,MAAMC,QAA2BC,EAAAA,EAAAA,IAAeC,EAAAA,GAA6BzD,GAC7E,GAAIuD,EAAmBG,QAAS,CAC5B,MAAM,SACFxD,EAAQ,aACRC,EAAY,eACZC,EAAc,oBACdC,EAAmB,WACnBC,EAAU,UACVC,GACAP,EACE2D,EAAS,CACXzD,SAAkB,OAARA,QAAQ,IAARA,OAAQ,EAARA,EAAUY,MACpBX,eACAC,iBACAC,sBACAC,YAAsB,OAAVA,QAAU,IAAVA,OAAU,EAAVA,EAAYQ,QAAS,GACjCP,aAEJZ,EAA+BgE,EACnC,MACI7D,EAAUyD,EAAmB1D,OACjC,EAmLuC+D,GACnBC,UAAWrE,EAAuBJ,EAA4BD,WAK7EM,IAAa0C,EAAAA,EAAAA,KAAA,OAAKN,UAAU,+BAC9B,E,mCC9PX,MAwFA,EAxF2B7C,IACvB,MAAM,UACF6E,EAAS,oCACTC,EAAmC,8BACnCC,EAA6B,YAC7BC,EAAW,eACXC,EAAc,iBACdC,GACAlF,GACGmF,EAAkBC,IAAuBrE,EAAAA,EAAAA,UAAS,KAOzDuB,EAAAA,EAAAA,YAAU,KACN8C,EAAoBF,EAAiB,GACtC,CAACA,IAGJ,MAAMG,GAAcC,EAAAA,EAAAA,UAAQ,MACxBC,GAAIA,CAACC,EAAGC,KACJtC,EAAAA,EAAAA,KAAA,QAAAP,SAAO6C,EAAQ,IAEnBlE,UAAWmE,IACPvC,EAAAA,EAAAA,KAAA,QACIN,UAAW,UAAS8C,EAAAA,EAAAA,IAAcD,EAAKnE,UAAY,SAAW,cAAcqB,SAE3E8C,EAAKnE,UAAY,SAAW,aAGrCqE,WAAYF,GAAQG,IAAOH,EAAKE,YAAYE,OAAO,cACnDC,OAAQL,IACJhD,EAAAA,EAAAA,MAAA,OAAKG,UAAU,sBAAqBD,SAAA,EAChCO,EAAAA,EAAAA,KAAA,UAAQpB,KAAK,SAASc,UAAU,4BAC5B,iBAAe,WAAW,gBAAc,QAAOD,UAC/CO,EAAAA,EAAAA,KAAA,KAAGN,UAAU,iCAEjBH,EAAAA,EAAAA,MAAA,MAAIG,UAAU,gBAAeD,SAAA,EACzBO,EAAAA,EAAAA,KAAA,MAAAP,UACIF,EAAAA,EAAAA,MAAA,QAAMG,UAAU,gBACZO,QAASA,KA7B7B0B,EA6B4DY,EAAM,EAAA9C,SAAA,EAE9CO,EAAAA,EAAAA,KAAC6C,EAAAA,GAAI,CAACnD,UAAW,6BAA8B,eAEtDM,EAAAA,EAAAA,KAAA,MAAAP,UACGF,EAAAA,EAAAA,MAAA,QAAMG,UAAU,gBACZO,QAASA,IAAM2B,EAA8BW,EAAKO,KAAKrD,SAAA,EAEvDO,EAAAA,EAAAA,KAAC6C,EAAAA,GAAI,CAACnD,UAAW,qBAAsB,uBAM3D,CAACiC,IAWP,OACE3B,EAAAA,EAAAA,KAAAR,EAAAA,SAAA,CAAAC,UACAO,EAAAA,EAAAA,KAAC+C,EAAAA,GAAW,CACRzC,KAAsB,OAAhB0B,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkB1B,KACxB0C,OAbW,CACX,CAAEC,IAAK,KAAM5D,MAAO,OACpB,CAAE4D,IAAK,gBAAiB5D,MAAO,iBAC/B,CAAE4D,IAAK,eAAgB5D,MAAO,gBAC9B,CAAE4D,IAAK,sBAAuB5D,MAAO,cAErC,CAAE4D,IAAK,aAAc5D,MAAO,cAC5B,CAAE4D,IAAK,SAAU5D,MAAO,WAOxBqC,UAAWA,EACXwB,YAAY,EACZrB,YAAaA,EACbC,eAAgBA,EAChBqB,WAA4B,OAAhBnB,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBmB,WAG9BC,UAAU,EACVC,WAAY,CAAEC,QAAS,MAAOC,UAAW,QACzCrB,YAAaA,KAGlB,E,eCrFH,MAgFA,EAhF+BrF,IAC3B,MAAM,UACF6E,EAAS,wCACT8B,EAAuC,kCACvCC,EAAiC,YACjC5B,EAAW,eACXC,EAAc,oBACd4B,GACA7G,EAOEqF,GAAcC,EAAAA,EAAAA,UAAQ,MACxBC,GAAIA,CAACC,EAAGC,KACJtC,EAAAA,EAAAA,KAAA,QAAAP,SAAO6C,EAAQ,IAEnBlE,UAAWmE,IACPvC,EAAAA,EAAAA,KAAA,QACIN,UAAW,UAAS8C,EAAAA,EAAAA,IAAcD,EAAKnE,UAAY,SAAW,cAAcqB,SAE3E8C,EAAKnE,UAAY,SAAW,aAGrCqE,WAAYF,GAAQG,IAAOH,EAAKE,YAAYE,OAAO,cACnDC,OAAQL,IACJhD,EAAAA,EAAAA,MAAA,OAAKG,UAAU,sBAAqBD,SAAA,EAChCO,EAAAA,EAAAA,KAAA,UAAQpB,KAAK,SAASc,UAAU,4BAC5B,iBAAe,WAAW,gBAAc,QAAOD,UAC/CO,EAAAA,EAAAA,KAAA,KAAGN,UAAU,iCAEjBH,EAAAA,EAAAA,MAAA,MAAIG,UAAU,gBAAeD,SAAA,EACzBO,EAAAA,EAAAA,KAAA,MAAAP,UACIF,EAAAA,EAAAA,MAAA,QAAMG,UAAU,gBACZO,QAASA,KAzB7BuD,EAyB4DjB,EAAM,EAAA9C,SAAA,EAE9CO,EAAAA,EAAAA,KAAC6C,EAAAA,GAAI,CAACnD,UAAW,6BAA8B,eAEtDM,EAAAA,EAAAA,KAAA,MAAAP,UACGF,EAAAA,EAAAA,MAAA,QAAMG,UAAU,gBACZO,QAASA,IAAMwD,EAAkClB,EAAKO,KAAKrD,SAAA,EAE3DO,EAAAA,EAAAA,KAAC6C,EAAAA,GAAI,CAACnD,UAAW,qBAAsB,uBAM3D,CAAC8D,IASP,OACExD,EAAAA,EAAAA,KAAAR,EAAAA,SAAA,CAAAC,UACAO,EAAAA,EAAAA,KAAC+C,EAAAA,GAAW,CACRzC,KAAyB,OAAnBoD,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBpD,KAC3B0C,OAXW,CACX,CAAEC,IAAK,KAAM5D,MAAO,OACpB,CAAE4D,IAAK,OAAQ5D,MAAO,QACtB,CAAE4D,IAAK,aAAc5D,MAAO,cAC5B,CAAE4D,IAAK,aAAc5D,MAAO,cAC5B,CAAE4D,IAAK,SAAU5D,MAAO,WAOxBqC,UAAWA,EACXwB,YAAY,EACZrB,YAAaA,EACbC,eAAgBA,EAChBqB,WAA+B,OAAnBO,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBP,WAGjCC,UAAU,EACVC,WAAY,CAAEC,QAAS,MAAOC,UAAW,QACzCrB,YAAaA,KAGlB,EC6GH,EAtLsCrF,IAClC,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,MACR,iCAAE4G,EAAgC,oCAAEC,IAAwC1G,EAAAA,EAAAA,KAAYC,GAAc,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOC,kBACxG,6BACFyG,EAA4B,UAC5BvG,EAAS,gBACTC,EAAe,mCACfuG,GACAjH,GAEGa,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,CAAC,IAC/BmG,EAAsCC,IAA2CpG,EAAAA,EAAAA,UAAS,CAC7Fa,KAAM,GACNwF,WAAY,GACZ7F,WAAW,IAGTC,EAAmBA,CAACC,EAAGC,KAAe,IAADC,EACvC,MAAMC,EAAOF,IAAqB,QAAZC,EAAIF,EAAEI,cAAM,IAAAF,OAAA,EAARA,EAAUC,OAC9B,MAAEE,EAAK,KAAEC,EAAI,QAAEC,GAAa,OAADP,QAAC,IAADA,GAAAA,EAAGI,OAASJ,EAAEI,OAAS,CAAEC,MAAOL,GAEjE0F,GAAwClF,IACpC,MAAMC,EAAe,IACdD,EACH,CAACL,GAAgB,aAATG,EAAsBC,EAAUF,GAK5C,MAHa,SAATF,IACAM,EAAakF,YAAajF,EAAAA,EAAAA,IAAgBL,IAEvCI,CAAY,IAIvBpB,GAAUsB,IAAU,IACbA,EACH,CAACR,QAAOS,KACT,GAsBPC,EAAAA,EAAAA,YAAU,IACE,KACJC,GAAW,GAEhB,CAAC9B,KAEJ6B,EAAAA,EAAAA,YAAU,KACF0E,GACAG,EAAwC,CACpCvF,KAAkC,OAA5BoF,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8BpF,KACpCwF,WAAwC,OAA5BJ,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8BI,WAC1C7F,UAAuC,OAA5ByF,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8BzF,WAEjD,GACD,CAACyF,IAEJ,MAAMzE,EAAYA,KACd4E,EAAwC,CACpCvF,KAAM,GACNwF,WAAY,GACZ7F,WAAW,GACb,EAEN,OACImB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKG,UAAW,6BAA4BpC,EAAY,OAAS,IAC7DqC,UAAW,EACXC,MAAO,CACHC,WAAYvC,EAAY,UAAY,SACpCwC,MAAO,SAEXC,GAAG,kBAAiBN,SAAA,EAEpBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,mBAAkBD,SAAA,EAC7BO,EAAAA,EAAAA,KAAA,MAAIN,UAAU,6CAA4CD,SAAiC3C,EAA/B+G,EAAiC,0BAA+B,2BAC5H7D,EAAAA,EAAAA,KAAA,UAAQpB,KAAK,SAASc,UAAU,YAAY,kBAAgB,YAAY,aAAW,QAC/EO,QAASA,IAAM1C,UAIvByC,EAAAA,EAAAA,KAAA,OAAKN,UAAU,4BAA2BD,UACtCF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,YAAWD,SAAA,EAEtBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,MAAKD,SAAA,EAChBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kBAAiBD,UAC5BO,EAAAA,EAAAA,KAACE,EAAAA,GAAK,CAACC,KAAMrD,EAAE,eAAgBsD,UAAU,SAGjDJ,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,kBAAiBD,SAAA,EAC5BO,EAAAA,EAAAA,KAACY,EAAAA,GAAK,CACFhC,KAAK,OACL4B,YAAa1D,EAAE,qBACf6B,MAA2C,OAApCoF,QAAoC,IAApCA,OAAoC,EAApCA,EAAsCtF,KAC7CA,KAAK,OACLoC,SAAWvC,GAAMD,EAAiBC,MAE/B,OAANZ,QAAM,IAANA,OAAM,EAANA,EAAQe,QACLuB,EAAAA,EAAAA,KAACW,EAAAA,GAAW,CAACR,KAAMzC,EAAOe,gBAK1Cc,EAAAA,EAAAA,MAAA,OAAKG,UAAU,MAAKD,SAAA,EAChBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kBAAiBD,UAC5BO,EAAAA,EAAAA,KAACE,EAAAA,GAAK,CAACC,KAAMrD,EAAE,oBAAqBsD,UAAU,SAGtDJ,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,kBAAiBD,SAAA,EAC5BO,EAAAA,EAAAA,KAAA,SAAOpB,KAAK,OAAOc,UAAU,oBACzBjB,KAAK,aACL+B,YAAa1D,EAAE,0BACf6B,MAA2C,OAApCoF,QAAoC,IAApCA,OAAoC,EAApCA,EAAsCE,WAC7CpD,SAAWvC,GAAMD,EAAiBC,MAG/B,OAANZ,QAAM,IAANA,OAAM,EAANA,EAAQuG,cACLjE,EAAAA,EAAAA,KAACW,EAAAA,GAAW,CAACR,KAAMzC,EAAOuG,sBAO1C1E,EAAAA,EAAAA,MAAA,OAAKG,UAAU,MAAKD,SAAA,EAChBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kBAAiBD,UAChCO,EAAAA,EAAAA,KAACE,EAAAA,GAAK,CAACC,KAAMrD,EAAE,0BAGnBkD,EAAAA,EAAAA,KAAA,OAAKN,UAAU,WAAUD,UACrBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kBAAiBD,UAC5BO,EAAAA,EAAAA,KAACe,EAAAA,GAAY,CAEThB,GAAI,YACJlB,QAA6C,OAApCkF,QAAoC,IAApCA,OAAoC,EAApCA,EAAsC3F,UAC/CqC,aAAenC,GAAMD,EAAiBC,GACtCG,KAAM,aAJD,0BAY7BuB,EAAAA,EAAAA,KAAA,OAAKN,UAAU,mBAAkBD,UAC7BO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,sDAAqDD,UAChEO,EAAAA,EAAAA,KAACgB,EAAAA,GAAY,CACTb,KAAqCrD,EAA/B+G,EAAiC,cAAmB,eAC1D5C,WAAY,uBACZC,YAAaA,IApIlBC,WACf,MAAMC,QAA2BC,EAAAA,EAAAA,IAAe6C,EAAAA,GAAiCH,GACjF,GAAI3C,EAAmBG,QAAS,CAC5B,MAAM,KACF9C,EAAI,WACJwF,EAAU,UACV7F,GACA2F,EAMJD,EALe,CACXrF,OACAwF,aACA7F,aAGR,MACIT,EAAUyD,EAAmB1D,OACjC,EAoHuCyG,GACnBzC,UAAWmC,EAA+BD,EAAsCD,WAK/FrG,IAAa0C,EAAAA,EAAAA,KAAA,OAAKN,UAAU,+BAC9B,EC0RX,EAxcwB7C,IACpB,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,KACRqH,GAAWC,EAAAA,EAAAA,OACX,uBAEFrH,EAAsB,mBACtBsH,EAAkB,qBAClBC,EAAoB,0BAEpBC,EAAyB,sBACzBC,EAAqB,wBACrBC,EAAuB,0BAEvBC,EAAyB,sBACzBC,EAAqB,wBACrBC,EAAuB,sBAEvBC,EAAqB,wBACrBC,EAAuB,0BACvB9H,EAAyB,qCAEzB+H,EAAoC,iCACpCC,EAAgC,mCAChCC,EAAkC,iCAElCvB,EAAgC,6BAChCwB,EAA4B,+BAC5BC,EAA8B,iCAE9BC,EAAgC,6BAChCC,EAA4B,+BAC5BC,EAA8B,oCAE9BC,EAAmC,gCACnCC,EAA+B,kCAC/BC,EAAiC,oCAEjC9B,EAAmC,gCACnC+B,EAA+B,kCAC/BC,EAAiC,oCAEjCC,EAAmC,gCACnCC,EAA+B,kCAC/BC,IAEA7I,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,kBAExB4I,EAAgCC,IAAqCrI,EAAAA,EAAAA,WAAS,IAC9EP,EAAsB6I,IAA2BtI,EAAAA,EAAAA,UAAS,KAC1DiE,EAAaC,IAAkBlE,EAAAA,EAAAA,UAAS,IACxCmE,EAAkBoE,KAAuBvI,EAAAA,EAAAA,UAAS,KAClDwI,GAA+BC,KAAoCzI,EAAAA,EAAAA,WAAS,IAC5E0I,GAAsBC,KAA2B3I,EAAAA,EAAAA,UAAS,KAC1DH,GAAyB+I,KAA8B5I,EAAAA,EAAAA,UAAS,KAChEiG,GAA8B4C,KAAmC7I,EAAAA,EAAAA,UAAS,KAC1E8I,GAA6BC,KAAkC/I,EAAAA,EAAAA,WAAS,IACxEgJ,GAAqBC,KAA0BjJ,EAAAA,EAAAA,UAAS,IACxDkJ,GAA0BC,KAA+BnJ,EAAAA,EAAAA,UAAS,KAClE8F,GAAqBsD,KAA0BpJ,EAAAA,EAAAA,UAAS,KACxDqJ,GAAmCC,KAAwCtJ,EAAAA,EAAAA,WAAS,GAGrF+D,GAAuCrB,IAIrC4F,EAHC5F,GACuB,IAI5B2F,GAAmCD,EAA+B,GAatE7G,EAAAA,EAAAA,YAAU,KACN,IAAKnC,EAAwB,CACzB,GAAIuH,EAEA,YADAH,EAAS+C,EAAAA,GAAsBC,yBAAyB,yCAGxD9C,GACiC,OAAX,OAAlBA,QAAkB,IAAlBA,OAAkB,EAAlBA,EAAoB+C,QACpBjD,EAAS+C,EAAAA,GAAsBC,yBAAyB,yCACxDE,KACArB,GAAmCD,GAG/C,IACD,CACC1B,EACAC,EACAvH,KAIJmC,EAAAA,EAAAA,YAAU,KACN,IAAKlC,EAA2B,CAC5B,GAAI8H,EAEA,YADAX,EAAS+C,EAAAA,GAAsBC,yBAAyB,4CAGxDtC,GACoC,OAAX,OAArBA,QAAqB,IAArBA,OAAqB,EAArBA,EAAuBuC,QACvBjD,EAAS+C,EAAAA,GAAsBC,yBAAyB,4CACxDE,KACArB,GAAmCD,GAG/C,IACD,CACClB,EACAC,EACA9H,KAIJkC,EAAAA,EAAAA,YAAU,KACNmI,IAAqB,GACtB,CAACzF,IACJ,MAAMyF,GAAsBA,KACxB,MAAM9F,EAAS,CACX+F,KAAM1F,EACN2F,MAAOtE,EAAAA,GAAWsE,OAEtBpD,EAAS+C,EAAAA,GAAsBM,0BAA0BjG,GAAQ,GAGrErC,EAAAA,EAAAA,YAAU,KACN,IAAKqF,EAA2B,CAC5B,GAAIE,EACA,OAEJ,GAAID,GACoC,OAAX,OAArBA,QAAqB,IAArBA,OAAqB,EAArBA,EAAuB4C,MAAc,CACrC,MAAMK,EAA+C,OAArBjD,QAAqB,IAArBA,OAAqB,EAArBA,EAAuBnE,KACvD6F,GAAoBuB,EACxB,CAER,IACD,CACCjD,EACAC,EACAF,IAIJ,MAAM5C,GAAiC7B,IAC/BA,GACAwG,GAAwBxG,GAE5BsG,IAAkCD,GAA8B,GAcpEjH,EAAAA,EAAAA,YAAU,KACN,IAAKwF,EAA2B,CAC5B,GAAIE,EAEA,YADAT,EAAS+C,EAAAA,GAAsBC,yBAAyB,4CAId,IAADO,EAD7C,GAAI/C,EACA,GAAoC,OAAX,OAArBA,QAAqB,IAArBA,OAAqB,EAArBA,EAAuByC,MACvBzF,KACIC,EAAc,GAAwC,KAAnB,OAAhBE,QAAgB,IAAhBA,GAAsB,QAAN4F,EAAhB5F,EAAkBzB,YAAI,IAAAqH,OAAN,EAAhBA,EAAwBC,QAC3C9F,GAAgB+F,GAAOA,EAAO,IAE9BP,KAEJlD,EAAS+C,EAAAA,GAAsBC,yBAAyB,2CAGpE,IACD,CACCxC,EACAC,EACAF,KAKJxF,EAAAA,EAAAA,YAAU,KACN2I,IAA+B,GAChC,IACH,MAAMA,GAAgCA,KAClC1D,EAA8B,OAArB+C,EAAAA,SAAqB,IAArBA,EAAAA,QAAqB,EAArBA,EAAAA,GAAuBY,uCAAuC,GAG3E5I,EAAAA,EAAAA,YAAU,KACN,IAAK6F,EAAsC,CACvC,GAAIE,EACA,OAEJ,GAAID,GAC+C,OAAX,OAAhCA,QAAgC,IAAhCA,OAAgC,EAAhCA,EAAkCoC,MAAc,CAChD,MAAMW,EAA2D,OAAhC/C,QAAgC,IAAhCA,OAAgC,EAAhCA,EAAkC3E,KACnEkG,GAA2BwB,EAC/B,CAER,IACD,CACC/C,EACAC,EACAF,IAGJ,MASMxB,GAA2ClD,IAIzCmG,GAHCnG,GAC+B,IAIpCqG,IAAgCD,GAA4B,GAgBhEvH,EAAAA,EAAAA,YAAU,KACN,IAAKwE,EAAkC,CACnC,GAAIyB,EAEA,YADAhB,EAAS+C,EAAAA,GAAsBC,yBAAyB,oDAGxDjC,GAC2C,OAAX,OAA5BA,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8BkC,QAC9BjD,EAAS+C,EAAAA,GAAsBC,yBAAyB,oDACxDa,KACAtB,IAAgCD,IAG5C,IACD,CACCvB,EACAC,EACAzB,KAIJxE,EAAAA,EAAAA,YAAU,KACN,IAAKyE,EAAqC,CACtC,GAAIgC,EAEA,YADAxB,EAAS+C,EAAAA,GAAsBC,yBAAyB,uDAGxDzB,GAC8C,OAAX,OAA/BA,QAA+B,IAA/BA,OAA+B,EAA/BA,EAAiC0B,QACjCjD,EAAS+C,EAAAA,GAAsBC,yBAAyB,uDACxDa,KACAtB,IAAgCD,IAG5C,IACD,CACCf,EACAC,EACAhC,IAIJ,MAAMH,GAAqC1D,IACnCA,GACAgH,GAA4BhH,GAEhCmH,IAAsCD,GAAkC,GAc5E9H,EAAAA,EAAAA,YAAU,KACN,IAAK0G,EAAqC,CACtC,GAAIE,EAEA,YADA3B,EAAS+C,EAAAA,GAAsBC,yBAAyB,uDAIJ,IAADc,EADvD,GAAIpC,EACA,GAA8C,OAAX,OAA/BA,QAA+B,IAA/BA,OAA+B,EAA/BA,EAAiCuB,MACjC5D,KACImD,GAAsB,GAA2C,KAAnB,OAAnBlD,SAAmB,IAAnBA,IAAyB,QAANwE,EAAnBxE,GAAqBpD,YAAI,IAAA4H,OAAN,EAAnBA,EAA2BN,QACtDf,IAAwBgB,GAAOA,EAAO,IAEtCI,KAEJ7D,EAAS+C,EAAAA,GAAsBC,yBAAyB,sDAGpE,IACD,CACCtB,EACAC,EACAF,KAGJ1G,EAAAA,EAAAA,YAAU,KACN8I,IAA+B,GAChC,CAACrB,KAEJ,MAAMqB,GAAgCA,KAClC,MAAMzG,EAAS,CACX+F,KAAMX,GACNY,MAAOtE,EAAAA,GAAWsE,OAEtBpD,EAAS+C,EAAAA,GAAsBgB,iCAAiC3G,GAAQ,EAoB5E,OAjBArC,EAAAA,EAAAA,YAAU,KACN,IAAKkG,EAAkC,CACnC,GAAIE,EACA,OAEAD,GAC2C,OAAX,OAA5BA,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8B+B,OAC9BL,GAAmD,OAA5B1B,QAA4B,IAA5BA,OAA4B,EAA5BA,EAA8BhF,KAGjE,IACD,CACCgF,EACAC,EACAF,KAIA9F,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,yCAAwCD,SAAA,EACnDF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,0DAAyDD,SAAA,EACpEF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,kBAAiBD,SAAA,EAC5BO,EAAAA,EAAAA,KAAA,OAAKoI,IAAI,4BAA4BC,IAAI,GAAGvI,MAAO,MACnDE,EAAAA,EAAAA,KAAA,MAAIN,UAAU,QAAOD,SAAC,wBAE1BF,EAAAA,EAAAA,MAAA,OAAKG,UAAU,eAAcD,SAAA,EACzBO,EAAAA,EAAAA,KAACgB,EAAAA,GAAY,CACTC,WAAY,uBACZC,YAAaA,IAAMsC,KACnB8E,MAAMtI,EAAAA,EAAAA,KAAC6C,EAAAA,GAAI,CAACnD,UAAU,eACtBS,KAAMrD,EAAE,4BAEZkD,EAAAA,EAAAA,KAACgB,EAAAA,GAAY,CACTC,WAAY,6BACZC,YAAaA,IAAMS,KACnB2G,MAAMtI,EAAAA,EAAAA,KAAC6C,EAAAA,GAAI,CAACnD,UAAU,eACtBS,KAAMrD,EAAE,oCAMpBkD,EAAAA,EAAAA,KAACuI,EAAAA,GAAU,CAACC,KAzKM,CAC1B,CAAE/J,KAAM,oBAAqBsB,GAAI,qBACjC,CAAEtB,KAAM,gBAAiBsB,GAAI,aAuKoBnB,KAAK,2BAC9CW,EAAAA,EAAAA,MAAA,OAAKG,UAAU,cAAaD,SAAA,EACxBO,EAAAA,EAAAA,KAAA,OAAKN,UAAU,4BAA4BK,GAAG,oBAAmBN,UAC7DO,EAAAA,EAAAA,KAACyI,EAAqB,CAClBhC,gCAAiCA,GACjCjD,wCAAyCA,GACzC3B,YAAa+E,GACb9E,eAAgB+E,GAChBnD,oBAAqBA,GACrBD,kCAAmCA,QAK3CzD,EAAAA,EAAAA,KAAA,OAAKN,UAAU,qBAAqBK,GAAG,WAAUN,UAC7CO,EAAAA,EAAAA,KAAC0I,EAAiB,CACdxC,wBAAyBA,EACzBvE,oCAAqCA,GACrCE,YAAaA,EACbC,eAAgBA,EAChBC,iBAAkBA,EAClBH,8BAA+BA,GAC/BF,UAAW8C,YAM1B4B,KACGpG,EAAAA,EAAAA,KAAC2I,EAAAA,EAAkB,CACfC,gBArQkBhK,IAC9B,GAAIA,EAAM,CACN,MAAM4C,EAAS,CACXsB,IAAKwD,IAETlC,EAA8B,OAArB+C,EAAAA,SAAqB,IAArBA,EAAAA,QAAqB,EAArBA,EAAAA,GAAuB0B,0BAA0BrH,GAC9D,MACII,IACJ,EA8PYkH,OAAQ1C,GACR2C,KAAMjM,EAAE,2BAA2BkM,QAAQ,KAAM,YACjDC,gBAAiBtE,EACjBuE,aAAcpM,EAAE,eAChBqM,YAAarM,EAAE,iBAGtBmK,KACGjH,EAAAA,EAAAA,KAAC2I,EAAAA,EAAkB,CACfC,gBAjIsBhK,IAClC,GAAIA,EAAM,CACN,MAAM4C,EAAS,CACXsB,IAAKgE,IAET1C,EAA8B,OAArB+C,EAAAA,SAAqB,IAArBA,EAAAA,QAAqB,EAArBA,EAAAA,GAAuBiC,oCAAoC5H,GACxE,MACIiC,IACJ,EA0HYqF,OAAQ7B,GACR8B,KAAMjM,EAAE,2BAA2BkM,QAAQ,KAAM,YACjDC,gBAAiBpD,EACjBqD,aAAcpM,EAAE,eAChBqM,YAAarM,EAAE,iBAGtBkJ,IAAkChG,EAAAA,EAAAA,KAACqJ,EAAwB,CACxD/L,UAAW0I,EACXzI,gBAAiBoE,GACjBnE,+BAnX4BgE,IAChCnE,GACAmE,EAAY,IAAwB,OAApBnE,QAAoB,IAApBA,OAAoB,EAApBA,EAAsByF,IACtCsB,EAAS+C,EAAAA,GAAsBmC,0BAA0B9H,KAGzD4C,EAAS+C,EAAAA,GAAsBoC,uBAAuB/H,GAC1D,EA6WQnE,qBAAsBA,EACtBI,wBAAyBA,KAE5BiJ,KAA+B1G,EAAAA,EAAAA,KAACwJ,EAA4B,CACzDlM,UAAWoJ,GACXnJ,gBAAiBiG,GACjBM,mCA9MgCtC,IACpCqC,IACArC,EAAY,IAAgC,OAA5BqC,SAA4B,IAA5BA,QAA4B,EAA5BA,GAA8Bf,IAC9CsB,EAAS+C,EAAAA,GAAsBsC,oCAAoCjI,KAGnE4C,EAAS+C,EAAAA,GAAsBuC,iCAAiClI,GACpE,EAwMQqC,6BAA8BA,OAEnC,C","sources":["components/admin/dropdownMaster/CreateUpdateDropdownData.js","components/admin/dropdownMaster/DropdownDataTable.js","components/admin/dropdownMaster/DropdownCategoryTable.js","components/admin/dropdownMaster/CreateUpdateDropdownCategory.js","components/admin/dropdownMaster/DropDownMaster.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { validateSchema } from '../../../utils/ValidationHelper'\r\nimport { addUpdateDropdownDataSchema } from '../../../utils/ValidationSchema'\r\nimport { createShortName } from '../../../utils/common'\r\nimport CustomSelect from '../../commanComponent/CustomSelect'\r\nimport { CustomButton, CustomError } from '../../globalComponents'\r\nimport { CustCheckbox, Input, Label } from '../../commanComponent'\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst CreateUpdateDropdownData = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const { addDropdownDataPending, updateDropdownDataPending } = useSelector(state => state?.dropdownMaster)\r\n    const {\r\n        selectedDropdownData,\r\n        openModel,\r\n        handleOpenClose,\r\n        handleCreateUpdateDropdownData,\r\n        allDropdownConstantData,\r\n    } = props\r\n\r\n    const [errors, setErrors] = useState({})\r\n    const [createUpdateDropdownDataFormData, setCreateUpdateDropdownDataFormData] = useState({\r\n        category: null,\r\n        category_key: '',\r\n        category_value: '',\r\n        category_short_name: '',\r\n        input_type: null,\r\n        is_active: true,\r\n    })\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e.target : { value: e };\r\n\r\n        setCreateUpdateDropdownDataFormData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n            if (name === 'category_key') {\r\n                updatedState.category_short_name = createShortName(value);\r\n            }\r\n            return updatedState;\r\n        });\r\n\r\n        // Reset error for this field\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitCreateUpdatePostion = async () => {\r\n        const validationResponse = await validateSchema(addUpdateDropdownDataSchema, createUpdateDropdownDataFormData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n                category,\r\n                category_key,\r\n                category_value,\r\n                category_short_name,\r\n                input_type,\r\n                is_active,\r\n            } = createUpdateDropdownDataFormData\r\n            const params = {\r\n                category: category?.value,\r\n                category_key,\r\n                category_value,\r\n                category_short_name,\r\n                input_type: input_type?.value || '',\r\n                is_active,\r\n            }\r\n            handleCreateUpdateDropdownData(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (selectedDropdownData) {\r\n            setCreateUpdateDropdownDataFormData({\r\n                category: { value: selectedDropdownData?.category, label: selectedDropdownData?.category },\r\n                category_key: selectedDropdownData?.category_key,\r\n                category_value: selectedDropdownData?.category_value,\r\n                category_short_name: selectedDropdownData?.category_short_name,\r\n                input_type: { value: selectedDropdownData?.input_type, label: selectedDropdownData?.input_type_name },\r\n                is_active: selectedDropdownData?.is_active,\r\n            })\r\n        }\r\n    }, [selectedDropdownData])\r\n\r\n    const resetForm = () => {\r\n        setCreateUpdateDropdownDataFormData({\r\n            category: null,\r\n            category_key: '',\r\n            category_value: '',\r\n            category_short_name: '',\r\n            input_type: null,\r\n            is_active: true,\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n                tabIndex={-1}\r\n                style={{\r\n                    visibility: openModel ? 'visible' : 'hidden',\r\n                    width: \"800px\"\r\n                }}\r\n                id=\"interviewDetail\"\r\n            >\r\n                <div className=\"offcanvas-header\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{selectedDropdownData ? t(\"headings.addDropdownData\") : t(\"headings.updateDropdownData\")}</h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                        onClick={() => handleOpenClose()}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"offcanvas-body myRequest \">\r\n                    <div className=\"formPanel\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.category\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustomSelect\r\n                                        data={allDropdownConstantData?.dropdownCategory}\r\n                                        placeholder={t(\"placeholders.selectCategory\")}\r\n                                        value={createUpdateDropdownDataFormData?.category || ''}\r\n                                        handleChange={(selectedOption) => handleFromChange(selectedOption, \"category\")}\r\n                                        name=\"category\"\r\n                                    />\r\n                                    {errors?.category && (\r\n                                        <CustomError text={errors.category} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.categoryKey\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.categoryKey\")}\r\n                                        value={createUpdateDropdownDataFormData?.category_key}\r\n                                        name=\"category_key\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    />\r\n                                    {errors?.category_key && (\r\n                                        <CustomError text={errors.category_key} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.categoryShortName\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <input type=\"text\" className=\"form-control fs-7\"\r\n                                        name='category_short_name'\r\n                                        placeholder={t(\"placeholders.shortName\")}\r\n                                        value={createUpdateDropdownDataFormData?.category_short_name}\r\n                                        onChange={(e) => handleFromChange(e)}\r\n\r\n                                    />\r\n                                    {errors?.category_short_name && (\r\n                                        <CustomError text={errors.category_short_name} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.categoryValue\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.categoryValue\")}\r\n                                        value={createUpdateDropdownDataFormData?.category_value}\r\n                                        name=\"category_value\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    />\r\n                                    {errors?.category_value && (\r\n                                        <CustomError text={errors.category_value} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.inputType\")} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustomSelect\r\n                                        data={allDropdownConstantData?.dropdownInputType}\r\n                                        placeholder={t(\"placeholders.inputType\")}\r\n                                        value={createUpdateDropdownDataFormData?.input_type || ''}\r\n                                        handleChange={(selectedOption) => handleFromChange(selectedOption, \"input_type\")}\r\n                                        name=\"input_type\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.isActive\")} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustCheckbox\r\n                                        key={\"is_active\"}\r\n                                        id={`is_active`}\r\n                                        checked={createUpdateDropdownDataFormData?.is_active}\r\n                                        handleChange={(e) => handleFromChange(e)}\r\n                                        name={\"is_active\"}\r\n                                    />\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"offcanvas-footer\">\r\n                    <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                        <CustomButton\r\n                            text={selectedDropdownData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                            classNames={\"btn btn-org-gradient\"}\r\n                            handleClick={() => submitCreateUpdatePostion()}\r\n                            isLoading={selectedDropdownData ? updateDropdownDataPending : addDropdownDataPending}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {openModel && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateUpdateDropdownData\r\n","\r\nimport React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomTable } from '../../reuseableComponents'\r\nimport { getBadgeColor } from '../../../utils/common'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment'\r\nimport { Icon } from '../../commanComponent'\r\nconst DropdownDataTable = (props) => {\r\n    const {\r\n        isLoading,\r\n        toggleCreateUpdateDropdownDataModal,\r\n        toggleDropdownDataDeleteModal,\r\n        currentPage,\r\n        setCurrentPage,\r\n        allDropdownDatas\r\n    } = props\r\n    const [dropdownDataList, setDropdownDataList] = useState('')\r\n\r\n\r\n    const handleUpdateDropdownData = (data) => {\r\n        toggleCreateUpdateDropdownDataModal(data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setDropdownDataList(allDropdownDatas)\r\n    }, [allDropdownDatas])\r\n\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n        action: item => (\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleUpdateDropdownData(item)}\r\n                        >\r\n                            <Icon className={\"bi bi-pencil-square me-1\"} />Update</span>\r\n                    </li>\r\n                     <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => toggleDropdownDataDeleteModal(item._id)}\r\n                        >\r\n                            <Icon className={\"bi bi-trash me-1\"} />Delete</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            \r\n        )\r\n    }), [toggleCreateUpdateDropdownDataModal]);\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'category_name', label: 'Category Name' },\r\n        { key: 'category_key', label: 'Category Key' },\r\n        { key: 'category_short_name', label: 'Short Name' },\r\n        // { key: 'input_type', label: 'Input type' },\r\n        { key: 'created_at', label: 'Created At' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n  return (\r\n    <>\r\n    <CustomTable\r\n        data={dropdownDataList?.data}\r\n        fields={fields}\r\n        isLoading={isLoading}\r\n        pagination={true}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n        totalPages={dropdownDataList?.totalPages}\r\n        // tableName={\"Dropdown Master\"}\r\n        // onSearch={handleSearch}\r\n        isHeader={false}\r\n        tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n        scopedSlots={scopedSlots}\r\n        // pageLimit={2}\r\n    />\r\n</>\r\n  )\r\n}\r\n\r\nexport default DropdownDataTable\r\n\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomTable } from '../../reuseableComponents'\r\nimport { getBadgeColor } from '../../../utils/common'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment'\r\nimport { Icon } from '../../commanComponent'\r\nconst DropdownCategoryTable = (props) => {\r\n    const {\r\n        isLoading,\r\n        toggleCreateUpdateDropdownCategoryModal,\r\n        toggleDropdownCategoryDeleteModal,\r\n        currentPage,\r\n        setCurrentPage,\r\n        allDropdownCategory\r\n    } = props\r\n\r\n    const handleUpdateDropdownData = (data) => {\r\n        toggleCreateUpdateDropdownCategoryModal(data)\r\n    }\r\n\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n        action: item => (\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleUpdateDropdownData(item)}\r\n                        >\r\n                            <Icon className={\"bi bi-pencil-square me-1\"} />Update</span>\r\n                    </li>\r\n                     <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => toggleDropdownCategoryDeleteModal(item._id)}\r\n                        >\r\n                            <Icon className={\"bi bi-trash me-1\"} />Delete</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            \r\n        )\r\n    }), [toggleCreateUpdateDropdownCategoryModal,]);\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'name', label: 'Name' },\r\n        { key: 'short_name', label: 'Short Name' },\r\n        { key: 'created_at', label: 'Created At' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n  return (\r\n    <>\r\n    <CustomTable\r\n        data={allDropdownCategory?.data}\r\n        fields={fields}\r\n        isLoading={isLoading}\r\n        pagination={true}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n        totalPages={allDropdownCategory?.totalPages}\r\n        // tableName={\"Dropdown Master\"}\r\n        // onSearch={handleSearch}\r\n        isHeader={false}\r\n        tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n        scopedSlots={scopedSlots}\r\n        // pageLimit={2}\r\n    />\r\n</>\r\n  )\r\n}\r\n\r\nexport default DropdownCategoryTable","import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { validateSchema } from '../../../utils/ValidationHelper'\r\nimport { addUpdateCategoryDropdownSchema } from '../../../utils/ValidationSchema'\r\nimport { createShortName } from '../../../utils/common'\r\nimport { CustomButton, CustomError } from '../../globalComponents'\r\nimport { CustCheckbox, Input, Label } from '../../commanComponent'\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst CreateUpdateDropdownCategory = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const { addMasterDropdownCategoryPending, updateMasterDropdownCategoryPending } = useSelector(state => state?.dropdownMaster)\r\n    const {\r\n        selectedDropdownCategoryData,\r\n        openModel,\r\n        handleOpenClose,\r\n        handleCreateUpdateDropdownCategory,\r\n    } = props\r\n\r\n    const [errors, setErrors] = useState({})\r\n    const [createUpdateCategoryDropdownFormData, setCreateUpdateCategoryDropdownFormData] = useState({\r\n        name: '',\r\n        short_name: '',\r\n        is_active: true,\r\n    })\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e.target : { value: e };\r\n\r\n        setCreateUpdateCategoryDropdownFormData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n            if (name === 'name') {\r\n                updatedState.short_name = createShortName(value);\r\n            }\r\n            return updatedState;\r\n        });\r\n\r\n        // Reset error for this field\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitData = async () => {\r\n        const validationResponse = await validateSchema(addUpdateCategoryDropdownSchema, createUpdateCategoryDropdownFormData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n                name,\r\n                short_name,\r\n                is_active,\r\n            } = createUpdateCategoryDropdownFormData\r\n            const params = {\r\n                name,\r\n                short_name,\r\n                is_active,\r\n            }\r\n            handleCreateUpdateDropdownCategory(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (selectedDropdownCategoryData) {\r\n            setCreateUpdateCategoryDropdownFormData({\r\n                name: selectedDropdownCategoryData?.name,\r\n                short_name: selectedDropdownCategoryData?.short_name,\r\n                is_active: selectedDropdownCategoryData?.is_active,\r\n            })\r\n        }\r\n    }, [selectedDropdownCategoryData])\r\n\r\n    const resetForm = () => {\r\n        setCreateUpdateCategoryDropdownFormData({\r\n            name: '',\r\n            short_name: '',\r\n            is_active: true,\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n                tabIndex={-1}\r\n                style={{\r\n                    visibility: openModel ? 'visible' : 'hidden',\r\n                    width: \"800px\"\r\n                }}\r\n                id=\"interviewDetail\"\r\n            >\r\n                <div className=\"offcanvas-header\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{selectedDropdownCategoryData ? t(\"headings.updateCategory\"):  t(\"headings.addCategory\") }</h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                        onClick={() => handleOpenClose()}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"offcanvas-body myRequest \">\r\n                    <div className=\"formPanel\">\r\n                        \r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.name\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.name\")}\r\n                                        value={createUpdateCategoryDropdownFormData?.name}\r\n                                        name=\"name\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    />\r\n                                    {errors?.name && (\r\n                                        <CustomError text={errors.name} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.shortName\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <input type=\"text\" className=\"form-control fs-7\"\r\n                                        name='short_name'\r\n                                        placeholder={t(\"placeholders.shortName\")}\r\n                                        value={createUpdateCategoryDropdownFormData?.short_name}\r\n                                        onChange={(e) => handleFromChange(e)}\r\n\r\n                                    />\r\n                                    {errors?.short_name && (\r\n                                        <CustomError text={errors.short_name} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        \r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.isActive\")} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustCheckbox\r\n                                        key={\"is_active\"}\r\n                                        id={`is_active`}\r\n                                        checked={createUpdateCategoryDropdownFormData?.is_active}\r\n                                        handleChange={(e) => handleFromChange(e)}\r\n                                        name={\"is_active\"}\r\n                                    />\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"offcanvas-footer\">\r\n                    <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                        <CustomButton\r\n                            text={selectedDropdownCategoryData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                            classNames={\"btn btn-org-gradient\"}\r\n                            handleClick={() => submitData()}\r\n                            isLoading={selectedDropdownCategoryData ? updateMasterDropdownCategoryPending : addMasterDropdownCategoryPending}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {openModel && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateUpdateDropdownCategory\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { dropdownMasterActions } from '../../../core/resource/actions'\r\nimport { pagination } from '../../../utils/Constants.config'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport CreateUpdateDropdownData from './CreateUpdateDropdownData'\r\nimport DropdownDataTable from './DropdownDataTable'\r\nimport ApproveRejectModal from '../../modal/ApproveRejectModal'\r\nimport { useCustomTranslation } from '../../../translation'\r\nimport DropdownCategoryTable from './DropdownCategoryTable'\r\nimport { CustomTabs } from '../../reuseableComponents'\r\nimport { Icon } from '../../commanComponent'\r\nimport CreateUpdateDropdownCategory from './CreateUpdateDropdownCategory'\r\nconst DropDownMaster = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const dispatch = useDispatch()\r\n    const {\r\n\r\n        addDropdownDataPending,\r\n        addDropdownDataRes,\r\n        addDropdownDataError,\r\n\r\n        getAllDropdownDataPending,\r\n        getAllDropdownDataRes,\r\n        getAllDropdownDataError,\r\n\r\n        deleteDropdownDataPending,\r\n        deleteDropdownDataRes,\r\n        deleteDropdownDataError,\r\n\r\n        updateDropdownDataRes,\r\n        updateDropdownDataError,\r\n        updateDropdownDataPending,\r\n\r\n        getDropdownMasterConstantDataPending,\r\n        getDropdownMasterConstantDataRes,\r\n        getDropdownMasterConstantDataError,\r\n\r\n        addMasterDropdownCategoryPending,\r\n        addMasterDropdownCategoryRes,\r\n        addMasterDropdownCategoryError,\r\n\r\n        getMasterDropdownCategoryPending,\r\n        getMasterDropdownCategoryRes,\r\n        getMasterDropdownCategoryError,\r\n\r\n        getAllMasterDropdownCategoryPending,\r\n        getAllMasterDropdownCategoryRes,\r\n        getAllMasterDropdownCategoryError,\r\n\r\n        updateMasterDropdownCategoryPending,\r\n        updateMasterDropdownCategoryRes,\r\n        updateMasterDropdownCategoryError,\r\n\r\n        deleteMasterDropdownCategoryPending,\r\n        deleteMasterDropdownCategoryRes,\r\n        deleteMasterDropdownCategoryError,\r\n\r\n    } = useSelector(state => state.dropdownMaster)\r\n\r\n    const [isOpenCreateUpdateDropdownData, setIsOpenCreateUpdateDropdownData] = useState(false)\r\n    const [selectedDropdownData, setSelectedDropdownData] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [allDropdownDatas, setAllDropdownDatas] = useState([])\r\n    const [isShowDeleteDropdownDataModal, setIsShowDeleteDropdownDataModal] = useState(false)\r\n    const [deleteDropdownDataId, setDeleteDropdownDataId] = useState('')\r\n    const [allDropdownConstantData, setAllDropdownConstantData] = useState('')\r\n    const [selectedDropdownCategoryData, setSelectedDropdownCategoryData] = useState('')\r\n    const [isOpenDropdownCategoryModal, setIsOpenDropdownCategoryModal] = useState(false)\r\n    const [categoryCurrentPage, setCategoryCurrentPage] = useState(1)\r\n    const [deleteDropdownCategoryId, setDeleteDropdownCategoryId] = useState('')\r\n    const [allDropdownCategory, setAllDropdownCategory] = useState('')\r\n    const [isShowDeleteDropdownCategoryModal, setIsShowDeleteDropdownCategoryModal] = useState(false)\r\n\r\n    /* Create Update Dropdown Data */\r\n    const toggleCreateUpdateDropdownDataModal = (data) => {\r\n        if (!data) {\r\n            setSelectedDropdownData('')\r\n        } else {\r\n            setSelectedDropdownData(data)\r\n        }\r\n        setIsOpenCreateUpdateDropdownData(!isOpenCreateUpdateDropdownData)\r\n    }\r\n\r\n    const handleCreateUpdateDropdownData = (params) => {\r\n        if (selectedDropdownData) {\r\n            params['_id'] = selectedDropdownData?._id\r\n            dispatch(dropdownMasterActions.updateDropdownDataRequest(params));\r\n        }\r\n        else {\r\n            dispatch(dropdownMasterActions.addDropdownDataRequest(params));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!addDropdownDataPending) {\r\n            if (addDropdownDataError) {\r\n                dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_ADD_DROPDOWN_DATA_STORE\"))\r\n                return;\r\n            }\r\n            if (addDropdownDataRes) {\r\n                if (addDropdownDataRes?.code === 200) {\r\n                    dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_ADD_DROPDOWN_DATA_STORE\"))\r\n                    getAllDropdownDatas()\r\n                    setIsOpenCreateUpdateDropdownData(!isOpenCreateUpdateDropdownData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        addDropdownDataRes,\r\n        addDropdownDataError,\r\n        addDropdownDataPending\r\n    ]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!updateDropdownDataPending) {\r\n            if (updateDropdownDataError) {\r\n                dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_UPDATE_DROPDOWN_DATA_STORE\"))\r\n                return;\r\n            }\r\n            if (updateDropdownDataRes) {\r\n                if (updateDropdownDataRes?.code === 200) {\r\n                    dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_UPDATE_DROPDOWN_DATA_STORE\"))\r\n                    getAllDropdownDatas()\r\n                    setIsOpenCreateUpdateDropdownData(!isOpenCreateUpdateDropdownData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updateDropdownDataRes,\r\n        updateDropdownDataError,\r\n        updateDropdownDataPending\r\n    ]);\r\n\r\n    /* Get All DropdownData */\r\n    useEffect(() => {\r\n        getAllDropdownDatas()\r\n    }, [currentPage])\r\n    const getAllDropdownDatas = () => {\r\n        const params = {\r\n            page: currentPage,\r\n            limit: pagination.limit,\r\n        }\r\n        dispatch(dropdownMasterActions.getAllDropdownDataRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllDropdownDataPending) {\r\n            if (getAllDropdownDataError) {\r\n                return;\r\n            }\r\n            if (getAllDropdownDataRes) {\r\n                if (getAllDropdownDataRes?.code === 200) {\r\n                    const getAllDropdownDataDatas = getAllDropdownDataRes?.data\r\n                    setAllDropdownDatas(getAllDropdownDataDatas)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllDropdownDataRes,\r\n        getAllDropdownDataError,\r\n        getAllDropdownDataPending\r\n    ]);\r\n\r\n    /* Delete DropdownData */\r\n    const toggleDropdownDataDeleteModal = (id) => {\r\n        if (id) {\r\n            setDeleteDropdownDataId(id)\r\n        }\r\n        setIsShowDeleteDropdownDataModal(!isShowDeleteDropdownDataModal)\r\n    }\r\n\r\n    const handleDeleteDropdownData = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deleteDropdownDataId\r\n            }\r\n            dispatch(dropdownMasterActions?.deleteDropdownDataRequest(params))\r\n        } else {\r\n            toggleDropdownDataDeleteModal()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!deleteDropdownDataPending) {\r\n            if (deleteDropdownDataError) {\r\n                dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_DELETE_DROPDOWN_DATA_STORE\"))\r\n                return;\r\n            }\r\n            if (deleteDropdownDataRes) {\r\n                if (deleteDropdownDataRes?.code === 200) {\r\n                    toggleDropdownDataDeleteModal()\r\n                    if (currentPage > 1 && allDropdownDatas?.data?.length === 1) {\r\n                        setCurrentPage((pre => pre -= 1))\r\n                    } else {\r\n                        getAllDropdownDatas()\r\n                    }\r\n                    dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_DELETE_DROPDOWN_DATA_STORE\"))\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        deleteDropdownDataRes,\r\n        deleteDropdownDataError,\r\n        deleteDropdownDataPending\r\n    ]);\r\n\r\n\r\n    /* Get Dropdown Master Constant Data */\r\n    useEffect(() => {\r\n        getDropdownMasterConstantData()\r\n    }, [])\r\n    const getDropdownMasterConstantData = () => {\r\n        dispatch(dropdownMasterActions?.getDropdownMasterConstantDataRequest())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getDropdownMasterConstantDataPending) {\r\n            if (getDropdownMasterConstantDataError) {\r\n                return;\r\n            }\r\n            if (getDropdownMasterConstantDataRes) {\r\n                if (getDropdownMasterConstantDataRes?.code === 200) {\r\n                    const dropdownDataConstantData = getDropdownMasterConstantDataRes?.data\r\n                    setAllDropdownConstantData(dropdownDataConstantData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getDropdownMasterConstantDataRes,\r\n        getDropdownMasterConstantDataError,\r\n        getDropdownMasterConstantDataPending\r\n    ]);\r\n\r\n    const dropDownMasterRequest = [\r\n        { name: \"Dropdown Category\", id: \"dropdown_category\" },\r\n        { name: \"Dropdown Data\", id: \"dropdown\" },\r\n    ]\r\n\r\n\r\n\r\n    /* -----------------------Dropdown Category ---------------------------- */\r\n\r\n    const toggleCreateUpdateDropdownCategoryModal = (data) => {\r\n        if (!data) {\r\n            setSelectedDropdownCategoryData('')\r\n        } else {\r\n            setSelectedDropdownCategoryData(data)\r\n        }\r\n        setIsOpenDropdownCategoryModal(!isOpenDropdownCategoryModal)\r\n    }\r\n\r\n    /* Create Update Dropdown Category */\r\n\r\n    \r\n    const handleCreateUpdateDropdownCategory = (params) => {\r\n        if (selectedDropdownCategoryData) {\r\n            params['_id'] = selectedDropdownCategoryData?._id\r\n            dispatch(dropdownMasterActions.updateMasterDropdownCategoryRequest(params));\r\n        }\r\n        else {\r\n            dispatch(dropdownMasterActions.addMasterDropdownCategoryRequest(params));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!addMasterDropdownCategoryPending) {\r\n            if (addMasterDropdownCategoryError) {\r\n                dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_ADD_MASTER_DROPDOWN_CATEGORY_STORE\"))\r\n                return;\r\n            }\r\n            if (addMasterDropdownCategoryRes) {\r\n                if (addMasterDropdownCategoryRes?.code === 200) {\r\n                    dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_ADD_MASTER_DROPDOWN_CATEGORY_STORE\"))\r\n                    getMasterDropdownCategoryData()\r\n                    setIsOpenDropdownCategoryModal(!isOpenDropdownCategoryModal)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        addMasterDropdownCategoryRes,\r\n        addMasterDropdownCategoryError,\r\n        addMasterDropdownCategoryPending\r\n    ]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!updateMasterDropdownCategoryPending) {\r\n            if (updateMasterDropdownCategoryError) {\r\n                dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_UPDATE_MASTER_DROPDOWN_CATEGORY_STORE\"))\r\n                return;\r\n            }\r\n            if (updateMasterDropdownCategoryRes) {\r\n                if (updateMasterDropdownCategoryRes?.code === 200) {\r\n                    dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_UPDATE_MASTER_DROPDOWN_CATEGORY_STORE\"))\r\n                    getMasterDropdownCategoryData()\r\n                    setIsOpenDropdownCategoryModal(!isOpenDropdownCategoryModal)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updateMasterDropdownCategoryRes,\r\n        updateMasterDropdownCategoryError,\r\n        updateMasterDropdownCategoryPending\r\n    ]);\r\n\r\n    /* Delete Dropdown Category*/\r\n    const toggleDropdownCategoryDeleteModal = (id) => {\r\n        if (id) {\r\n            setDeleteDropdownCategoryId(id)\r\n        }\r\n        setIsShowDeleteDropdownCategoryModal(!isShowDeleteDropdownCategoryModal)\r\n    }\r\n\r\n    const handleDeleteDropdownCategory = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deleteDropdownCategoryId\r\n            }\r\n            dispatch(dropdownMasterActions?.deleteMasterDropdownCategoryRequest(params))\r\n        } else {\r\n            toggleDropdownCategoryDeleteModal()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!deleteMasterDropdownCategoryPending) {\r\n            if (deleteMasterDropdownCategoryError) {\r\n                dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_DELETE_MASTER_DROPDOWN_CATEGORY_STORE\"))\r\n                return;\r\n            }\r\n            if (deleteMasterDropdownCategoryRes) {\r\n                if (deleteMasterDropdownCategoryRes?.code === 200) {\r\n                    toggleDropdownCategoryDeleteModal()\r\n                    if (categoryCurrentPage > 1 && allDropdownCategory?.data?.length === 1) {\r\n                        setCategoryCurrentPage((pre => pre -= 1))\r\n                    } else {\r\n                        getMasterDropdownCategoryData()\r\n                    }\r\n                    dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_DELETE_MASTER_DROPDOWN_CATEGORY_STORE\"))\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        deleteMasterDropdownCategoryRes,\r\n        deleteMasterDropdownCategoryError,\r\n        deleteMasterDropdownCategoryPending\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        getMasterDropdownCategoryData()\r\n    }, [categoryCurrentPage])\r\n\r\n    const getMasterDropdownCategoryData = () => {\r\n        const params = {\r\n            page: categoryCurrentPage,\r\n            limit: pagination.limit,\r\n        }\r\n        dispatch(dropdownMasterActions.getMasterDropdownCategoryRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getMasterDropdownCategoryPending) {\r\n            if (getMasterDropdownCategoryError) {\r\n                return;\r\n            }\r\n            if (getMasterDropdownCategoryRes) {\r\n                if (getMasterDropdownCategoryRes?.code === 200) {\r\n                    setAllDropdownCategory(getMasterDropdownCategoryRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getMasterDropdownCategoryRes,\r\n        getMasterDropdownCategoryError,\r\n        getMasterDropdownCategoryPending\r\n    ]);\r\n\r\n    return (\r\n        <>\r\n            <div className='cardBox myRequest mb-3 employeeHistory'>\r\n                <div className=\"d-flex align-items-center justify-content-between gap-3\">\r\n                    <div className=\"cardHead d-flex\">\r\n                        <img src=\"images/myrequest-icon.svg\" alt=\"\" width={35} />\r\n                        <h4 className=\"ms-2 \">Dropdown Master</h4>\r\n                    </div>\r\n                    <div className='d-flex gap-2'>\r\n                        <CustomButton\r\n                            classNames={\"btn btn-org-gradient\"}\r\n                            handleClick={() => toggleCreateUpdateDropdownCategoryModal()}\r\n                            icon={<Icon className=\"fa fa-plus\" />}\r\n                            text={t(\"btns.dropdownCategory\")}\r\n                        />\r\n                        <CustomButton\r\n                            classNames={\"btn btn-primary gradientBg\"}\r\n                            handleClick={() => toggleCreateUpdateDropdownDataModal()}\r\n                            icon={<Icon className=\"fa fa-plus\" />}\r\n                            text={t(\"btns.createDropdownData\")}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <CustomTabs tabs={dropDownMasterRequest} type=\"dropDownMasterRequest\" />\r\n                <div className=\"tab-content\">\r\n                    <div className=\"tab-pane fade active show\" id=\"dropdown_category\">\r\n                        <DropdownCategoryTable\r\n                            setSelectedDropdownCategoryData={setSelectedDropdownCategoryData}\r\n                            toggleCreateUpdateDropdownCategoryModal={toggleCreateUpdateDropdownCategoryModal}\r\n                            currentPage={categoryCurrentPage}\r\n                            setCurrentPage={setCategoryCurrentPage}\r\n                            allDropdownCategory={allDropdownCategory}\r\n                            toggleDropdownCategoryDeleteModal={toggleDropdownCategoryDeleteModal}\r\n                        // isLoading={}\r\n                        />\r\n\r\n                    </div>\r\n                    <div className=\"tab-pane fade show\" id=\"dropdown\">\r\n                        <DropdownDataTable\r\n                            setSelectedDropdownData={setSelectedDropdownData}\r\n                            toggleCreateUpdateDropdownDataModal={toggleCreateUpdateDropdownDataModal}\r\n                            currentPage={currentPage}\r\n                            setCurrentPage={setCurrentPage}\r\n                            allDropdownDatas={allDropdownDatas}\r\n                            toggleDropdownDataDeleteModal={toggleDropdownDataDeleteModal}\r\n                            isLoading={getAllDropdownDataPending}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {isShowDeleteDropdownDataModal && (\r\n                <ApproveRejectModal\r\n                    onApproveReject={handleDeleteDropdownData}\r\n                    isShow={isShowDeleteDropdownDataModal}\r\n                    desc={t(\"alerts.deletePopup.desc\").replace('$1', \"Dropdown\")}\r\n                    btnRightLoading={deleteDropdownDataPending}\r\n                    btnTextRight={t(\"btns.delete\")}\r\n                    btnTextLeft={t(\"btns.cancel\")}\r\n                />)\r\n            }\r\n            {isShowDeleteDropdownCategoryModal && (\r\n                <ApproveRejectModal\r\n                    onApproveReject={handleDeleteDropdownCategory}\r\n                    isShow={isShowDeleteDropdownCategoryModal}\r\n                    desc={t(\"alerts.deletePopup.desc\").replace('$1', \"Dropdown\")}\r\n                    btnRightLoading={deleteMasterDropdownCategoryPending}\r\n                    btnTextRight={t(\"btns.delete\")}\r\n                    btnTextLeft={t(\"btns.cancel\")}\r\n                />)\r\n            }\r\n            {isOpenCreateUpdateDropdownData && <CreateUpdateDropdownData\r\n                openModel={isOpenCreateUpdateDropdownData}\r\n                handleOpenClose={toggleCreateUpdateDropdownDataModal}\r\n                handleCreateUpdateDropdownData={handleCreateUpdateDropdownData}\r\n                selectedDropdownData={selectedDropdownData}\r\n                allDropdownConstantData={allDropdownConstantData}\r\n            />}\r\n            {isOpenDropdownCategoryModal && <CreateUpdateDropdownCategory\r\n                openModel={isOpenDropdownCategoryModal}\r\n                handleOpenClose={toggleCreateUpdateDropdownCategoryModal}\r\n                handleCreateUpdateDropdownCategory={handleCreateUpdateDropdownCategory}\r\n                selectedDropdownCategoryData={selectedDropdownCategoryData}\r\n            />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DropDownMaster\r\n"],"names":["props","t","useCustomTranslation","addDropdownDataPending","updateDropdownDataPending","useSelector","state","dropdownMaster","selectedDropdownData","openModel","handleOpenClose","handleCreateUpdateDropdownData","allDropdownConstantData","errors","setErrors","useState","createUpdateDropdownDataFormData","setCreateUpdateDropdownDataFormData","category","category_key","category_value","category_short_name","input_type","is_active","handleFromChange","e","fieldName","_e$target","name","target","value","type","checked","prevState","updatedState","createShortName","prevErrors","undefined","useEffect","resetForm","label","input_type_name","_jsxs","_Fragment","children","className","tabIndex","style","visibility","width","id","_jsx","onClick","Label","text","required","CustomSelect","data","dropdownCategory","placeholder","handleChange","selectedOption","CustomError","Input","onChange","dropdownInputType","CustCheckbox","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","addUpdateDropdownDataSchema","isValid","params","submitCreateUpdatePostion","isLoading","toggleCreateUpdateDropdownDataModal","toggleDropdownDataDeleteModal","currentPage","setCurrentPage","allDropdownDatas","dropdownDataList","setDropdownDataList","scopedSlots","useMemo","sn","_","index","item","getBadgeColor","created_at","moment","format","action","Icon","_id","CustomTable","fields","key","pagination","totalPages","isHeader","tableStyle","padding","boxShadow","toggleCreateUpdateDropdownCategoryModal","toggleDropdownCategoryDeleteModal","allDropdownCategory","addMasterDropdownCategoryPending","updateMasterDropdownCategoryPending","selectedDropdownCategoryData","handleCreateUpdateDropdownCategory","createUpdateCategoryDropdownFormData","setCreateUpdateCategoryDropdownFormData","short_name","addUpdateCategoryDropdownSchema","submitData","dispatch","useDispatch","addDropdownDataRes","addDropdownDataError","getAllDropdownDataPending","getAllDropdownDataRes","getAllDropdownDataError","deleteDropdownDataPending","deleteDropdownDataRes","deleteDropdownDataError","updateDropdownDataRes","updateDropdownDataError","getDropdownMasterConstantDataPending","getDropdownMasterConstantDataRes","getDropdownMasterConstantDataError","addMasterDropdownCategoryRes","addMasterDropdownCategoryError","getMasterDropdownCategoryPending","getMasterDropdownCategoryRes","getMasterDropdownCategoryError","getAllMasterDropdownCategoryPending","getAllMasterDropdownCategoryRes","getAllMasterDropdownCategoryError","updateMasterDropdownCategoryRes","updateMasterDropdownCategoryError","deleteMasterDropdownCategoryPending","deleteMasterDropdownCategoryRes","deleteMasterDropdownCategoryError","isOpenCreateUpdateDropdownData","setIsOpenCreateUpdateDropdownData","setSelectedDropdownData","setAllDropdownDatas","isShowDeleteDropdownDataModal","setIsShowDeleteDropdownDataModal","deleteDropdownDataId","setDeleteDropdownDataId","setAllDropdownConstantData","setSelectedDropdownCategoryData","isOpenDropdownCategoryModal","setIsOpenDropdownCategoryModal","categoryCurrentPage","setCategoryCurrentPage","deleteDropdownCategoryId","setDeleteDropdownCategoryId","setAllDropdownCategory","isShowDeleteDropdownCategoryModal","setIsShowDeleteDropdownCategoryModal","dropdownMasterActions","handleClearDropdownStore","code","getAllDropdownDatas","page","limit","getAllDropdownDataRequest","getAllDropdownDataDatas","_allDropdownDatas$dat","length","pre","getDropdownMasterConstantData","getDropdownMasterConstantDataRequest","dropdownDataConstantData","getMasterDropdownCategoryData","_allDropdownCategory$","getMasterDropdownCategoryRequest","src","alt","icon","CustomTabs","tabs","DropdownCategoryTable","DropdownDataTable","ApproveRejectModal","onApproveReject","deleteDropdownDataRequest","isShow","desc","replace","btnRightLoading","btnTextRight","btnTextLeft","deleteMasterDropdownCategoryRequest","CreateUpdateDropdownData","updateDropdownDataRequest","addDropdownDataRequest","CreateUpdateDropdownCategory","updateMasterDropdownCategoryRequest","addMasterDropdownCategoryRequest"],"sourceRoot":""}