{"version":3,"file":"static/js/9948.24e853c7.chunk.js","mappings":"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","sources":["components/admin/qualification/CreateUpdateQualification.js","components/admin/qualification/qualificationTable.js","components/admin/qualification/Qualification.js","components/modal/ApproveRejectModal.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { createShortName } from '../../../utils/common'\r\nimport CustomSelect from '../../commanComponent/CustomSelect'\r\nimport { Input, Label } from '../../commanComponent'\r\nimport { validateSchema } from '../../../utils/ValidationHelper'\r\nimport { addUpdateQualificationSchema } from '../../../utils/ValidationSchema'\r\nimport { CustomButton, CustomError } from '../../globalComponents'\r\nimport { useCustomTranslation } from '../../../translation'\r\nconst CreateUpdateQualification = (props) => {\r\n    const { addQualificationPending, updateQualificationPending } = useSelector(state => state?.qualification)\r\n    const  {t} =useCustomTranslation()\r\n    const {\r\n        selectedQualificationData,\r\n        openModel,\r\n        handleOpenClose,\r\n        handleCreateUpdateQualification,\r\n        allQualifications\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [createUpdateQualificationFormData, setCreateUpdateQualificationFormData] = useState({\r\n        name: '',\r\n        short_name: '',\r\n        parent_id: null\r\n    })\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e.target : { value: e };\r\n\r\n        setCreateUpdateQualificationFormData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n            if (name === 'name') {\r\n                updatedState.short_name = createShortName(value);\r\n                setErrors(prevErrors => ({\r\n                    ...prevErrors,\r\n                    [\"short_name\"]: undefined,\r\n                }));\r\n            }\r\n            return updatedState;\r\n        });\r\n\r\n        // Reset error for this field\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitCreateUpdateQualification = async () => {\r\n        const validationResponse = await validateSchema(addUpdateQualificationSchema, createUpdateQualificationFormData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n                parent,\r\n                name,\r\n                short_name,\r\n            } = createUpdateQualificationFormData\r\n            const params = {\r\n                name,\r\n                short_name,\r\n                [\"parent_id\"]: parent?.value ||'',\r\n            } \r\n            setErrors({})\r\n            handleCreateUpdateQualification(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (selectedQualificationData) {\r\n            setCreateUpdateQualificationFormData({\r\n                parent: { value: selectedQualificationData?.parent_id, label: selectedQualificationData?.parent_name },\r\n                name: selectedQualificationData?.name,\r\n                short_name: selectedQualificationData?.short_name,\r\n            })\r\n        }\r\n    }, [selectedQualificationData])\r\n\r\n    const resetForm = () => {\r\n        setCreateUpdateQualificationFormData({\r\n            parent: null,\r\n            name: '',\r\n            short_name: '',\r\n        })\r\n        setErrors({})\r\n    }\r\n    return (\r\n        <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n            tabIndex={-1}\r\n            style={{\r\n                visibility: openModel ? 'visible' : 'hidden',\r\n                width: \"800px\"\r\n            }}\r\n            id=\"interviewDetail\"\r\n        >\r\n            <div className=\"offcanvas-header\">\r\n                <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{selectedQualificationData ? \"Update\" : \"Add\"} Qualification</h5>\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                    onClick={() => handleOpenClose()}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"offcanvas-body myRequest \">\r\n                <div className=\"formPanel\">\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.name\")} required={true}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    placeholder={t(\"placeholders.qualificationName\")}\r\n                                    value={createUpdateQualificationFormData?.name}\r\n                                    name=\"name\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                                {errors?.name && (\r\n                                    <CustomError text={errors.name} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.shortName\")} required={true}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <input type=\"text\" className=\"form-control fs-7\"\r\n                                    name='short_name'\r\n                                    placeholder={t(\"placeholders.shortName\")}\r\n                                    value={createUpdateQualificationFormData?.short_name}\r\n                                    onChange={(e) => handleFromChange(e)}\r\n\r\n                                />\r\n                                {errors?.short_name && (\r\n                                    <CustomError text={errors.short_name} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.parentQualification\")}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <CustomSelect\r\n                                    data={allQualifications}\r\n                                    placeholder={t(\"placeholders.parentQualification\")}\r\n                                    value={createUpdateQualificationFormData?.parent || ''}\r\n                                    handleChange={(selectedOption) => handleFromChange(selectedOption, \"parent\")}\r\n                                    name=\"parent\"\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"offcanvas-footer\">\r\n                <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                    <CustomButton\r\n                        text={selectedQualificationData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                        classNames={\"btn btn-org-gradient\"}\r\n                        handleClick={() => submitCreateUpdateQualification()}\r\n                        isLoading={selectedQualificationData ? updateQualificationPending : addQualificationPending}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateUpdateQualification\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomTable } from '../../reuseableComponents'\r\nimport { getBadgeColor } from '../../../utils/common'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment'\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst QualificationTable = (props) => {\r\n    const {t}= useCustomTranslation()\r\n    const {\r\n        isLoading,\r\n        setSelectedQualificationData,\r\n        toggleCreateUpdateQualificationModal,\r\n        toggleQualificationDeleteModal,\r\n        currentPage,\r\n        setCurrentPage,\r\n        allQualificationsByParentId\r\n    } = props\r\n    const [qualificationList, setQualificationList] = useState('')\r\n\r\n\r\n    const handleUpdateQualification = (data) => {\r\n        toggleCreateUpdateQualificationModal(data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setQualificationList(allQualificationsByParentId)\r\n    }, [allQualificationsByParentId])\r\n\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n        action: item => (\r\n            <div className=\"actionGroup d-flex gap-2\">\r\n                <CustomButton\r\n                    text={t(\"btns.update\")}\r\n                    classNames=\"btn btn-primary\"\r\n                    handleClick={() => {\r\n                        handleUpdateQualification(item);\r\n                    }}\r\n                />\r\n                <CustomButton\r\n                    text={t(\"btns.delete\")}\r\n                    handleClick={() => toggleQualificationDeleteModal(item._id)}\r\n                    classNames=\"btn btn-danger\"\r\n                />\r\n            </div>\r\n        )\r\n    }), [setSelectedQualificationData, toggleCreateUpdateQualificationModal]);\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'name', label: 'Qualification Name' },\r\n        { key: 'short_name', label: 'Short Name' },\r\n        { key: 'created_at', label: 'Created At' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n\r\n  return (\r\n    <>\r\n    <CustomTable\r\n        data={qualificationList?.data}\r\n        fields={fields}\r\n        isLoading={isLoading}\r\n        pagination={true}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n        totalPages={qualificationList?.totalPages}\r\n        tableName={t(\"headings.qualification\")}\r\n        // onSearch={handleSearch}\r\n        scopedSlots={scopedSlots}\r\n    />\r\n</>\r\n  )\r\n}\r\n\r\nexport default QualificationTable\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport ApproveRejectModal from '../../modal/ApproveRejectModal'\r\nimport { qualificationActions } from '../../../core/resource/actions'\r\nimport { pagination } from '../../../utils/Constants.config'\r\nimport CreateUpdateQualification from './CreateUpdateQualification'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport QualificationTable from './qualificationTable'\r\nimport { useCustomTranslation } from '../../../translation'\r\nconst Qualification = () => {\r\n    const dispatch = useDispatch()\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        addQualificationPending,\r\n        addQualificationRes,\r\n        addQualificationError,\r\n\r\n        getAllQualificationPending,\r\n        getAllQualificationRes,\r\n        getAllQualificationError,\r\n\r\n        getAllQualificationsByParentIdPending,\r\n        getAllQualificationsByParentIdRes,\r\n        getAllQualificationsByParentIdError,\r\n\r\n        updateQualificationPending,\r\n        updateQualificationRes,\r\n        updateQualificationError,\r\n\r\n        deleteQualificationPending,\r\n        deleteQualificationRes,\r\n        deleteQualificationError,\r\n\r\n    } = useSelector(state => state.qualification)\r\n\r\n    const [isOpenCreateUpdateQualification, setIsOpenCreateUpdateQualification] = useState(false)\r\n    const [selectedQualificationData, setSelectedQualificationData] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [allQualifications, setAllQualifications] = useState([])\r\n    const [isShowDeleteQualificationModal, setIsShowDeleteQualificationModal] = useState(false)\r\n    const [deleteQualificationId, setDeleteQualificationId] = useState('')\r\n    const [allQualificationsByParentId, setAllQualificationsByParentId] = useState('')\r\n\r\n    /* Create Update Qualification */\r\n    const toggleCreateUpdateQualificationModal = (data) => {\r\n        if (!data) {\r\n            setSelectedQualificationData('')\r\n        } else {\r\n            setSelectedQualificationData(data)\r\n        }\r\n        setIsOpenCreateUpdateQualification(!isOpenCreateUpdateQualification)\r\n    }\r\n\r\n    const handleCreateUpdateQualification = (params) => {\r\n        if (selectedQualificationData) {\r\n            params['_id'] = selectedQualificationData?._id\r\n            dispatch(qualificationActions.updateQualificationRequest(params));\r\n        }\r\n        else {\r\n            dispatch(qualificationActions.addQualificationRequest(params));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!addQualificationPending) {\r\n            if (addQualificationError) {\r\n                dispatch(qualificationActions.handleClearQualificationStore(\"HANDLE_CLEAR_ADD_QUALIFICATION_STORE\"))\r\n                return;\r\n            }\r\n            if (addQualificationRes) {\r\n                if (addQualificationRes?.code === 200) {\r\n                    dispatch(qualificationActions.handleClearQualificationStore(\"HANDLE_CLEAR_ADD_QUALIFICATION_STORE\"))\r\n                    getAllQualificationsByParentId()\r\n                    getAllQualifications()\r\n                    setIsOpenCreateUpdateQualification(!isOpenCreateUpdateQualification)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        addQualificationRes,\r\n        addQualificationError,\r\n        addQualificationPending\r\n    ]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!updateQualificationPending) {\r\n            if (updateQualificationError) {\r\n                dispatch(qualificationActions.handleClearQualificationStore(\"HANDLE_CLEAR_UPDATE_QUALIFICATION_STORE\"))\r\n                return;\r\n            }\r\n            if (updateQualificationRes) {\r\n                if (updateQualificationRes?.code === 200) {\r\n                    dispatch(qualificationActions.handleClearQualificationStore(\"HANDLE_CLEAR_UPDATE_QUALIFICATION_STORE\"))\r\n                    getAllQualificationsByParentId()\r\n                    getAllQualifications()\r\n                    setIsOpenCreateUpdateQualification(!isOpenCreateUpdateQualification)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updateQualificationRes,\r\n        updateQualificationError,\r\n        updateQualificationPending\r\n    ]);\r\n\r\n    /* Get All Qualifications By Parent Id */\r\n    useEffect(() => {\r\n        getAllQualificationsByParentId()\r\n    }, [currentPage])\r\n    const getAllQualificationsByParentId = () => {\r\n        const params = {\r\n            page: currentPage,\r\n            limit: pagination.limit,\r\n        }\r\n        dispatch(qualificationActions.getAllQualificationsByParentIdRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllQualificationsByParentIdPending) {\r\n            if (getAllQualificationsByParentIdError) {\r\n                return;\r\n            }\r\n            if (getAllQualificationsByParentIdRes) {\r\n                if (getAllQualificationsByParentIdRes?.code === 200) {\r\n                    setAllQualificationsByParentId(getAllQualificationsByParentIdRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllQualificationsByParentIdRes,\r\n        getAllQualificationsByParentIdError,\r\n        getAllQualificationsByParentIdPending\r\n    ]);\r\n\r\n    /* Get All Qualification */\r\n    useEffect(() => {\r\n        getAllQualifications()\r\n    }, [])\r\n    const getAllQualifications = () => {\r\n        dispatch(qualificationActions.getAllQualificationRequest());\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllQualificationPending) {\r\n            if (getAllQualificationError) {\r\n                return;\r\n            }\r\n            if (getAllQualificationRes) {\r\n                if (getAllQualificationRes?.code === 200) {\r\n                    setAllQualifications(getAllQualificationRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllQualificationRes,\r\n        getAllQualificationError,\r\n        getAllQualificationPending\r\n    ]);\r\n\r\n\r\n    /* Delete Qualification */\r\n    const toggleQualificationDeleteModal = (id) => {\r\n        if (id) {\r\n            setDeleteQualificationId(id)\r\n        }\r\n        setIsShowDeleteQualificationModal(!isShowDeleteQualificationModal)\r\n    }\r\n\r\n    const handleDeleteQualification = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deleteQualificationId\r\n            }\r\n            dispatch(qualificationActions?.deleteQualificationRequest(params))\r\n        } else {\r\n            toggleQualificationDeleteModal()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!deleteQualificationPending) {\r\n            if (deleteQualificationError) {\r\n                dispatch(qualificationActions.handleClearQualificationStore(\"HANDLE_CLEAR_DELETE_QUALIFICATION_STORE\"))\r\n                return;\r\n            }\r\n            if (deleteQualificationRes) {\r\n                if (deleteQualificationRes?.code === 200) {\r\n                    toggleQualificationDeleteModal()  \r\n                    \r\n                    if (currentPage > 1 && allQualificationsByParentId?.data?.length === 1) {\r\n                        setCurrentPage((pre => pre -= 1))\r\n                      } else {\r\n                        getAllQualificationsByParentId()\r\n                      }\r\n                      getAllQualifications()\r\n                    dispatch(qualificationActions.handleClearQualificationStore(\"HANDLE_CLEAR_DELETE_QUALIFICATION_STORE\"))\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        deleteQualificationRes,\r\n        deleteQualificationError,\r\n        deleteQualificationPending\r\n    ]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"d-flex justify-content-end \">\r\n                <CustomButton\r\n                    classNames={\"btn btn-primary gradientBg\"}\r\n                    handleClick={() => toggleCreateUpdateQualificationModal()}\r\n                    text={t(\"btns.createQualification\")}\r\n                />\r\n            </div>\r\n            <CreateUpdateQualification\r\n                openModel={isOpenCreateUpdateQualification}\r\n                handleOpenClose={toggleCreateUpdateQualificationModal}\r\n                handleCreateUpdateQualification={handleCreateUpdateQualification}\r\n                selectedQualificationData={selectedQualificationData}\r\n                allQualifications={allQualifications}\r\n            />\r\n            <QualificationTable\r\n                setSelectedQualificationData={setSelectedQualificationData}\r\n                toggleCreateUpdateQualificationModal={toggleCreateUpdateQualificationModal}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                allQualifications={allQualifications}\r\n                toggleQualificationDeleteModal={toggleQualificationDeleteModal}\r\n                allQualificationsByParentId={allQualificationsByParentId}\r\n            />\r\n\r\n            {isShowDeleteQualificationModal && (\r\n                <ApproveRejectModal\r\n                    onApproveReject={handleDeleteQualification}\r\n                    isShow={isShowDeleteQualificationModal}\r\n                    desc={t(\"alerts.deletePopup.desc\").replace('$1',\"Qualification\")}\r\n                    btnRightLoading={deleteQualificationPending}\r\n                    btnTextRight={t(\"btns.delete\")}\r\n                    btnTextLeft={t(\"btns.cancel\")}\r\n\r\n                />)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Qualification\r\n","import React from 'react'\r\nimport Lottieplayer from '../commanComponent/Lottieplayer'\r\nimport backup from '../../../src/images/Backup.json'\r\nimport { CustomButton } from '../globalComponents'\r\nimport PropTypes from 'prop-types'\r\nimport { useCustomTranslation } from '../../translation'\r\n\r\n/**\r\n * ApproveRejectModal component.\r\n * @param {string} [title=\"Are You Sure?\"] - Title of the modal (optional, defaults to \"Are You Sure?\")\r\n * @param {string} [desc] - Description text (optional).\r\n * @param {function} onApproveReject - Callback function for handling approve/reject actions (required).\r\n * @param {boolean} isShow - Boolean flag to show or hide the modal (required).\r\n * @param {boolean} [btnRightLoading=false] - Boolean flag to show loading state for the right button (optional).\r\n * @param {string} [btnTextLeft=\"Cancel\"] - Custom text for the left button (optional).\r\n * @param {string} [btnTextRight=\"Confirm\"] - Custom text for the right button (optional).\r\n * @returns {void}\r\n */\r\nconst ApproveRejectModal = (\r\n  {  \r\n    title ,               \r\n    desc = \"\",                           \r\n    onApproveReject,                      \r\n    isShow,                               \r\n    btnLeftLoading = false,               \r\n    btnRightLoading = false,              \r\n    btnTextLeft ,               \r\n    btnTextRight     \r\n}\r\n) => {\r\n    const {t} =useCustomTranslation()\r\n    return (\r\n        <>\r\n            <div className=\"modal fade attendanceViewodal\" id=\"sureMdl\" style={{ display: isShow ? \"unset !important\" : \"none !important\", opacity: isShow ? \"unset\" : \"0\" }}>\r\n                <div className=\"modal-dialog modal-dialog-centered\">\r\n                    <div className=\"modal-content rounded-1 border-0\">\r\n                        <div className=\"modal-body \">\r\n                            <div className=\"text-center suremodalCon\">\r\n                                <div className=\"d-flex justify-content-center\">\r\n                                    <Lottieplayer lottieUrl={backup} Lottiestyle={{ width: \"90px\", height: \"90px\" }} />\r\n                                </div>\r\n                                <h6 className=\"fw-semibold mb-2\">{title?title:t(\"alerts.deletePopup.title\")}</h6>\r\n                                <p className=\"mb-5 px-4 text-center\">{desc ? desc : \"\"}\r\n                                </p>\r\n                                <div className=\"d-flex justify-content-center gap-3\">\r\n                                    <CustomButton\r\n                                        classNames={\"btn btn-danger\"}\r\n                                        isLoading={btnLeftLoading}\r\n                                        text={btnTextLeft?btnTextLeft:t(\"btns.reject\") }\r\n                                        handleClick={() => onApproveReject(false)}\r\n                                    />\r\n                                    <CustomButton\r\n                                        classNames={\"btn btn-success\"}\r\n                                        isLoading={btnRightLoading}\r\n                                        text={btnTextRight?btnTextRight:t(\"btns.confirm\")}\r\n                                        handleClick={() => onApproveReject(true)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {isShow && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n// Add PropTypes validation\r\nApproveRejectModal.propTypes = {\r\n    title: PropTypes.string,                     \r\n    desc: PropTypes.string,                       \r\n    onApproveReject: PropTypes.func.isRequired,   \r\n    isShow: PropTypes.bool.isRequired,            \r\n    btnRightLoading: PropTypes.bool,                         \r\n    btnTextLeft: PropTypes.string,                \r\n    btnTextRight: PropTypes.string,   \r\n};\r\n\r\nexport default ApproveRejectModal\r\n"],"names":["props","addQualificationPending","updateQualificationPending","useSelector","state","qualification","t","useCustomTranslation","selectedQualificationData","openModel","handleOpenClose","handleCreateUpdateQualification","allQualifications","errors","setErrors","useState","createUpdateQualificationFormData","setCreateUpdateQualificationFormData","name","short_name","parent_id","handleFromChange","e","fieldName","_e$target","target","value","type","checked","prevState","updatedState","createShortName","prevErrors","undefined","useEffect","resetForm","parent","label","parent_name","_jsxs","className","tabIndex","style","visibility","width","id","children","_jsx","onClick","Label","text","required","Input","placeholder","onChange","CustomError","CustomSelect","data","handleChange","selectedOption","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","addUpdateQualificationSchema","isValid","params","submitCreateUpdateQualification","isLoading","setSelectedQualificationData","toggleCreateUpdateQualificationModal","toggleQualificationDeleteModal","currentPage","setCurrentPage","allQualificationsByParentId","qualificationList","setQualificationList","scopedSlots","useMemo","sn","_","index","is_active","item","getBadgeColor","created_at","moment","format","action","_id","_Fragment","CustomTable","fields","key","pagination","totalPages","tableName","Qualification","dispatch","useDispatch","addQualificationRes","addQualificationError","getAllQualificationPending","getAllQualificationRes","getAllQualificationError","getAllQualificationsByParentIdPending","getAllQualificationsByParentIdRes","getAllQualificationsByParentIdError","updateQualificationRes","updateQualificationError","deleteQualificationPending","deleteQualificationRes","deleteQualificationError","isOpenCreateUpdateQualification","setIsOpenCreateUpdateQualification","setAllQualifications","isShowDeleteQualificationModal","setIsShowDeleteQualificationModal","deleteQualificationId","setDeleteQualificationId","setAllQualificationsByParentId","qualificationActions","handleClearQualificationStore","code","getAllQualificationsByParentId","getAllQualifications","page","limit","getAllQualificationsByParentIdRequest","getAllQualificationRequest","_allQualificationsByP","length","pre","CreateUpdateQualification","updateQualificationRequest","addQualificationRequest","QualificationTable","ApproveRejectModal","onApproveReject","deleteQualificationRequest","isShow","desc","replace","btnRightLoading","btnTextRight","btnTextLeft","_ref","title","btnLeftLoading","display","opacity","Lottieplayer","lottieUrl","backup","Lottiestyle","height"],"sourceRoot":""}