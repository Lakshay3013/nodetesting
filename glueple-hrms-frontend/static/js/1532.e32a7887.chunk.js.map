{"version":3,"file":"static/js/1532.e32a7887.chunk.js","mappings":"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","sources":["components/admin/dropdownMaster/CreateUpdateDropdownData.js","components/admin/dropdownMaster/DropdownDataTable.js","components/admin/dropdownMaster/DropdownCategoryTable.js","components/admin/dropdownMaster/CreateUpdateDropdownCategory.js","components/admin/dropdownMaster/DropDownMaster.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { validateSchema } from '../../../utils/ValidationHelper'\r\nimport { addUpdateDropdownDataSchema } from '../../../utils/ValidationSchema'\r\nimport { createShortName } from '../../../utils/common'\r\nimport CustomSelect from '../../commanComponent/CustomSelect'\r\nimport { CustomButton, CustomError } from '../../globalComponents'\r\nimport { CustCheckbox, Input, Label } from '../../commanComponent'\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst CreateUpdateDropdownData = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const { addDropdownDataPending, updateDropdownDataPending } = useSelector(state => state?.dropdownMaster)\r\n    const {\r\n        selectedDropdownData,\r\n        openModel,\r\n        handleOpenClose,\r\n        handleCreateUpdateDropdownData,\r\n        allDropdownConstantData,\r\n        allDropdownCategoryListData\r\n    } = props\r\n\r\n    const [errors, setErrors] = useState({})\r\n    const [createUpdateDropdownDataFormData, setCreateUpdateDropdownDataFormData] = useState({\r\n        category: null,\r\n        category_key: '',\r\n        category_value: '',\r\n        category_short_name: '',\r\n        input_type: null,\r\n        is_active: true,\r\n    })\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e.target : { value: e };\r\n\r\n        setCreateUpdateDropdownDataFormData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n            if (name === 'category_key') {\r\n                updatedState.category_short_name = createShortName(value);\r\n            }\r\n            return updatedState;\r\n        });\r\n\r\n        // Reset error for this field\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitCreateUpdatePostion = async () => {\r\n        const validationResponse = await validateSchema(addUpdateDropdownDataSchema, createUpdateDropdownDataFormData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n                category,\r\n                category_key,\r\n                category_value,\r\n                category_short_name,\r\n                input_type,\r\n                is_active,\r\n            } = createUpdateDropdownDataFormData\r\n            const params = {\r\n                category_id: category?.value,\r\n                category_key,\r\n                category_value,\r\n                category_short_name,\r\n                input_type: input_type?.value || '',\r\n                is_active,\r\n            }\r\n            handleCreateUpdateDropdownData(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (selectedDropdownData) {\r\n            setCreateUpdateDropdownDataFormData({\r\n                category: { value: selectedDropdownData?.category_id, label: selectedDropdownData?.category_name },\r\n                category_key: selectedDropdownData?.category_key,\r\n                category_value: selectedDropdownData?.category_value,\r\n                category_short_name: selectedDropdownData?.category_short_name,\r\n                input_type: { value: selectedDropdownData?.input_type, label: selectedDropdownData?.input_type_name },\r\n                is_active: selectedDropdownData?.is_active,\r\n            })\r\n        }\r\n    }, [selectedDropdownData])\r\n\r\n    const resetForm = () => {\r\n        setCreateUpdateDropdownDataFormData({\r\n            category: null,\r\n            category_key: '',\r\n            category_value: '',\r\n            category_short_name: '',\r\n            input_type: null,\r\n            is_active: true,\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n                tabIndex={-1}\r\n                style={{\r\n                    visibility: openModel ? 'visible' : 'hidden',\r\n                    width: \"800px\"\r\n                }}\r\n                id=\"interviewDetail\"\r\n            >\r\n                <div className=\"offcanvas-header\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{selectedDropdownData ? t(\"headings.addDropdownData\") : t(\"headings.updateDropdownData\")}</h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                        onClick={() => handleOpenClose()}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"offcanvas-body myRequest \">\r\n                    <div className=\"formPanel\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.category\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustomSelect\r\n                                        data={allDropdownCategoryListData}\r\n                                        placeholder={t(\"placeholders.selectCategory\")}\r\n                                        value={createUpdateDropdownDataFormData?.category || ''}\r\n                                        handleChange={(selectedOption) => handleFromChange(selectedOption, \"category\")}\r\n                                        name=\"category\"\r\n                                    />\r\n                                    {errors?.category && (\r\n                                        <CustomError text={errors.category} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.categoryKey\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.categoryKey\")}\r\n                                        value={createUpdateDropdownDataFormData?.category_key}\r\n                                        name=\"category_key\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    />\r\n                                    {errors?.category_key && (\r\n                                        <CustomError text={errors.category_key} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.categoryShortName\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <input type=\"text\" className=\"form-control fs-7\"\r\n                                        name='category_short_name'\r\n                                        placeholder={t(\"placeholders.shortName\")}\r\n                                        value={createUpdateDropdownDataFormData?.category_short_name}\r\n                                        onChange={(e) => handleFromChange(e)}\r\n\r\n                                    />\r\n                                    {errors?.category_short_name && (\r\n                                        <CustomError text={errors.category_short_name} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.categoryValue\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.categoryValue\")}\r\n                                        value={createUpdateDropdownDataFormData?.category_value}\r\n                                        name=\"category_value\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    />\r\n                                    {errors?.category_value && (\r\n                                        <CustomError text={errors.category_value} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.inputType\")} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustomSelect\r\n                                        data={allDropdownConstantData?.dropdownInputType}\r\n                                        placeholder={t(\"placeholders.inputType\")}\r\n                                        value={createUpdateDropdownDataFormData?.input_type || ''}\r\n                                        handleChange={(selectedOption) => handleFromChange(selectedOption, \"input_type\")}\r\n                                        name=\"input_type\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.isActive\")} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustCheckbox\r\n                                        key={\"is_active\"}\r\n                                        id={`is_active`}\r\n                                        checked={createUpdateDropdownDataFormData?.is_active}\r\n                                        handleChange={(e) => handleFromChange(e)}\r\n                                        name={\"is_active\"}\r\n                                    />\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"offcanvas-footer\">\r\n                    <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                        <CustomButton\r\n                            text={selectedDropdownData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                            classNames={\"btn btn-org-gradient\"}\r\n                            handleClick={() => submitCreateUpdatePostion()}\r\n                            isLoading={selectedDropdownData ? updateDropdownDataPending : addDropdownDataPending}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {openModel && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateUpdateDropdownData\r\n","\r\nimport React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomTable } from '../../reuseableComponents'\r\nimport { getBadgeColor, isPermission } from '../../../utils/common'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment'\r\nimport { Icon } from '../../commanComponent'\r\nconst DropdownDataTable = (props) => {\r\n    const {\r\n        isLoading,\r\n        toggleCreateUpdateDropdownDataModal,\r\n        toggleDropdownDataDeleteModal,\r\n        currentPage,\r\n        setCurrentPage,\r\n        allDropdownDatas\r\n    } = props\r\n    const [dropdownDataList, setDropdownDataList] = useState('')\r\n    const updateDropdownPer = isPermission(\"update_dropdown\")\r\n    const deleteDropdownPer = isPermission(\"delete_dropdown\")\r\n\r\n\r\n    const handleUpdateDropdownData = (data) => {\r\n        toggleCreateUpdateDropdownDataModal(data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setDropdownDataList(allDropdownDatas)\r\n    }, [allDropdownDatas])\r\n\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n        action: item => (\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    {updateDropdownPer &&<li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleUpdateDropdownData(item)}\r\n                        >\r\n                            <Icon className={\"bi bi-pencil-square me-1\"} />Update</span>\r\n                    </li>}\r\n                    {deleteDropdownPer && <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => toggleDropdownDataDeleteModal(item._id)}\r\n                        >\r\n                            <Icon className={\"bi bi-trash me-1\"} />Delete</span>\r\n                    </li>}\r\n                </ul>\r\n            </div>\r\n            \r\n        )\r\n    }), [toggleCreateUpdateDropdownDataModal]);\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'category_name', label: 'Category Name' },\r\n        { key: 'category_key', label: 'Category Key' },\r\n        { key: 'category_short_name', label: 'Short Name' },\r\n        // { key: 'input_type', label: 'Input type' },\r\n        { key: 'created_at', label: 'Created At' },\r\n       ((deleteDropdownPer || updateDropdownPer)  &&{ key: 'action', label: 'Action' })\r\n    ];\r\n  return (\r\n    <>\r\n    <CustomTable\r\n        data={dropdownDataList?.data}\r\n        fields={fields}\r\n        isLoading={isLoading}\r\n        pagination={true}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n        totalPages={dropdownDataList?.totalPages}\r\n        // tableName={\"Dropdown Master\"}\r\n        // onSearch={handleSearch}\r\n        isHeader={false}\r\n        tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n        scopedSlots={scopedSlots}\r\n        // pageLimit={2}\r\n    />\r\n</>\r\n  )\r\n}\r\n\r\nexport default DropdownDataTable\r\n\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomTable } from '../../reuseableComponents'\r\nimport { getBadgeColor, isPermission } from '../../../utils/common'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment'\r\nimport { Icon } from '../../commanComponent'\r\nconst DropdownCategoryTable = (props) => {\r\n    const {\r\n        isLoading,\r\n        toggleCreateUpdateDropdownCategoryModal,\r\n        toggleDropdownCategoryDeleteModal,\r\n        currentPage,\r\n        setCurrentPage,\r\n        allDropdownCategory\r\n    } = props\r\n    const updateDropDownCategoryPer = isPermission(\"update_dropdown_category\")\r\n    const deleteDropDownCategoryPer = isPermission(\"delete_dropdown_category\")\r\n\r\n    const handleUpdateDropdownData = (data) => {\r\n        toggleCreateUpdateDropdownCategoryModal(data)\r\n    }\r\n\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n        action: item => (\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    {updateDropDownCategoryPer &&<li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleUpdateDropdownData(item)}\r\n                        >\r\n                            <Icon className={\"bi bi-pencil-square me-1\"} />Update</span>\r\n                    </li>}\r\n                     {deleteDropDownCategoryPer &&<li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => toggleDropdownCategoryDeleteModal(item._id)}\r\n                        >\r\n                            <Icon className={\"bi bi-trash me-1\"} />Delete</span>\r\n                    </li>}\r\n                </ul>\r\n            </div>\r\n            \r\n        )\r\n    }), [toggleCreateUpdateDropdownCategoryModal,]);\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'name', label: 'Name' },\r\n        { key: 'short_name', label: 'Short Name' },\r\n        { key: 'created_at', label: 'Created At' },\r\n      ((deleteDropDownCategoryPer ||updateDropDownCategoryPer)&&  { key: 'action', label: 'Action' })\r\n    ];\r\n  return (\r\n    <>\r\n    <CustomTable\r\n        data={allDropdownCategory?.data}\r\n        fields={fields}\r\n        isLoading={isLoading}\r\n        pagination={true}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n        totalPages={allDropdownCategory?.totalPages}\r\n        // tableName={\"Dropdown Master\"}\r\n        // onSearch={handleSearch}\r\n        isHeader={false}\r\n        tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n        scopedSlots={scopedSlots}\r\n        // pageLimit={2}\r\n    />\r\n</>\r\n  )\r\n}\r\n\r\nexport default DropdownCategoryTable","import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { validateSchema } from '../../../utils/ValidationHelper'\r\nimport { addUpdateCategoryDropdownSchema } from '../../../utils/ValidationSchema'\r\nimport { createShortName } from '../../../utils/common'\r\nimport { CustomButton, CustomError } from '../../globalComponents'\r\nimport { CustCheckbox, Input, Label } from '../../commanComponent'\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst CreateUpdateDropdownCategory = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const { addMasterDropdownCategoryPending, updateMasterDropdownCategoryPending } = useSelector(state => state?.dropdownMaster)\r\n    const {\r\n        selectedDropdownCategoryData,\r\n        openModel,\r\n        handleOpenClose,\r\n        handleCreateUpdateDropdownCategory,\r\n    } = props\r\n\r\n    const [errors, setErrors] = useState({})\r\n    const [createUpdateCategoryDropdownFormData, setCreateUpdateCategoryDropdownFormData] = useState({\r\n        name: '',\r\n        short_name: '',\r\n        is_active: true,\r\n    })\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e.target : { value: e };\r\n\r\n        setCreateUpdateCategoryDropdownFormData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n            if (name === 'name') {\r\n                updatedState.short_name = createShortName(value);\r\n            }\r\n            return updatedState;\r\n        });\r\n\r\n        // Reset error for this field\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitData = async () => {\r\n        const validationResponse = await validateSchema(addUpdateCategoryDropdownSchema, createUpdateCategoryDropdownFormData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n                name,\r\n                short_name,\r\n                is_active,\r\n            } = createUpdateCategoryDropdownFormData\r\n            const params = {\r\n                name,\r\n                short_name,\r\n                is_active,\r\n            }\r\n            handleCreateUpdateDropdownCategory(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (selectedDropdownCategoryData) {\r\n            setCreateUpdateCategoryDropdownFormData({\r\n                name: selectedDropdownCategoryData?.name,\r\n                short_name: selectedDropdownCategoryData?.short_name,\r\n                is_active: selectedDropdownCategoryData?.is_active,\r\n            })\r\n        }\r\n    }, [selectedDropdownCategoryData])\r\n\r\n    const resetForm = () => {\r\n        setCreateUpdateCategoryDropdownFormData({\r\n            name: '',\r\n            short_name: '',\r\n            is_active: true,\r\n        })\r\n    }\r\n    return (\r\n        <>\r\n            <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n                tabIndex={-1}\r\n                style={{\r\n                    visibility: openModel ? 'visible' : 'hidden',\r\n                    width: \"800px\"\r\n                }}\r\n                id=\"interviewDetail\"\r\n            >\r\n                <div className=\"offcanvas-header\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{selectedDropdownCategoryData ? t(\"headings.updateCategory\"):  t(\"headings.addCategory\") }</h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                        onClick={() => handleOpenClose()}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"offcanvas-body myRequest \">\r\n                    <div className=\"formPanel\">\r\n                        \r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.name\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.name\")}\r\n                                        value={createUpdateCategoryDropdownFormData?.name}\r\n                                        name=\"name\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    />\r\n                                    {errors?.name && (\r\n                                        <CustomError text={errors.name} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.shortName\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <input type=\"text\" className=\"form-control fs-7\"\r\n                                        name='short_name'\r\n                                        placeholder={t(\"placeholders.shortName\")}\r\n                                        value={createUpdateCategoryDropdownFormData?.short_name}\r\n                                        onChange={(e) => handleFromChange(e)}\r\n\r\n                                    />\r\n                                    {errors?.short_name && (\r\n                                        <CustomError text={errors.short_name} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        \r\n\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.isActive\")} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustCheckbox\r\n                                        key={\"is_active\"}\r\n                                        id={`is_active`}\r\n                                        checked={createUpdateCategoryDropdownFormData?.is_active}\r\n                                        handleChange={(e) => handleFromChange(e)}\r\n                                        name={\"is_active\"}\r\n                                    />\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"offcanvas-footer\">\r\n                    <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                        <CustomButton\r\n                            text={selectedDropdownCategoryData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                            classNames={\"btn btn-org-gradient\"}\r\n                            handleClick={() => submitData()}\r\n                            isLoading={selectedDropdownCategoryData ? updateMasterDropdownCategoryPending : addMasterDropdownCategoryPending}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {openModel && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateUpdateDropdownCategory\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { dropdownMasterActions } from '../../../core/resource/actions'\r\nimport { pagination } from '../../../utils/Constants.config'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport CreateUpdateDropdownData from './CreateUpdateDropdownData'\r\nimport DropdownDataTable from './DropdownDataTable'\r\nimport ApproveRejectModal from '../../modal/ApproveRejectModal'\r\nimport { useCustomTranslation } from '../../../translation'\r\nimport DropdownCategoryTable from './DropdownCategoryTable'\r\nimport { CustomTabs } from '../../reuseableComponents'\r\nimport { Icon } from '../../commanComponent'\r\nimport CreateUpdateDropdownCategory from './CreateUpdateDropdownCategory'\r\nconst DropDownMaster = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const dispatch = useDispatch()\r\n    const {\r\n\r\n        addDropdownDataPending,\r\n        addDropdownDataRes,\r\n        addDropdownDataError,\r\n\r\n        getAllDropdownDataPending,\r\n        getAllDropdownDataRes,\r\n        getAllDropdownDataError,\r\n\r\n        deleteDropdownDataPending,\r\n        deleteDropdownDataRes,\r\n        deleteDropdownDataError,\r\n\r\n        updateDropdownDataRes,\r\n        updateDropdownDataError,\r\n        updateDropdownDataPending,\r\n\r\n        getDropdownMasterConstantDataPending,\r\n        getDropdownMasterConstantDataRes,\r\n        getDropdownMasterConstantDataError,\r\n\r\n        addMasterDropdownCategoryPending,\r\n        addMasterDropdownCategoryRes,\r\n        addMasterDropdownCategoryError,\r\n\r\n        getMasterDropdownCategoryPending,\r\n        getMasterDropdownCategoryRes,\r\n        getMasterDropdownCategoryError,\r\n\r\n        getAllMasterDropdownCategoryPending,\r\n        getAllMasterDropdownCategoryRes,\r\n        getAllMasterDropdownCategoryError,\r\n\r\n        updateMasterDropdownCategoryPending,\r\n        updateMasterDropdownCategoryRes,\r\n        updateMasterDropdownCategoryError,\r\n\r\n        deleteMasterDropdownCategoryPending,\r\n        deleteMasterDropdownCategoryRes,\r\n        deleteMasterDropdownCategoryError,\r\n\r\n    } = useSelector(state => state.dropdownMaster)\r\n\r\n    const [isOpenCreateUpdateDropdownData, setIsOpenCreateUpdateDropdownData] = useState(false)\r\n    const [selectedDropdownData, setSelectedDropdownData] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [allDropdownDatas, setAllDropdownDatas] = useState([])\r\n    const [isShowDeleteDropdownDataModal, setIsShowDeleteDropdownDataModal] = useState(false)\r\n    const [deleteDropdownDataId, setDeleteDropdownDataId] = useState('')\r\n    const [allDropdownConstantData, setAllDropdownConstantData] = useState('')\r\n    const [selectedDropdownCategoryData, setSelectedDropdownCategoryData] = useState('')\r\n    const [isOpenDropdownCategoryModal, setIsOpenDropdownCategoryModal] = useState(false)\r\n    const [categoryCurrentPage, setCategoryCurrentPage] = useState(1)\r\n    const [deleteDropdownCategoryId, setDeleteDropdownCategoryId] = useState('')\r\n    const [allDropdownCategory, setAllDropdownCategory] = useState('')\r\n    const [isShowDeleteDropdownCategoryModal, setIsShowDeleteDropdownCategoryModal] = useState(false)   \r\n    const [allDropdownCategoryListData,setAllDropdownCategoryListData]=useState('')\r\n\r\n    /* Create Update Dropdown Data */\r\n    const toggleCreateUpdateDropdownDataModal = (data) => {\r\n        if (!data) {\r\n            setSelectedDropdownData('')\r\n        } else {\r\n            setSelectedDropdownData(data)\r\n        }\r\n        setIsOpenCreateUpdateDropdownData(!isOpenCreateUpdateDropdownData)\r\n    }\r\n\r\n    const handleCreateUpdateDropdownData = (params) => {\r\n        if (selectedDropdownData) {\r\n            params['_id'] = selectedDropdownData?._id\r\n            dispatch(dropdownMasterActions.updateDropdownDataRequest(params));\r\n        }\r\n        else {\r\n            dispatch(dropdownMasterActions.addDropdownDataRequest(params));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!addDropdownDataPending) {\r\n            if (addDropdownDataError) {\r\n                dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_ADD_DROPDOWN_DATA_STORE\"))\r\n                return;\r\n            }\r\n            if (addDropdownDataRes) {\r\n                if (addDropdownDataRes?.code === 200) {\r\n                    dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_ADD_DROPDOWN_DATA_STORE\"))\r\n                    getAllDropdownDatas()\r\n                    setIsOpenCreateUpdateDropdownData(!isOpenCreateUpdateDropdownData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        addDropdownDataRes,\r\n        addDropdownDataError,\r\n        addDropdownDataPending\r\n    ]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!updateDropdownDataPending) {\r\n            if (updateDropdownDataError) {\r\n                dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_UPDATE_DROPDOWN_DATA_STORE\"))\r\n                return;\r\n            }\r\n            if (updateDropdownDataRes) {\r\n                if (updateDropdownDataRes?.code === 200) {\r\n                    dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_UPDATE_DROPDOWN_DATA_STORE\"))\r\n                    getAllDropdownDatas()\r\n                    setIsOpenCreateUpdateDropdownData(!isOpenCreateUpdateDropdownData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updateDropdownDataRes,\r\n        updateDropdownDataError,\r\n        updateDropdownDataPending\r\n    ]);\r\n\r\n    /* Get All DropdownData */\r\n    useEffect(() => {\r\n        getAllDropdownDatas()\r\n    }, [currentPage])\r\n    const getAllDropdownDatas = () => {\r\n        const params = {\r\n            page: currentPage,\r\n            limit: pagination.limit,\r\n        }\r\n        dispatch(dropdownMasterActions.getAllDropdownDataRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllDropdownDataPending) {\r\n            if (getAllDropdownDataError) {\r\n                return;\r\n            }\r\n            if (getAllDropdownDataRes) {\r\n                if (getAllDropdownDataRes?.code === 200) {\r\n                    const getAllDropdownDataDatas = getAllDropdownDataRes?.data\r\n                    setAllDropdownDatas(getAllDropdownDataDatas)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllDropdownDataRes,\r\n        getAllDropdownDataError,\r\n        getAllDropdownDataPending\r\n    ]);\r\n\r\n    /* Delete DropdownData */\r\n    const toggleDropdownDataDeleteModal = (id) => {\r\n        if (id) {\r\n            setDeleteDropdownDataId(id)\r\n        }\r\n        setIsShowDeleteDropdownDataModal(!isShowDeleteDropdownDataModal)\r\n    }\r\n\r\n    const handleDeleteDropdownData = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deleteDropdownDataId\r\n            }\r\n            dispatch(dropdownMasterActions?.deleteDropdownDataRequest(params))\r\n        } else {\r\n            toggleDropdownDataDeleteModal()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!deleteDropdownDataPending) {\r\n            if (deleteDropdownDataError) {\r\n                dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_DELETE_DROPDOWN_DATA_STORE\"))\r\n                return;\r\n            }\r\n            if (deleteDropdownDataRes) {\r\n                if (deleteDropdownDataRes?.code === 200) {\r\n                    toggleDropdownDataDeleteModal()\r\n                    if (currentPage > 1 && allDropdownDatas?.data?.length === 1) {\r\n                        setCurrentPage((pre => pre -= 1))\r\n                    } else {\r\n                        getAllDropdownDatas()\r\n                    }\r\n                    dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_DELETE_DROPDOWN_DATA_STORE\"))\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        deleteDropdownDataRes,\r\n        deleteDropdownDataError,\r\n        deleteDropdownDataPending\r\n    ]);\r\n\r\n\r\n    /* Get Dropdown Master Constant Data */\r\n    useEffect(() => {\r\n        getDropdownMasterConstantData()\r\n        getAllMasterDropdownCategory()\r\n    }, [])\r\n    const getDropdownMasterConstantData = () => {\r\n        dispatch(dropdownMasterActions?.getDropdownMasterConstantDataRequest())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getDropdownMasterConstantDataPending) {\r\n            if (getDropdownMasterConstantDataError) {\r\n                return;\r\n            }\r\n            if (getDropdownMasterConstantDataRes) {\r\n                if (getDropdownMasterConstantDataRes?.code === 200) {\r\n                    const dropdownDataConstantData = getDropdownMasterConstantDataRes?.data\r\n                    setAllDropdownConstantData(dropdownDataConstantData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getDropdownMasterConstantDataRes,\r\n        getDropdownMasterConstantDataError,\r\n        getDropdownMasterConstantDataPending\r\n    ]);\r\n\r\n    const dropDownMasterRequest = [\r\n        { name: \"Dropdown Category\", id: \"dropdown_category\" },\r\n        { name: \"Dropdown Data\", id: \"dropdown\" },\r\n    ]\r\n\r\n\r\n\r\n    /* -----------------------Dropdown Category ---------------------------- */\r\n\r\n    const toggleCreateUpdateDropdownCategoryModal = (data) => {\r\n        if (!data) {\r\n            setSelectedDropdownCategoryData('')\r\n        } else {\r\n            setSelectedDropdownCategoryData(data)\r\n        }\r\n        setIsOpenDropdownCategoryModal(!isOpenDropdownCategoryModal)\r\n    }\r\n\r\n    /* Create Update Dropdown Category */\r\n\r\n    \r\n    const handleCreateUpdateDropdownCategory = (params) => {\r\n        if (selectedDropdownCategoryData) {\r\n            params['_id'] = selectedDropdownCategoryData?._id\r\n            dispatch(dropdownMasterActions.updateMasterDropdownCategoryRequest(params));\r\n        }\r\n        else {\r\n            dispatch(dropdownMasterActions.addMasterDropdownCategoryRequest(params));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!addMasterDropdownCategoryPending) {\r\n            if (addMasterDropdownCategoryError) {\r\n                dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_ADD_MASTER_DROPDOWN_CATEGORY_STORE\"))\r\n                return;\r\n            }\r\n            if (addMasterDropdownCategoryRes) {\r\n                if (addMasterDropdownCategoryRes?.code === 200) {\r\n                    dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_ADD_MASTER_DROPDOWN_CATEGORY_STORE\"))\r\n                    getMasterDropdownCategoryData()\r\n                    setIsOpenDropdownCategoryModal(!isOpenDropdownCategoryModal)\r\n                    getAllMasterDropdownCategory()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        addMasterDropdownCategoryRes,\r\n        addMasterDropdownCategoryError,\r\n        addMasterDropdownCategoryPending\r\n    ]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!updateMasterDropdownCategoryPending) {\r\n            if (updateMasterDropdownCategoryError) {\r\n                dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_UPDATE_MASTER_DROPDOWN_CATEGORY_STORE\"))\r\n                return;\r\n            }\r\n            if (updateMasterDropdownCategoryRes) {\r\n                if (updateMasterDropdownCategoryRes?.code === 200) {\r\n                    dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_UPDATE_MASTER_DROPDOWN_CATEGORY_STORE\"))\r\n                    getMasterDropdownCategoryData()\r\n                    setIsOpenDropdownCategoryModal(!isOpenDropdownCategoryModal)\r\n                    getAllMasterDropdownCategory()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updateMasterDropdownCategoryRes,\r\n        updateMasterDropdownCategoryError,\r\n        updateMasterDropdownCategoryPending\r\n    ]);\r\n\r\n    /* Delete Dropdown Category*/\r\n    const toggleDropdownCategoryDeleteModal = (id) => {\r\n        if (id) {\r\n            setDeleteDropdownCategoryId(id)\r\n        }\r\n        setIsShowDeleteDropdownCategoryModal(!isShowDeleteDropdownCategoryModal)\r\n    }\r\n\r\n    const handleDeleteDropdownCategory = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deleteDropdownCategoryId\r\n            }\r\n            dispatch(dropdownMasterActions?.deleteMasterDropdownCategoryRequest(params))\r\n        } else {\r\n            toggleDropdownCategoryDeleteModal()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!deleteMasterDropdownCategoryPending) {\r\n            if (deleteMasterDropdownCategoryError) {\r\n                dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_DELETE_MASTER_DROPDOWN_CATEGORY_STORE\"))\r\n                return;\r\n            }\r\n            if (deleteMasterDropdownCategoryRes) {\r\n                if (deleteMasterDropdownCategoryRes?.code === 200) {\r\n                    toggleDropdownCategoryDeleteModal()\r\n                    if (categoryCurrentPage > 1 && allDropdownCategory?.data?.length === 1) {\r\n                        setCategoryCurrentPage((pre => pre -= 1))\r\n                    } else {\r\n                        getMasterDropdownCategoryData()\r\n                    }\r\n                    dispatch(dropdownMasterActions.handleClearDropdownStore(\"HANDLE_CLEAR_DELETE_MASTER_DROPDOWN_CATEGORY_STORE\"))\r\n                    getAllMasterDropdownCategory()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        deleteMasterDropdownCategoryRes,\r\n        deleteMasterDropdownCategoryError,\r\n        deleteMasterDropdownCategoryPending\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        getMasterDropdownCategoryData()\r\n    }, [categoryCurrentPage])\r\n\r\n    const getMasterDropdownCategoryData = () => {\r\n        const params = {\r\n            page: categoryCurrentPage,\r\n            limit: pagination.limit,\r\n        }\r\n        dispatch(dropdownMasterActions.getMasterDropdownCategoryRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getMasterDropdownCategoryPending) {\r\n            if (getMasterDropdownCategoryError) {\r\n                return;\r\n            }\r\n            if (getMasterDropdownCategoryRes) {\r\n                if (getMasterDropdownCategoryRes?.code === 200) {\r\n                    setAllDropdownCategory(getMasterDropdownCategoryRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getMasterDropdownCategoryRes,\r\n        getMasterDropdownCategoryError,\r\n        getMasterDropdownCategoryPending\r\n    ]);\r\n\r\n    const getAllMasterDropdownCategory = () => {\r\n        dispatch(dropdownMasterActions.getAllMasterDropdownCategoryRequest());\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllMasterDropdownCategoryPending) {\r\n            if (getAllMasterDropdownCategoryError) {\r\n                return;\r\n            }\r\n            if (getAllMasterDropdownCategoryRes) {\r\n                if (getAllMasterDropdownCategoryRes?.code === 200) {\r\n                    setAllDropdownCategoryListData(getAllMasterDropdownCategoryRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllMasterDropdownCategoryRes,\r\n        getAllMasterDropdownCategoryError,\r\n        getAllMasterDropdownCategoryPending\r\n    ]);\r\n\r\n    return (\r\n        <>\r\n            <div className='cardBox myRequest mb-3 employeeHistory'>\r\n                <div className=\"d-flex align-items-center justify-content-between gap-3\">\r\n                    <div className=\"cardHead d-flex\">\r\n                        <img src=\"images/myrequest-icon.svg\" alt=\"\" width={35} />\r\n                        <h4 className=\"ms-2 \">Dropdown Master</h4>\r\n                    </div>\r\n                    <div className='d-flex gap-2'>\r\n                        <CustomButton\r\n                            classNames={\"btn btn-org-gradient\"}\r\n                            handleClick={() => toggleCreateUpdateDropdownCategoryModal()}\r\n                            icon={<Icon className=\"fa fa-plus\" />}\r\n                            text={t(\"btns.dropdownCategory\")}\r\n                            slug={\"create_dropdown_category\"}\r\n                        />\r\n                        <CustomButton\r\n                            classNames={\"btn btn-primary gradientBg\"}\r\n                            handleClick={() => toggleCreateUpdateDropdownDataModal()}\r\n                            icon={<Icon className=\"fa fa-plus\" />}\r\n                            text={t(\"btns.createDropdownData\")}\r\n                            slug={\"create_dropdown\"}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n\r\n                <CustomTabs tabs={dropDownMasterRequest} type=\"dropDownMasterRequest\" />\r\n                <div className=\"tab-content\">\r\n                    <div className=\"tab-pane fade active show\" id=\"dropdown_category\">\r\n                        <DropdownCategoryTable\r\n                            setSelectedDropdownCategoryData={setSelectedDropdownCategoryData}\r\n                            toggleCreateUpdateDropdownCategoryModal={toggleCreateUpdateDropdownCategoryModal}\r\n                            currentPage={categoryCurrentPage}\r\n                            setCurrentPage={setCategoryCurrentPage}\r\n                            allDropdownCategory={allDropdownCategory}\r\n                            toggleDropdownCategoryDeleteModal={toggleDropdownCategoryDeleteModal}\r\n                        // isLoading={}\r\n                        />\r\n\r\n                    </div>\r\n                    <div className=\"tab-pane fade show\" id=\"dropdown\">\r\n                        <DropdownDataTable\r\n                            setSelectedDropdownData={setSelectedDropdownData}\r\n                            toggleCreateUpdateDropdownDataModal={toggleCreateUpdateDropdownDataModal}\r\n                            currentPage={currentPage}\r\n                            setCurrentPage={setCurrentPage}\r\n                            allDropdownDatas={allDropdownDatas}\r\n                            toggleDropdownDataDeleteModal={toggleDropdownDataDeleteModal}\r\n                            isLoading={getAllDropdownDataPending}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            {isShowDeleteDropdownDataModal && (\r\n                <ApproveRejectModal\r\n                    onApproveReject={handleDeleteDropdownData}\r\n                    isShow={isShowDeleteDropdownDataModal}\r\n                    desc={t(\"alerts.deletePopup.desc\").replace('$1', \"Dropdown\")}\r\n                    btnRightLoading={deleteDropdownDataPending}\r\n                    btnTextRight={t(\"btns.delete\")}\r\n                    btnTextLeft={t(\"btns.cancel\")}\r\n                />)\r\n            }\r\n            {isShowDeleteDropdownCategoryModal && (\r\n                <ApproveRejectModal\r\n                    onApproveReject={handleDeleteDropdownCategory}\r\n                    isShow={isShowDeleteDropdownCategoryModal}\r\n                    desc={t(\"alerts.deletePopup.desc\").replace('$1', \"Dropdown\")}\r\n                    btnRightLoading={deleteMasterDropdownCategoryPending}\r\n                    btnTextRight={t(\"btns.delete\")}\r\n                    btnTextLeft={t(\"btns.cancel\")}\r\n                />)\r\n            }\r\n            {isOpenCreateUpdateDropdownData && <CreateUpdateDropdownData\r\n                openModel={isOpenCreateUpdateDropdownData}\r\n                handleOpenClose={toggleCreateUpdateDropdownDataModal}\r\n                handleCreateUpdateDropdownData={handleCreateUpdateDropdownData}\r\n                selectedDropdownData={selectedDropdownData}\r\n                allDropdownCategoryListData={allDropdownCategoryListData}\r\n                allDropdownConstantData={allDropdownConstantData}\r\n            />}\r\n            {isOpenDropdownCategoryModal && <CreateUpdateDropdownCategory\r\n                openModel={isOpenDropdownCategoryModal}\r\n                handleOpenClose={toggleCreateUpdateDropdownCategoryModal}\r\n                handleCreateUpdateDropdownCategory={handleCreateUpdateDropdownCategory}\r\n                selectedDropdownCategoryData={selectedDropdownCategoryData}\r\n            />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DropDownMaster\r\n"],"names":["props","t","useCustomTranslation","addDropdownDataPending","updateDropdownDataPending","useSelector","state","dropdownMaster","selectedDropdownData","openModel","handleOpenClose","handleCreateUpdateDropdownData","allDropdownConstantData","allDropdownCategoryListData","errors","setErrors","useState","createUpdateDropdownDataFormData","setCreateUpdateDropdownDataFormData","category","category_key","category_value","category_short_name","input_type","is_active","handleFromChange","e","fieldName","_e$target","name","target","value","type","checked","prevState","updatedState","createShortName","prevErrors","undefined","useEffect","resetForm","category_id","label","category_name","input_type_name","_jsxs","_Fragment","children","className","tabIndex","style","visibility","width","id","_jsx","onClick","Label","text","required","CustomSelect","data","placeholder","handleChange","selectedOption","CustomError","Input","onChange","dropdownInputType","CustCheckbox","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","addUpdateDropdownDataSchema","isValid","params","submitCreateUpdatePostion","isLoading","toggleCreateUpdateDropdownDataModal","toggleDropdownDataDeleteModal","currentPage","setCurrentPage","allDropdownDatas","dropdownDataList","setDropdownDataList","updateDropdownPer","isPermission","deleteDropdownPer","scopedSlots","useMemo","sn","_","index","item","getBadgeColor","created_at","moment","format","action","Icon","_id","fields","key","CustomTable","pagination","totalPages","isHeader","tableStyle","padding","boxShadow","toggleCreateUpdateDropdownCategoryModal","toggleDropdownCategoryDeleteModal","allDropdownCategory","updateDropDownCategoryPer","deleteDropDownCategoryPer","addMasterDropdownCategoryPending","updateMasterDropdownCategoryPending","selectedDropdownCategoryData","handleCreateUpdateDropdownCategory","createUpdateCategoryDropdownFormData","setCreateUpdateCategoryDropdownFormData","short_name","addUpdateCategoryDropdownSchema","submitData","dispatch","useDispatch","addDropdownDataRes","addDropdownDataError","getAllDropdownDataPending","getAllDropdownDataRes","getAllDropdownDataError","deleteDropdownDataPending","deleteDropdownDataRes","deleteDropdownDataError","updateDropdownDataRes","updateDropdownDataError","getDropdownMasterConstantDataPending","getDropdownMasterConstantDataRes","getDropdownMasterConstantDataError","addMasterDropdownCategoryRes","addMasterDropdownCategoryError","getMasterDropdownCategoryPending","getMasterDropdownCategoryRes","getMasterDropdownCategoryError","getAllMasterDropdownCategoryPending","getAllMasterDropdownCategoryRes","getAllMasterDropdownCategoryError","updateMasterDropdownCategoryRes","updateMasterDropdownCategoryError","deleteMasterDropdownCategoryPending","deleteMasterDropdownCategoryRes","deleteMasterDropdownCategoryError","isOpenCreateUpdateDropdownData","setIsOpenCreateUpdateDropdownData","setSelectedDropdownData","setAllDropdownDatas","isShowDeleteDropdownDataModal","setIsShowDeleteDropdownDataModal","deleteDropdownDataId","setDeleteDropdownDataId","setAllDropdownConstantData","setSelectedDropdownCategoryData","isOpenDropdownCategoryModal","setIsOpenDropdownCategoryModal","categoryCurrentPage","setCategoryCurrentPage","deleteDropdownCategoryId","setDeleteDropdownCategoryId","setAllDropdownCategory","isShowDeleteDropdownCategoryModal","setIsShowDeleteDropdownCategoryModal","setAllDropdownCategoryListData","dropdownMasterActions","handleClearDropdownStore","code","getAllDropdownDatas","page","limit","getAllDropdownDataRequest","getAllDropdownDataDatas","_allDropdownDatas$dat","length","pre","getDropdownMasterConstantData","getAllMasterDropdownCategory","getDropdownMasterConstantDataRequest","dropdownDataConstantData","getMasterDropdownCategoryData","_allDropdownCategory$","getMasterDropdownCategoryRequest","getAllMasterDropdownCategoryRequest","src","alt","icon","slug","CustomTabs","tabs","DropdownCategoryTable","DropdownDataTable","ApproveRejectModal","onApproveReject","deleteDropdownDataRequest","isShow","desc","replace","btnRightLoading","btnTextRight","btnTextLeft","deleteMasterDropdownCategoryRequest","CreateUpdateDropdownData","updateDropdownDataRequest","addDropdownDataRequest","CreateUpdateDropdownCategory","updateMasterDropdownCategoryRequest","addMasterDropdownCategoryRequest"],"sourceRoot":""}