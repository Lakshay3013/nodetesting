{"version":3,"file":"static/js/4005.007686fa.chunk.js","mappings":"4NAOA,MAgFA,EAhFuBA,IACnB,MAAMC,GAAWC,EAAAA,EAAAA,OACX,YAAEC,EAAW,eAAEC,EAAc,aAAEC,EAAY,UAAEC,GAAcN,EAC3DO,GAA+BC,EAAAA,EAAAA,IAAa,gCAC5CC,GAAyBD,EAAAA,EAAAA,IAAa,0BACtCE,EAAgB,CAClB,CAAEC,IAAK,KAAMC,MAAO,OACpB,CAAED,IAAK,SAAUC,MAAO,UACxB,CAAED,IAAK,OAAQC,MAAO,aACtB,CAAED,IAAK,gBAAiBC,MAAO,iBAC/B,CAAED,IAAK,iBAAkBC,MAAO,mBAC9BL,GAA+BE,IAA2B,CAAEE,IAAK,SAAUC,MAAO,WAElFC,EAAsBC,IACxBb,EAASc,EAAAA,GAAeC,qBAAqBF,GAAM,EAGjDG,GAAsBC,EAAAA,EAAAA,UAAQ,MAChCC,GAAIA,CAACC,EAAGC,KACJC,EAAAA,EAAAA,KAAA,QAAAC,SAAOF,EAAQ,IAEnBG,cAAeC,IACXH,EAAAA,EAAAA,KAAA,QACII,UAAW,UAASC,EAAAA,EAAAA,IAAcF,EAAKD,eAAe,MAAMD,SAE3DE,EAAKD,gBAIdI,eAAgBH,IACZH,EAAAA,EAAAA,KAAA,QACII,UAAW,UAASC,EAAAA,EAAAA,IAAcF,EAAKG,kBAAkBL,SAExDE,EAAKG,iBAIdC,OAAQJ,IACJK,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,sBAAqBH,SAAA,EAChCD,EAAAA,EAAAA,KAAA,UAAQS,KAAK,SAASL,UAAU,4BAC5B,iBAAe,WAAW,gBAAc,QAAOH,UAC/CD,EAAAA,EAAAA,KAAA,KAAGI,UAAU,iCAEjBI,EAAAA,EAAAA,MAAA,MAAIJ,UAAU,gBAAeH,SAAA,CACxBhB,IAAgCe,EAAAA,EAAAA,KAAA,MAAAC,UAC7BD,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CAACN,UAAU,gBAAgBO,GAAI,kBAChCC,QAASA,IAAMrB,EAAmBY,GAAMF,SAC3C,qBAGJd,IAA0Ba,EAAAA,EAAAA,KAAA,MAAAC,UACvBD,EAAAA,EAAAA,KAACU,EAAAA,GAAI,CAACN,UAAU,gBAAgBO,GAAI,sBAChCC,QAASA,IAAMrB,EAAmBY,GAAMF,SAC3C,0BAMjB,CAAClB,EAAcF,IACnB,OACImB,EAAAA,EAAAA,KAAAa,EAAAA,SAAA,CAAAZ,UACID,EAAAA,EAAAA,KAACc,EAAAA,GAAW,CACRtB,KAAkB,OAAZT,QAAY,IAAZA,OAAY,EAAZA,EAAcS,KACpBuB,OAAQ3B,EACRJ,UAAWA,EACXgC,YAAY,EACZnC,YAAaA,EACbC,eAAgBA,EAChBmC,WAAwB,OAAZlC,QAAY,IAAZA,OAAY,EAAZA,EAAckC,WAG1BC,UAAU,EACVC,WAAY,CAAEC,QAAS,MAAOC,UAAW,QACzCC,YAAa3B,KAElB,E,kEC1EX,MAmLA,EAnLyB4B,KACrB,MAAM5C,GAAWC,EAAAA,EAAAA,OAEX,kCACF4C,EAAiC,8BACjCC,EAA6B,gCAC7BC,IACAC,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,WACzB,qBACFC,EAAoB,uBACpBC,EAAsB,yBACtBC,IACAL,EAAAA,EAAAA,KAAYC,GAASA,EAAMK,cAEzB,sBACFC,EAAqB,kBACrBC,EAAiB,oBACjBC,IACAT,EAAAA,EAAAA,KAAYC,GAASA,EAAMS,YAExBxD,EAAaC,IAAkBwD,EAAAA,EAAAA,UAAS,IACxCC,EAAkBC,IAAuBF,EAAAA,EAAAA,UAAS,KAClDG,EAAiBC,IAAsBJ,EAAAA,EAAAA,UAAS,KAChDK,EAAgBC,IAAqBN,EAAAA,EAAAA,UAAS,KAC9CO,EAAgBC,IAAqBR,EAAAA,EAAAA,UAAS,KAC9CS,EAAYC,IAAiBV,EAAAA,EAAAA,UAAS,KAE7CW,EAAAA,EAAAA,YAAU,KACNC,EAAoBH,EAAW,GAChC,CAAClE,IAEJ,MAAMqE,EAAuBC,IACzB,MAAMC,EAAS,CACXC,KAAMxE,EACNyE,MAAOtC,EAAAA,GAAWsC,SACfH,GAEPxE,EAASc,EAAAA,GAAe8D,kCAAkCH,GAAQ,GAGtEH,EAAAA,EAAAA,YAAU,KACN,IAAKzB,EAAmC,CACpC,GAAIE,EACA,OAEJ,GAAID,GAC2C,MAAV,OAA7BA,QAA6B,IAA7BA,OAA6B,EAA7BA,EAA+B+B,MAAa,CAC5C,MAAMC,EAAoD,OAA7BhC,QAA6B,IAA7BA,OAA6B,EAA7BA,EAA+BjC,KAC5DgD,EAAoBiB,EACxB,CAER,IACD,CACChC,EACAC,EACAF,KAGJyB,EAAAA,EAAAA,YAAU,KACNS,IACAC,GAAgB,GACjB,IAEH,MAAMA,EAAiBA,KACnBhF,EAASiF,EAAAA,GAAgBC,wBAAwB,GAErDZ,EAAAA,EAAAA,YAAU,KACN,IAAKf,EAAuB,CACxB,GAAIE,EACA,OAEAD,GACgC,OAAX,OAAjBA,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmBqB,OAEnBd,EAAoC,OAAjBP,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmB3C,KAGlD,IACD,CACC2C,EACAC,EACAF,IAMJ,MAAMwB,EAAoBA,KAAO,IAADI,EACH,OAApBhC,QAAoB,IAApBA,GAA0B,QAANgC,EAApBhC,EAAsBtC,YAAI,IAAAsE,GAA1BA,EAA4BC,OAG7BnB,EAAsC,OAApBd,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBtC,MAFxCb,EAASqF,EAAAA,GAAiBC,2BAG9B,GAGJhB,EAAAA,EAAAA,YAAU,KACN,IAAKjB,EAA0B,CAC3B,GAAID,EACA,OAEJ,GAAID,GACmC,OAAX,OAApBA,QAAoB,IAApBA,OAAoB,EAApBA,EAAsB0B,MAAc,CACpC,MAAMU,EAAyC,OAApBpC,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBtC,KACjDoD,EAAkBsB,EACtB,CAER,IACD,CACCpC,EACAC,EACAC,IAGJ,MAAMmC,EAAkB,CACpB,CACIC,KAAM,oBACN9E,MAAO,uBACPmB,KAAM,SACN4D,MAAOxB,EAAeyB,kBACtB9E,KAAMiD,EACN8B,YAAa,sBACbC,SAAS,GAEb,CACIJ,KAAM,qBACN9E,MAAO,aACPmB,KAAM,SACNjB,KAAMmD,EACN0B,MAAOxB,EAAe4B,mBACtBF,YAAa,oBACbC,SAAS,IAyBjB,OACIhE,EAAAA,EAAAA,MAAAK,EAAAA,SAAA,CAAAZ,SAAA,EACID,EAAAA,EAAAA,KAAC0E,EAAAA,GAAa,CACVC,QAASR,EACTS,qBAvBiBA,CAACC,EAAGC,KAAe,IAADC,EAC3C,MAAMX,EAAOU,IAAqB,QAAZC,EAAIF,EAAEG,cAAM,IAAAD,OAAA,EAARA,EAAUX,OAC9B,MAAEC,EAAK,KAAE5D,EAAI,QAAEwE,GAAa,OAADJ,QAAC,IAADA,GAAAA,EAAGG,OAASH,EAAEG,OAAS,CAAEX,MAAOQ,GAEjE/B,GAAmBoC,IAAS,IACrBA,EACH,CAACd,GAAgB,aAAT3D,EAAsBwE,EAAUZ,KACzC,EAiBKc,qBAdkBC,KAC1B,MAAMC,EAAe,CAAC,EACJ,OAAdxC,QAAc,IAAdA,GAAAA,EAAgB4B,qBAAoBY,EAA6B,gBAAIC,EAAAA,EAAAA,IAA6B,OAAdzC,QAAc,IAAdA,OAAc,EAAdA,EAAgB4B,qBACtF,OAAd5B,QAAc,IAAdA,GAAAA,EAAgByB,oBAAmBe,EAA2B,cAAIC,EAAAA,EAAAA,IAA6B,OAAdzC,QAAc,IAAdA,OAAc,EAAdA,EAAgByB,oBACrGpB,EAAoBmC,GACpBrC,EAAcqC,EAAa,KAWvBrF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,eAAcH,UACzBO,EAAAA,EAAAA,MAAA,OAAKJ,UAAU,GAAEH,SAAA,EACbD,EAAAA,EAAAA,KAAA,OAAKI,UAAU,yDAAwDH,UACnED,EAAAA,EAAAA,KAAA,MAAII,UAAU,iBAAiBmF,MAAO,CAAEC,SAAU,QAASvF,SAAC,kBAEhED,EAAAA,EAAAA,KAACyF,EAAa,CACV1G,aAAcwD,EACdzD,eAAgBA,EAChBD,YAAaA,EACbG,UAAWwC,WAIxB,C","sources":["components/payrollAdmin/employee/EmployeeTable.js","components/payrollAdmin/employee/PayrollEmployees.js"],"sourcesContent":["import React, { useMemo } from 'react'\r\nimport { CustomTable } from '../../reuseableComponents';\r\nimport { getBadgeColor, isPermission } from '../../../utils/common';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { payrollActions } from '../../../core/resource/actions';\r\n\r\nconst EmployeeTable = (props) => {\r\n    const dispatch = useDispatch()\r\n    const { currentPage, setCurrentPage, allEmployees, isLoading } = props\r\n    const payrollEmployeesInvestmentPer =isPermission(\"payroll_employees_investment\")\r\n    const assignEmployeeSalaryPer =isPermission(\"assign_employee_salary\")\r\n    const employeeField = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'emp_id', label: 'Emp Id' },\r\n        { key: 'name', label: 'Full Name' },\r\n        { key: \"salary_status\", label: 'Salary Status' },\r\n        { key: 'account_status', label: 'Account Status' },\r\n        ((payrollEmployeesInvestmentPer||assignEmployeeSalaryPer )&&{ key: 'action', label: 'Action' })\r\n    ];\r\n    const setSelectedEmpData = (data) => {\r\n        dispatch(payrollActions.selectedEmployeeData(data))\r\n    }\r\n\r\n    const employeeScopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        salary_status: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.salary_status||'')}`}\r\n            >\r\n                {item.salary_status}\r\n            </span>\r\n        ),\r\n\r\n        account_status: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.account_status)}`}\r\n            >\r\n                {item.account_status}\r\n            </span>\r\n        ),\r\n\r\n        action: item => (\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    {payrollEmployeesInvestmentPer &&<li>\r\n                        <Link className=\"dropdown-item\" to={`employee-detail`}\r\n                            onClick={() => setSelectedEmpData(item)}\r\n                        >\r\n                            Add Investment</Link>\r\n                    </li>}\r\n                    {assignEmployeeSalaryPer &&<li>\r\n                        <Link className=\"dropdown-item\" to={`add-employee-salary`}\r\n                            onClick={() => setSelectedEmpData(item)}\r\n                        >\r\n                            Add Salary</Link>\r\n                    </li>}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }), [allEmployees, currentPage]);\r\n    return (\r\n        <>\r\n            <CustomTable\r\n                data={allEmployees?.data}\r\n                fields={employeeField}\r\n                isLoading={isLoading}\r\n                pagination={true}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                totalPages={allEmployees?.totalPages}\r\n                // tableName={\"\"}\r\n                // onSearch={handleSearch}\r\n                isHeader={false}\r\n                tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n                scopedSlots={employeeScopedSlots}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EmployeeTable","import React, { useEffect, useState } from 'react'\r\nimport EmployeeTable from './EmployeeTable'\r\nimport EmpInvestmentFilters from './EmpInvestmentFilters'\r\nimport { pagination } from '../../../utils/Constants.config'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { departmentAction, employeeActions, payrollActions } from '../../../core/resource/actions'\r\nimport { DynamicFilter } from '../../commanComponent'\r\nimport { multiSelectIDs } from '../../../utils/common'\r\n\r\nconst PayrollEmployees = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const {\r\n        getAllEmployeeAssignStatusPending,\r\n        getAllEmployeeAssignStatusRes,\r\n        getAllEmployeeAssignStatusError,\r\n    } = useSelector(state => state.payroll)\r\n    const {\r\n        getDepartmentListRes,\r\n        getDepartmentListError,\r\n        getDepartmentListPending\r\n    } = useSelector(state => state.department)\r\n\r\n    const {\r\n        getAllEmployeePending,\r\n        getAllEmployeeRes,\r\n        getAllEmployeeError,\r\n    } = useSelector(state => state.employee)\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [allEmployeesData, setAllEmployeesData] = useState('')\r\n    const [allEmployeeList, setAllEmployeeList] = useState('')\r\n    const [allDepartments, setAllDepartments] = useState('')\r\n    const [filterFormData, setFilterFormData] = useState('')\r\n    const [filterData, setFilterData] = useState('')\r\n\r\n    useEffect(() => {\r\n        getAllEmployeesList(filterData)\r\n    }, [currentPage])\r\n\r\n    const getAllEmployeesList = (payload) => {\r\n        const params = {\r\n            page: currentPage,\r\n            limit: pagination.limit,\r\n            ...payload\r\n        }\r\n        dispatch(payrollActions.getAllEmployeeAssignStatusRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllEmployeeAssignStatusPending) {\r\n            if (getAllEmployeeAssignStatusError) {\r\n                return;\r\n            }\r\n            if (getAllEmployeeAssignStatusRes) {\r\n                if (getAllEmployeeAssignStatusRes?.code == 200) {\r\n                    const employeeListResponse = getAllEmployeeAssignStatusRes?.data\r\n                    setAllEmployeesData(employeeListResponse)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllEmployeeAssignStatusRes,\r\n        getAllEmployeeAssignStatusError,\r\n        getAllEmployeeAssignStatusPending\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        getAllDepartments()\r\n        getAllEmployee()\r\n    }, [])\r\n    /* Get All Employee List*/\r\n    const getAllEmployee = () => {\r\n        dispatch(employeeActions.getAllEmployeeRequest())\r\n    }\r\n    useEffect(() => {\r\n        if (!getAllEmployeePending) {\r\n            if (getAllEmployeeError) {\r\n                return;\r\n            }\r\n            if (getAllEmployeeRes) {\r\n                if (getAllEmployeeRes?.code === 200) {\r\n\r\n                    setAllEmployeeList(getAllEmployeeRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllEmployeeRes,\r\n        getAllEmployeeError,\r\n        getAllEmployeePending\r\n    ]);\r\n\r\n\r\n\r\n    /* Get All Departments */\r\n    const getAllDepartments = () => {\r\n        if (!getDepartmentListRes?.data?.length) {\r\n            dispatch(departmentAction.getDepartmentListRequest());\r\n        } else {\r\n            setAllDepartments(getDepartmentListRes?.data)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getDepartmentListPending) {\r\n            if (getDepartmentListError) {\r\n                return;\r\n            }\r\n            if (getDepartmentListRes) {\r\n                if (getDepartmentListRes?.code === 200) {\r\n                    const departmentResponse = getDepartmentListRes?.data\r\n                    setAllDepartments(departmentResponse)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getDepartmentListRes,\r\n        getDepartmentListError,\r\n        getDepartmentListPending\r\n    ]);\r\n\r\n    const employeeFilters = [\r\n        {\r\n            name: 'selectedEmployees',\r\n            label: 'Select Employee / ID',\r\n            type: 'select',\r\n            value: filterFormData.selectedEmployees,\r\n            data: allEmployeeList,\r\n            placeholder: 'Enter Employee Name',\r\n            isMulti: true\r\n        },\r\n        {\r\n            name: 'selectedDepartment',\r\n            label: 'Department',\r\n            type: 'select',\r\n            data: allDepartments,\r\n            value: filterFormData.selectedDepartment,\r\n            placeholder: 'Select Department',\r\n            isMulti: true\r\n        },\r\n\r\n    ];\r\n\r\n\r\n    const handleFilterFormData = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e.target : { value: e };\r\n\r\n        setFilterFormData((prevState) => ({\r\n            ...prevState,\r\n            [name]: type === 'checkbox' ? checked : value,\r\n        }));\r\n    };\r\n\r\n    const handleFilterEmployees = () => {\r\n        const filterFields = {};\r\n        if (filterFormData?.selectedDepartment) filterFields[\"department_ids\"] = multiSelectIDs(filterFormData?.selectedDepartment)\r\n        if (filterFormData?.selectedEmployees) filterFields[\"employee_ids\"] = multiSelectIDs(filterFormData?.selectedEmployees)\r\n        getAllEmployeesList(filterFields)\r\n        setFilterData(filterFields)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <DynamicFilter\r\n                filters={employeeFilters}\r\n                handleFilterFormData={handleFilterFormData}\r\n                onSubmitHandleFilter={handleFilterEmployees}\r\n            />\r\n            <div className='cardBox mt-3'>\r\n                <div className=''>\r\n                    <div className=\"d-flex justify-content-between align-items-center mb-2\">\r\n                        <h3 className='underlineHead ' style={{ fontSize: \"18px\" }}> Employees</h3>\r\n                    </div>\r\n                    <EmployeeTable\r\n                        allEmployees={allEmployeesData}\r\n                        setCurrentPage={setCurrentPage}\r\n                        currentPage={currentPage}\r\n                        isLoading={getAllEmployeeAssignStatusPending}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PayrollEmployees\r\n\r\n"],"names":["props","dispatch","useDispatch","currentPage","setCurrentPage","allEmployees","isLoading","payrollEmployeesInvestmentPer","isPermission","assignEmployeeSalaryPer","employeeField","key","label","setSelectedEmpData","data","payrollActions","selectedEmployeeData","employeeScopedSlots","useMemo","sn","_","index","_jsx","children","salary_status","item","className","getBadgeColor","account_status","action","_jsxs","type","Link","to","onClick","_Fragment","CustomTable","fields","pagination","totalPages","isHeader","tableStyle","padding","boxShadow","scopedSlots","PayrollEmployees","getAllEmployeeAssignStatusPending","getAllEmployeeAssignStatusRes","getAllEmployeeAssignStatusError","useSelector","state","payroll","getDepartmentListRes","getDepartmentListError","getDepartmentListPending","department","getAllEmployeePending","getAllEmployeeRes","getAllEmployeeError","employee","useState","allEmployeesData","setAllEmployeesData","allEmployeeList","setAllEmployeeList","allDepartments","setAllDepartments","filterFormData","setFilterFormData","filterData","setFilterData","useEffect","getAllEmployeesList","payload","params","page","limit","getAllEmployeeAssignStatusRequest","code","employeeListResponse","getAllDepartments","getAllEmployee","employeeActions","getAllEmployeeRequest","_getDepartmentListRes","length","departmentAction","getDepartmentListRequest","departmentResponse","employeeFilters","name","value","selectedEmployees","placeholder","isMulti","selectedDepartment","DynamicFilter","filters","handleFilterFormData","e","fieldName","_e$target","target","checked","prevState","onSubmitHandleFilter","handleFilterEmployees","filterFields","multiSelectIDs","style","fontSize","EmployeeTable"],"sourceRoot":""}