{"version":3,"file":"static/js/3038.8f481877.chunk.js","mappings":"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","sources":["components/modal/admin/emailTemplate/CreateAndUpdateEmailTemplate.js","components/admin/EmailTemplate/EmailTemplate.js","components/admin/EmailTemplate/EmailActionData.js","view/EmailTemplate.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { CustomButton } from '../../../globalComponents';\r\nimport { emailTemplateAction } from '../../../../core/resource/actions';\r\nimport { toast } from 'react-toastify';\r\nimport { addEmailTemplatechema } from '../../../../utils/ValidationSchema';\r\nimport { validateSchema } from '../../../../utils/ValidationHelper';\r\nimport CustomError from '../../../globalComponents/CustomError';\r\n\r\nimport Customckediter from './Customckediter'\r\n\r\nconst CreateAndUpdateEmailTemplate = (props) => {\r\n\r\n    const { isOpenEmailType, toggleOffcanvas, getAllEmailTemplalte, setSelectedTemplateData, selectedTemplateData, onHandleViewModals } = props\r\n    const [errors, setErrors] = useState({});\r\n    const dispatch = useDispatch();\r\n    const { getEmailTypePending, getEmailTypeRes, getEmailTypeError, addEmailTemplatePending, addEmailTemplateRes, addEmailTemplateError } = useSelector(state => state.emailtemplate);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [emailType, setEmailType] = useState([])\r\n    const [editorData, setEditorData] = useState('')\r\n    const [templateId, setTemplateId] = useState('')\r\n    const [dropdownValue, setDropdownValue] = useState('');\r\n    const [bodydata, setBodydata] = useState('')\r\n    const [subemailType, setSubEmailType] = useState([])\r\n    const [field, setfield] = useState([])\r\n\r\n    const [addEmailTemplate, setAddEmailTemplate] = useState({\r\n        template_name: '',\r\n        email_title: '',\r\n        email_type: '',\r\n        body: '',\r\n        is_active: '',\r\n        remark: ''\r\n    })\r\n\r\n    useEffect(() => {\r\n        setAddEmailTemplate({\r\n            template_name: selectedTemplateData?.template_name || '',\r\n            email_title: selectedTemplateData?.email_title || '',\r\n            email_type: selectedTemplateData.email_type || '',\r\n            body: selectedTemplateData?.body,\r\n            remark: selectedTemplateData?.remark\r\n        })\r\n        setIsActive(selectedTemplateData?.is_active)\r\n        setTemplateId(selectedTemplateData?.id)\r\n        handleAutoFill(selectedTemplateData?.body)\r\n        // setEditorData(selectedTemplateData?.body)\r\n    }, [selectedTemplateData])\r\n\r\n    useEffect(() => {\r\n        setAddEmailTemplate({\r\n            template_name: onHandleViewModals?.template_name || '',\r\n            email_title: onHandleViewModals?.email_title || '',\r\n            email_type: onHandleViewModals?.email_type,\r\n            body: onHandleViewModals?.body,\r\n            remark: onHandleViewModals?.remark\r\n        })\r\n        setIsActive(onHandleViewModals?.is_active)\r\n        handleAutoFill(onHandleViewModals?.body)\r\n    }, [onHandleViewModals])\r\n\r\n    useEffect(() => {\r\n        getEmailType()\r\n    }, [])\r\n\r\n    const getEmailType = () => {\r\n        dispatch(emailTemplateAction.getEmailTypeRequest());\r\n    }\r\n\r\n    const newFunction = (data) => {\r\n        setDropdownValue(data?.value)\r\n        field.push(data)\r\n\r\n    }\r\n    useEffect(() => {\r\n        if (!getEmailTypePending) {\r\n            if (getEmailTypeError) {\r\n                setEmailType([])\r\n                return;\r\n            }\r\n            if (getEmailTypeRes) {\r\n                if (getEmailTypeRes?.data?.code == 200) {\r\n                    setEmailType(getEmailTypeRes?.data?.data?.data?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getEmailTypePending,\r\n        getEmailTypeRes,\r\n        getEmailTypeError\r\n    ]);\r\n\r\n    const handleAutoFill = (data) => {\r\n        setBodydata(data)\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!addEmailTemplatePending) {\r\n            if (addEmailTemplateError) {\r\n                toast.error(addEmailTemplateError?.errorMessage)\r\n                return;\r\n            }\r\n            if (addEmailTemplateRes) {\r\n                if (addEmailTemplateRes?.data?.code === 200) {\r\n                    toast.success(addEmailTemplateRes?.data?.msg)\r\n                    toggleOffcanvas()\r\n                    getAllEmailTemplalte()\r\n                    dispatch(emailTemplateAction.handleClearEmailTemplateStore(\"HANDLE_CLEAR_ADD_EMAIL_TEMPLATE_STORE\"))\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        addEmailTemplateRes,\r\n        addEmailTemplateError,\r\n        addEmailTemplatePending\r\n    ]);\r\n\r\n    const handleChange = (event) => {\r\n        errors && setErrors({});\r\n        if (event.target.name == 'email_type') {\r\n            console.log(\"sdfdsfdsf\", event.target.value)\r\n            setSubEmailType(dropdownOptions?.filter(data => data.task == event.target.value)[0]?.subtasks)\r\n        }\r\n        const { name, value } = event.target\r\n        setAddEmailTemplate({ ...addEmailTemplate, [name]: value })\r\n    }\r\n\r\n    const createEmailTemplate = async () => {\r\n        addEmailTemplate.body = editorData\r\n        addEmailTemplate.is_active = isActive\r\n        addEmailTemplate.field = field\r\n        const validationResponse = await validateSchema(addEmailTemplatechema, addEmailTemplate);\r\n        if (validationResponse.isValid) {\r\n            setErrors({});\r\n            // addEmailTemplate.body = editorData\r\n            // addEmailTemplate.is_active = isActive\r\n            if (selectedTemplateData) {\r\n                addEmailTemplate['_id'] = templateId\r\n                dispatch(emailTemplateAction.updateEmailTemplateRequest(addEmailTemplate));\r\n                getAllEmailTemplalte()\r\n                toggleOffcanvas()\r\n            } else {\r\n                dispatch(emailTemplateAction.addEmailTemplateRequest(addEmailTemplate));\r\n                getAllEmailTemplalte()\r\n            }\r\n\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n            console.log(validationResponse.errors, \"formattedErrors\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isOpenEmailType == false) {\r\n            resetTempateData()\r\n        }\r\n    }, [isOpenEmailType])\r\n\r\n\r\n    const resetTempateData = () => {\r\n        setAddEmailTemplate({\r\n            template_name: '',\r\n            email_title: '',\r\n            email_type: '',\r\n            body: '',\r\n            is_active: ''\r\n        })\r\n        setSelectedTemplateData('')\r\n        setErrors({});\r\n        setEditorData('')\r\n    }\r\n    const dropdownOptions = [\r\n        {\r\n            id: 1,\r\n            task: 'MRF',\r\n            subtasks: [\r\n                { value: '{employee_name}', label: 'Employee Name' },\r\n                { value: '{applying_for}', label: 'Applying for' },\r\n                { value: '{approval_by}', label: 'Approval by' },\r\n                { value: '{mrf_id}', label: 'Mrf id' },\r\n                { value: '{name}', label: 'Name' },\r\n                { value: '{current_date_time}', label: 'Current date time' },\r\n                { value: '{designation}', label: 'Designation' }\r\n            ]\r\n        },\r\n        {\r\n            id: 2,\r\n            task: 'C-off',\r\n            subtasks: [\r\n                { value: '{Name}', label: 'Name' },\r\n                { value: '{emp_name}', label: 'Emp Name' },\r\n                { value: '{date}', label: 'Date' },\r\n                { value: '{no_of_days}', label: 'No of days' },\r\n                { value: '{reason}', label: 'Reason' }\r\n            ]\r\n        },\r\n        {\r\n            id: 3,\r\n            task: 'attendance_correction',\r\n            subtasks: [\r\n                { value: '{manager_full_name}', label: 'manager_full_name' },\r\n                { value: '{emp_name}', label: 'emp_name' },\r\n                { value: '{date}', label: 'date' },\r\n                { value: '{first_check_in}', label: 'first_check_in' },\r\n                { value: '{first_check_out}', label: 'first_check_out' },\r\n                { value: '{corrected_check_in_time}', label: 'corrected_check_in_time' },\r\n                { value: '{corrected_check_out_time}', label: 'corrected_check_out_time' },\r\n\r\n            ]\r\n        },\r\n\r\n        // Add more options as needed\r\n    ];\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={`offcanvas offcanvas-end creatNewTicketOff ${isOpenEmailType ? 'show' : ''}`}\r\n\r\n                tabIndex={-1}\r\n                style={{\r\n                    visibility: isOpenEmailType ? 'visible' : 'hidden',\r\n                    width: \"1025px\"\r\n                }}\r\n            >\r\n                <div className=\"offcanvas-header\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{onHandleViewModals ? \"View\" : selectedTemplateData ? \"Update\" : \"Create New\"} Email Template</h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                        onClick={() => toggleOffcanvas('view')}\r\n                    />\r\n                </div>\r\n                <div className=\"offcanvas-body\">\r\n                    <div className=\"formPanel\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <label htmlFor>Template Name<span className='text-danger'>{onHandleViewModals == '' && '*'}</span></label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    {onHandleViewModals != '' ?\r\n                                        <div>\r\n                                            {addEmailTemplate?.template_name}\r\n                                        </div> :\r\n\r\n                                        <input type=\"text\" className=\"form-control fs-7\"\r\n                                            placeholder=\"Enter Template Name\"\r\n                                            name='template_name'\r\n                                            value={addEmailTemplate?.template_name || ''}\r\n                                            onChange={(e) => handleChange(e)}\r\n                                            disabled={onHandleViewModals != '' ? true : false}\r\n                                        />}\r\n\r\n                                    {errors?.template_name && (\r\n                                        <CustomError text={errors.template_name} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <label htmlFor>Subject<span className='text-danger'>{onHandleViewModals == '' && '*'}</span></label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    {onHandleViewModals != '' ?\r\n                                        <div>\r\n                                            {addEmailTemplate?.email_title}\r\n                                        </div> :\r\n\r\n                                        <input type=\"text\" className=\"form-control fs-7\"\r\n                                            name='email_title'\r\n                                            placeholder=\"Enter Title\"\r\n                                            value={addEmailTemplate?.email_title}\r\n                                            onChange={(e) => handleChange(e)}\r\n                                            disabled={onHandleViewModals != '' ? true : false}\r\n                                        />}\r\n\r\n                                    {errors?.email_title && (\r\n                                        <CustomError text={errors.email_title} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <label htmlFor>Email For<span className='text-danger'>{onHandleViewModals == '' && '*'}</span></label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    {onHandleViewModals != '' ?\r\n                                        <div>\r\n                                            {addEmailTemplate?.email_type}\r\n                                        </div> :\r\n\r\n                                        <select className=\"form-select\" required\r\n                                            name='email_type'\r\n                                            value={addEmailTemplate?.email_type}\r\n                                            onChange={(e) => handleChange(e)}\r\n                                            disabled={onHandleViewModals != '' ? true : false}\r\n                                        >\r\n                                            <option value='' hidden selected>Select Required Email Type</option>\r\n                                            {emailType && emailType?.map(data => (\r\n                                                <option value={data?.name}>{data?.name}</option>\r\n                                            ))}\r\n                                        </select>}\r\n\r\n                                    {errors?.email_type && (\r\n                                        <CustomError text={errors.email_type} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {/* <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <label htmlFor>Email Sub Type<span className='text-danger'>*</span></label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <select className=\"form-select\" value={dropdownValue} onChange={newFunction}\r\n                                        disabled={onHandleViewModals != '' ? true : false}>\r\n                                      <option value='' hidden selected>Select Required Email Type</option>\r\n                                        {subemailType?.map(option => (\r\n                                            <option key={option.value} value={option.value}>\r\n                                                {option.label}\r\n                                            </option>\r\n                                        ))}\r\n                                    </select>\r\n                                    {errors?.email_type && (\r\n                                        <CustomError text={errors.email_type} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div> */}\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <label htmlFor>Body</label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    {onHandleViewModals != '' ?\r\n                                        <div className=\"cardBox mb-3 mt-3 pt-3 myRequest\">\r\n                                            <div>\r\n                                                <div dangerouslySetInnerHTML={{ __html: addEmailTemplate?.body?.replaceAll('&lt;', '<') }} />\r\n                                            </div>\r\n                                        </div> :\r\n\r\n                                        <Customckediter\r\n                                            editorData={editorData}\r\n                                            setEditorData={setEditorData}\r\n                                            dropdownValue={dropdownValue}\r\n                                            setDropdownValue={setDropdownValue}\r\n                                            bodydata={bodydata}\r\n                                        />}\r\n\r\n                                </div>\r\n                                {errors?.body && (\r\n                                    <CustomError text={errors.body} />\r\n                                )}\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n                        {onHandleViewModals == '' &&\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-3\">\r\n                                    <div className=\"form-group mb-3\">\r\n                                        <label htmlFor>Template fields</label>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-9\">\r\n                                    {subemailType?.map(data => (\r\n                                        <span style={{ cursor: 'pointer' }} className=\"badge blueBadge2 me-2\" onClick={() => newFunction(data)}>{data.label}</span>\r\n                                    ))}\r\n                                    {errors?.is_active && (\r\n                                        <CustomError text={errors.is_active} />\r\n                                    )}\r\n                                </div>\r\n\r\n                            </div>}\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <label htmlFor>Re-Mark<span className='text-danger'></span></label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    {onHandleViewModals != '' ?\r\n                                        <div>\r\n                                            {addEmailTemplate?.remark}\r\n                                        </div> :\r\n\r\n                                        <input type=\"text\" className=\"form-control fs-7\"\r\n                                            placeholder=\"Enter ReMark Name\"\r\n                                            name='remark'\r\n                                            value={addEmailTemplate?.remark || ''}\r\n                                            onChange={(e) => handleChange(e)}\r\n                                            disabled={onHandleViewModals != '' ? true : false}\r\n                                        />}\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <label htmlFor>Is Active</label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <input type=\"checkbox\" placeholder=\"Is Active\"\r\n                                        checked={isActive}\r\n                                        onChange={(e) => setIsActive(!isActive)}\r\n                                        disabled={onHandleViewModals != '' ? true : false}\r\n                                    />\r\n                                </div>\r\n                                {errors?.is_active && (\r\n                                    <CustomError text={errors.is_active} />\r\n                                )}\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"d-flex align-items-center justify-content-end gap-2\">\r\n                            {onHandleViewModals == '' &&\r\n                                <CustomButton\r\n                                    type=\"button\"\r\n                                    classNames={\"btn btn-primary gradientBg\"}\r\n                                    handleClick={e => createEmailTemplate()}\r\n                                    // isLoading={departmentData?updateDepartmentPending:addDepartmentPending}\r\n                                    text={`${selectedTemplateData ? \"Update\" : \"Create\"} Template`}\r\n                                />}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateAndUpdateEmailTemplate\r\n","import React, { useEffect, useState,useMemo } from 'react'\r\nimport Button from '../../commanComponent/Button'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport ApproveRejectModal from '../../modal/ApproveRejectModal'\r\nimport moment from 'moment-timezone'\r\nimport { toast } from 'react-toastify'\r\nimport { CustomSpinner } from '../../globalComponents'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getBadgeColor } from '../../../utils/common'\r\nimport CreateAndUpdateEmailTemplate from '../../modal/admin/emailTemplate/CreateAndUpdateEmailTemplate'\r\nimport { emailTemplateAction, notificationActions } from '../../../core/resource/actions';\r\nimport CustomTable from '../../reuseableComponents/customTable/CustomTable'\r\n\r\nconst EmailTemplatedata = (props) => {\r\n    const { TemplateList,isLoading,toggleOffcanvas,currentPage,setCurrentPage,setSelectedTemplateData,onHandleDeleteModal,onHandleViewModal} = props\r\n\r\n    const [templateList, settemplate] = useState(TemplateList)\r\n    const dispatch = useDispatch();\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [viewEmailTemplate, setViewEmailTemplate] = useState([])\r\n\r\n    useEffect(() => {\r\n      settemplate(TemplateList)\r\n    }, [TemplateList])\r\n\r\n      const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'template_name', label: 'Template Name' },\r\n        { key: 'email_title', label: 'Subject' },\r\n        { key: 'email_type', label: 'Email For' },\r\n        { key: 'is_active', label: 'Status' },\r\n        { key: 'created_at', label: 'Created At' },\r\n        { key: 'action', label :'Action' }\r\n      ];\r\n\r\n      const updateEmailTemplate = (data) => {\r\n        setSelectedTemplateData(data)\r\n        toggleOffcanvas()\r\n      }\r\n\r\n      const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (         \r\n           <span>{index+1}</span> \r\n        ),\r\n        is_active: item => (        \r\n          <span\r\n            className={`badge ${getBadgeColor(item.is_active? \"Active\":\"Inactive\")}`}\r\n            // style={{ color: '#fff', padding: x'0.5rem' }}\r\n          >\r\n            {item.is_active? \"Active\":\"Inactive\"}\r\n          </span>\r\n        ),\r\n        created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n        action: item => (\r\n          <div className=\"actionGroup d-flex gap-2\">\r\n            <CustomButton\r\n              text=\"View\"\r\n              handleClick={() => onHandleViewModal(item)}\r\n              classNames=\"btn btn-success\"\r\n            />\r\n            <CustomButton\r\n              text=\"Update\"\r\n              classNames=\"btn btn-primary\"\r\n              handleClick={() => {\r\n                updateEmailTemplate(item);\r\n              }}\r\n            />\r\n            <CustomButton\r\n              text=\"Delete\"\r\n              handleClick={() => onHandleDeleteModal(item?.id)}\r\n              classNames=\"btn btn-danger\"\r\n            />\r\n          </div>\r\n        )\r\n      }), [setSelectedTemplateData, toggleOffcanvas, onHandleDeleteModal,onHandleViewModal]);\r\n  \r\n  return (\r\n    <>\r\n    <CustomTable\r\n        data={templateList?.data}\r\n        fields={fields}\r\n        isLoading={isLoading}\r\n        pagination={true}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n        totalPages={templateList?.totalPages}\r\n        tableName={\"Email Template\"}\r\n        // onSearch={handleSearch}\r\n        scopedSlots={scopedSlots}\r\n        />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EmailTemplatedata\r\n","import React, { useEffect, useState,useMemo } from 'react'\r\nimport Button from '../../commanComponent/Button'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport ApproveRejectModal from '../../modal/ApproveRejectModal'\r\nimport moment from 'moment-timezone'\r\nimport { toast } from 'react-toastify'\r\nimport { CustomSpinner } from '../../globalComponents'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getBadgeColor } from '../../../utils/common'\r\nimport CreateAndUpdateEmailTemplate from '../../modal/admin/emailTemplate/CreateAndUpdateEmailTemplate'\r\nimport { emailTemplateAction, notificationActions } from '../../../core/resource/actions';\r\nimport CustomTable from '../../reuseableComponents/customTable/CustomTable'\r\n\r\nconst EmailTemplatedata = (props) => {\r\n    const { ActionList,isLoading,toggleOpenAction,currentPage,setCurrentPage,setSelectedActionData,onHandleDeleteAction,onHandleViewModal} = props\r\n\r\n    const [actionList, setAction] = useState(ActionList)\r\n    const dispatch = useDispatch();\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [viewEmailTemplate, setViewEmailTemplate] = useState([])\r\n\r\n    useEffect(() => {\r\n      setAction(ActionList)\r\n    }, [ActionList])\r\n\r\n      const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'action_name', label: 'Action Name' },\r\n        { key: 'action_type', label: 'Action Type' },\r\n        { key: 'action_type', label: 'Action Type' },\r\n        { key: 'is_active', label: 'Status' },\r\n        { key: 'created_at', label: 'Created At' },\r\n        { key: 'action', label :'Action' }\r\n      ];\r\n\r\n      const updateAtion = (data) => {\r\n        setSelectedActionData(data)\r\n        toggleOpenAction()\r\n      }\r\n\r\n      const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (         \r\n           <span>{index+1}</span> \r\n        ),\r\n        is_active: item => (        \r\n          <span\r\n            className={`badge ${getBadgeColor(item.is_active? \"Active\":\"Inactive\")}`}\r\n            // style={{ color: '#fff', padding: x'0.5rem' }}\r\n          >\r\n            {item.is_active? \"Active\":\"Inactive\"}\r\n          </span>\r\n        ),\r\n        created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n        action: item => (\r\n          <div className=\"actionGroup d-flex gap-2\">\r\n            {/* <CustomButton\r\n              text=\"View\"\r\n              handleClick={() => onHandleViewModal(item)}\r\n              classNames=\"btn btn-success\"\r\n            /> */}\r\n            <CustomButton\r\n              text=\"Update\"\r\n              classNames=\"btn btn-primary\"\r\n              handleClick={() => {\r\n                updateAtion(item);\r\n              }}\r\n            />\r\n            <CustomButton\r\n              text=\"Delete\"\r\n              handleClick={() => onHandleDeleteAction(item?.id)}\r\n              classNames=\"btn btn-danger\"\r\n            />\r\n          </div>\r\n        )\r\n      }), [setSelectedActionData, toggleOpenAction, onHandleDeleteAction,onHandleViewModal]);\r\n  \r\n  return (\r\n    <>\r\n    <CustomTable\r\n        data={actionList}\r\n        fields={fields}\r\n        isLoading={isLoading}\r\n        pagination={true}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n        totalPages={actionList?.totalPages}\r\n        tableName={\"Action\"}\r\n        // onSearch={handleSearch}\r\n        scopedSlots={scopedSlots}\r\n        />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EmailTemplatedata\r\n","import React, { useEffect, useState, useMemo } from 'react'\r\nimport { AddDesignations, DesignationTable } from '../components/admin/designation'\r\nimport Button from '../components/commanComponent/Button'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { emailTemplateAction } from '../core/resource/actions'\r\nimport { toast } from 'react-toastify'\r\nimport { EmailTemplatedata,EmailActionData } from '../components/admin/EmailTemplate'\r\nimport CreateEmailType from '../components/modal/admin/emailTemplate/CreateEmailType'\r\nimport CreateAndUpdateEmailTemplate from '../components/modal/admin/emailTemplate/CreateAndUpdateEmailTemplate'\r\nimport { pagination } from '../utils/Constants.config'\r\nimport ApproveRejectModal from '../components/modal/ApproveRejectModal'\r\nimport TableTabs from '../components/TableTabs'\r\nimport AddActionEmailTemplate from '../components/modal/admin/emailTemplate/AddActionEmailTemplate'\r\n\r\n\r\nconst EmailTemplate = () => {\r\n  const dispatch = useDispatch()\r\n  const [isOpenEmailType, setIsOpenEmailType] = useState(false);\r\n  const {getActionTemplatePending,\r\n    getActionTemplateRes,\r\n    getActionTemplateError, getEmailTemplatePending, getEmailTemplateRes, getEmailTemplateError, deleteEmailTemplatePending, deleteEmailTemplateRes, deleteEmailTemplateError,\r\n    DeleteActionTemplatePending,\r\n    DeleteActionTemplateRes,\r\n    DeleteActionTemplateError } = useSelector(state => state.emailtemplate);\r\n  const [getemailTemplate, setGetEmailTemplate] = useState([])\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [selectedTemplateData, setSelectedTemplateData] = useState('')\r\n  const [selectedActionData, setSelectedActionData] = useState('')\r\n  const [deleteDepId, setDeleteDepId] = useState()\r\n  const [isShowDeleteModal, setIsShowDelelteModal] = useState(false)\r\n  const [onHandleViewModals, setonHandleViewModal] = useState('')\r\n  const [openAction, setOpenAction] = useState(false)\r\n  const [AllGetAction, setAllGetAction] = useState([])\r\n  const [actionDelete,setActionDelete] = useState()\r\n  const [isActionDelete,setIsActionDelete] = useState(false)\r\n\r\n  const onHandleViewModal = (data) => {\r\n    setonHandleViewModal(data)\r\n    toggleOffcanvas()\r\n  }\r\n\r\n  const onHandleDeleteModal = (id) => {\r\n    setIsShowDelelteModal(!isShowDeleteModal)\r\n    setDeleteDepId(id)\r\n  }\r\n\r\n  const onHandleDeleteAction = id =>{\r\n    setIsActionDelete(!isActionDelete)\r\n    setActionDelete(id)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getAllEmailTemplalte()\r\n    getAllAction()\r\n  }, [currentPage])\r\n\r\n  const getAllEmailTemplalte = () => {\r\n    const params = {\r\n      page: currentPage,\r\n      limit: pagination.limit,\r\n    }\r\n    dispatch(emailTemplateAction.getEmailTemplateRequest(params))\r\n  }\r\n\r\nconst getAllAction =()=>{\r\n  const params = {\r\n    page: currentPage,\r\n    limit: pagination.limit,\r\n  }\r\n    dispatch(emailTemplateAction.getActionTemplateRequest(params))\r\n}\r\n\r\nuseEffect(() => {\r\n    if (!getActionTemplatePending) {\r\n        if (getActionTemplateError) {\r\n            setAllGetAction([])\r\n            return;\r\n        }\r\n        if (getActionTemplateRes) {\r\n            if (getActionTemplateRes?.data?.code == 200) {\r\n                setAllGetAction(getActionTemplateRes?.data?.data?.data?.data)\r\n            }\r\n        }\r\n    }\r\n}, [\r\n    getActionTemplateError,\r\n    getActionTemplateRes,\r\n    getActionTemplatePending\r\n]);\r\n\r\n  useEffect(() => {\r\n    if (!getEmailTemplatePending) {\r\n      if (getEmailTemplateError) {\r\n        setGetEmailTemplate([])\r\n        return;\r\n      }\r\n      if (getEmailTemplateRes) {\r\n        if (getEmailTemplateRes?.data?.code == 200) {\r\n          setGetEmailTemplate(getEmailTemplateRes?.data?.data?.data)\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    getEmailTemplatePending,\r\n    getEmailTemplateRes,\r\n    getEmailTemplateError\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (!deleteEmailTemplatePending) {\r\n      if (deleteEmailTemplateError) {\r\n        dispatch(emailTemplateAction.handleClearEmailTemplateStore('HANDLE_CLEAR_DELETE_EMAIL_TEMPLATE_STORE'))\r\n        return;\r\n      }\r\n      if (deleteEmailTemplateRes) {\r\n        if (deleteEmailTemplateRes?.data?.code == 200) {\r\n          dispatch(emailTemplateAction.handleClearEmailTemplateStore('HANDLE_CLEAR_DELETE_EMAIL_TEMPLATE_STORE'))\r\n          getAllEmailTemplalte()\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    deleteEmailTemplateRes,\r\n    deleteEmailTemplateError,\r\n    deleteEmailTemplatePending\r\n  ]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (!DeleteActionTemplatePending) {\r\n      if (DeleteActionTemplateError) {\r\n        dispatch(emailTemplateAction.handleClearEmailTemplateStore('HANDLE_CLEAR_DELETE_ACTION_TEMPLATE_STORE'))\r\n        return;\r\n      }\r\n      if (DeleteActionTemplateRes) {\r\n        if (DeleteActionTemplateRes?.data?.code == 200) {\r\n          dispatch(emailTemplateAction.handleClearEmailTemplateStore('HANDLE_CLEAR_DELETE_ACTION_TEMPLATE_STORE'))\r\n          getAllAction()\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    deleteEmailTemplateRes,\r\n    DeleteActionTemplateError,\r\n    DeleteActionTemplatePending\r\n  ]);\r\n\r\n\r\n  const toggleOffcanvas = (type) => {\r\n    setIsOpenEmailType(!isOpenEmailType);\r\n    if (type == 'view') {\r\n      setonHandleViewModal('')\r\n    }\r\n  };\r\n\r\n  const toggleOpenAction = (type) => {\r\n    setOpenAction(!openAction)\r\n  };\r\n\r\n  const onDeleteCancelDepartment = (type) => {\r\n    if (type) {\r\n      const params = {\r\n        _id: deleteDepId\r\n      }\r\n      dispatch(emailTemplateAction?.deleteEmailTemplateRequest(params))\r\n      setIsShowDelelteModal(!isShowDeleteModal)\r\n    } else {\r\n      setIsShowDelelteModal(!isShowDeleteModal)\r\n    }\r\n  }\r\n\r\n  const onDeleteActionFunction = (type) => {\r\n    if (type) {\r\n      const params = {\r\n        _id: actionDelete\r\n      }\r\n      dispatch(emailTemplateAction?.DeleteActionTemplateRequest(params))\r\n      setIsActionDelete(!isActionDelete)\r\n    } else {\r\n      setIsActionDelete(!isActionDelete)\r\n    }\r\n  }\r\n\r\n  const memoizedTemplateList = useMemo(() => getemailTemplate, [getemailTemplate]);\r\n  const memoizedActionList = useMemo(() => AllGetAction, [AllGetAction]);\r\n  return (\r\n      <div className=\"cardBox mb-3 mt-3 pt-5 myRequest\">\r\n        <ul className=\"nav nav-tabs leaveTabs mb-4\">\r\n          <li className=\"nav-item\">\r\n            <button\r\n              className=\"nav-link active\"\r\n              data-bs-toggle=\"tab\"\r\n              data-bs-target=\"#createEmailTemplate\"\r\n              type=\"button\"\r\n            >\r\n              Create Email Template\r\n            </button>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <button\r\n              className=\"nav-link\"\r\n              data-bs-toggle=\"tab\"\r\n              data-bs-target=\"#addAction\"\r\n              type=\"button\"\r\n            >\r\n              Add Action\r\n            </button>\r\n          </li>\r\n        </ul>\r\n        <div className=\"tab-content\">\r\n          <div className=\"tab-pane fade active show\" id=\"createEmailTemplate\">\r\n            <div className=\"cardHead d-flex align-items-center justify-content-between\">\r\n              <Button btnClassName={\"btn btn-primary gradientBg\"}\r\n                onClickFun={() => toggleOffcanvas()}\r\n              >Create New Email Template</Button>\r\n            </div>\r\n            <EmailTemplatedata\r\n              TemplateList={memoizedTemplateList}\r\n              isLoading={getEmailTemplatePending}\r\n              toggleOffcanvas={toggleOffcanvas}\r\n              setSelectedTemplateData={setSelectedTemplateData}\r\n              onHandleDeleteModal={onHandleDeleteModal}\r\n              currentPage={currentPage}\r\n              setCurrentPage={setCurrentPage}\r\n              onHandleViewModal={onHandleViewModal}\r\n            />\r\n            <CreateAndUpdateEmailTemplate\r\n              getAllEmailTemplalte={getAllEmailTemplalte}\r\n              isOpenEmailType={isOpenEmailType}\r\n              toggleOffcanvas={toggleOffcanvas}\r\n              setSelectedTemplateData={setSelectedTemplateData}\r\n              selectedTemplateData={selectedTemplateData}\r\n              onHandleViewModals={onHandleViewModals}\r\n            />\r\n          </div>\r\n          <div className=\"tab-pane fade active\" id=\"addAction\">\r\n            <div className=\"cardHead d-flex align-items-center justify-content-between\">\r\n              <Button btnClassName={\"btn btn-primary gradientBg\"}\r\n                onClickFun={() => toggleOpenAction()}\r\n              >Add Action</Button>\r\n            </div>\r\n\r\n            <EmailActionData\r\n              ActionList={memoizedActionList}\r\n              isLoading={getEmailTemplatePending}\r\n              toggleOpenAction={toggleOpenAction}\r\n              setSelectedActionData={setSelectedActionData}\r\n              onHandleDeleteAction={onHandleDeleteAction}\r\n              currentPage={currentPage}\r\n              setCurrentPage={setCurrentPage}\r\n              onHandleViewModal={onHandleViewModal}\r\n            />\r\n\r\n            <AddActionEmailTemplate\r\n              TemplateList={memoizedTemplateList}\r\n              getAllAction={getAllAction}\r\n              toggleOpenAction={toggleOpenAction}\r\n              openAction={openAction}\r\n              setSelectedActionData={setSelectedActionData}\r\n              selectedActionData={selectedActionData}\r\n              onHandleViewModals={onHandleViewModals}\r\n            />\r\n\r\n          </div>\r\n        </div>\r\n        {isActionDelete && (\r\n        <ApproveRejectModal\r\n          onApproveReject={onDeleteActionFunction}\r\n          isShow={isActionDelete}\r\n          desc={\"You want to delete this Action\"}\r\n          btnRightLoading={DeleteActionTemplatePending}\r\n        />)}\r\n      {isShowDeleteModal && (\r\n        <ApproveRejectModal\r\n          onApproveReject={onDeleteCancelDepartment}\r\n          isShow={isShowDeleteModal}\r\n          desc={\"You want to delete this Email Template\"}\r\n          btnRightLoading={deleteEmailTemplatePending}\r\n        />)\r\n      }\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EmailTemplate\r\n"],"names":["props","_addEmailTemplate$bod","isOpenEmailType","toggleOffcanvas","getAllEmailTemplalte","setSelectedTemplateData","selectedTemplateData","onHandleViewModals","errors","setErrors","useState","dispatch","useDispatch","getEmailTypePending","getEmailTypeRes","getEmailTypeError","addEmailTemplatePending","addEmailTemplateRes","addEmailTemplateError","useSelector","state","emailtemplate","isActive","setIsActive","emailType","setEmailType","editorData","setEditorData","templateId","setTemplateId","dropdownValue","setDropdownValue","bodydata","setBodydata","subemailType","setSubEmailType","field","setfield","addEmailTemplate","setAddEmailTemplate","template_name","email_title","email_type","body","is_active","remark","useEffect","id","handleAutoFill","getEmailType","emailTemplateAction","getEmailTypeRequest","_getEmailTypeRes$data","_getEmailTypeRes$data2","_getEmailTypeRes$data3","_getEmailTypeRes$data4","data","code","toast","error","errorMessage","_addEmailTemplateRes$","_addEmailTemplateRes$2","success","msg","handleClearEmailTemplateStore","handleChange","event","_dropdownOptions$filt","target","name","console","log","value","dropdownOptions","filter","task","subtasks","resetTempateData","label","_jsx","_Fragment","children","_jsxs","className","tabIndex","style","visibility","width","type","onClick","htmlFor","placeholder","onChange","e","disabled","CustomError","text","required","hidden","selected","map","dangerouslySetInnerHTML","__html","replaceAll","Customckediter","cursor","push","newFunction","checked","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","addEmailTemplatechema","isValid","updateEmailTemplateRequest","addEmailTemplateRequest","createEmailTemplate","TemplateList","isLoading","currentPage","setCurrentPage","onHandleDeleteModal","onHandleViewModal","templateList","settemplate","isOpen","setIsOpen","viewEmailTemplate","setViewEmailTemplate","scopedSlots","useMemo","sn","_","index","item","getBadgeColor","created_at","moment","format","action","CustomTable","fields","key","pagination","totalPages","tableName","ActionList","toggleOpenAction","setSelectedActionData","onHandleDeleteAction","actionList","setAction","EmailTemplate","setIsOpenEmailType","getActionTemplatePending","getActionTemplateRes","getActionTemplateError","getEmailTemplatePending","getEmailTemplateRes","getEmailTemplateError","deleteEmailTemplatePending","deleteEmailTemplateRes","deleteEmailTemplateError","DeleteActionTemplatePending","DeleteActionTemplateRes","DeleteActionTemplateError","getemailTemplate","setGetEmailTemplate","selectedActionData","deleteDepId","setDeleteDepId","isShowDeleteModal","setIsShowDelelteModal","setonHandleViewModal","openAction","setOpenAction","AllGetAction","setAllGetAction","actionDelete","setActionDelete","isActionDelete","setIsActionDelete","getAllAction","params","page","limit","getEmailTemplateRequest","getActionTemplateRequest","_getActionTemplateRes","_getActionTemplateRes2","_getActionTemplateRes3","_getActionTemplateRes4","_getEmailTemplateRes$","_getEmailTemplateRes$2","_getEmailTemplateRes$3","_deleteEmailTemplateR","_DeleteActionTemplate","memoizedTemplateList","memoizedActionList","Button","btnClassName","onClickFun","EmailTemplatedata","CreateAndUpdateEmailTemplate","EmailActionData","AddActionEmailTemplate","ApproveRejectModal","onApproveReject","_id","DeleteActionTemplateRequest","isShow","desc","btnRightLoading","deleteEmailTemplateRequest"],"sourceRoot":""}