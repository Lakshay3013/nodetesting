{"version":3,"file":"static/js/454.161bf2f6.chunk.js","mappings":"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","sources":["components/commanComponent/Lottieplayer.js","components/globalComponents/CustomError.js","components/globalComponents/ToastNotification.js","components/modal/ApproveRejectModal.js","utils/ValidattionTranslation.js","utils/ValidationHelper.js","utils/ValidationSchema.js"],"sourcesContent":["import React from 'react'\r\nimport Lottie from 'react-lottie-player'\r\n\r\nconst Lottieplayer = ({lottieUrl,Lottiestyle,speed,backgroundColor}) => {\r\n  return (\r\n    <Lottie\r\n        loop\r\n               // src=\"../images/star-icon.json\"\r\n                animationData={lottieUrl||''}\r\n                background={backgroundColor ||\"transparent\"}\r\n                speed={speed ||\"1\"}\r\n                play\r\n                style={Lottiestyle}\r\n                autoplay>\r\n       </Lottie>\r\n  )\r\n}\r\n\r\nexport default Lottieplayer\r\n","import React from 'react'\r\n\r\nconst CustomError = ({text,style}) => {\r\n  return (\r\n    <>\r\n      <small \r\n      className=\"p-error text-danger\" \r\n      style={style ||{}}\r\n      >\r\n        {text}\r\n    </small>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CustomError\r\n","import React from 'react';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst ToastNotification = () => (\r\n  <div>\r\n    <ToastContainer />\r\n  </div>\r\n);\r\n\r\nexport const notify = (message, type = \"info\",duration,position) => {\r\n    let toastStyle ={    \r\n    autoClose: duration,\r\n    position: \"top-right\"         \r\n    }\r\n\r\n  switch (type) {\r\n    case \"success\":\r\n      toast.success(message,toastStyle);\r\n      break;\r\n    case \"error\":\r\n      toast.error(message,toastStyle);\r\n      break;\r\n    case \"warn\":\r\n      toast.warn(message,toastStyle);\r\n      break;\r\n    case \"info\":\r\n    default:\r\n      toast.info(message,toastStyle);\r\n      break;\r\n  }\r\n};\r\n\r\nexport default ToastNotification;","import React from 'react'\r\nimport Lottieplayer from '../commanComponent/Lottieplayer'\r\nimport backup from '../../../src/images/Backup.json'\r\nimport { CustomButton } from '../globalComponents'\r\n\r\nconst ApproveRejectModal = ({ titile, desc, onApproveReject, isShow, isLoading, btnTextLeft,btnTextRight}) => {\r\n    return (\r\n        <>\r\n            <div class=\"modal fade attendanceViewodal\" id=\"sureMdl\" style={{ display: isShow ? \"unset !important\" : \"none !important\", opacity: isShow ? \"unset\" : \"0\" }}>\r\n                <div class=\"modal-dialog modal-dialog-centered\">\r\n                    <div class=\"modal-content rounded-1 border-0\">\r\n                        <div class=\"modal-body \">\r\n                            <div class=\"text-center suremodalCon\">\r\n                                <div class=\"d-flex justify-content-center\">\r\n                                    <Lottieplayer lottieUrl={backup} Lottiestyle={{ width: \"90px\", height: \"90px\" }} />\r\n                                </div>\r\n                                <h6 class=\"fw-semibold mb-2\">{titile ? titile : \"Are You Sure?\"}</h6>\r\n                                <p class=\"mb-5 px-4\">{desc ? desc : \"\"}\r\n                                </p>\r\n                                <div class=\"d-flex justify-content-center gap-3\">\r\n                                    <CustomButton\r\n                                        classNames={\"btn btn-danger\"}\r\n                                        isLoading={isLoading}\r\n                                        text={btnTextLeft || \"Reject\"}\r\n                                        handleClick={() => onApproveReject(false)}\r\n                                    />\r\n                                    <CustomButton\r\n                                        classNames={\"btn btn-success\"}\r\n                                        isLoading={isLoading}\r\n                                        text={btnTextRight || \"Confirm\"}\r\n                                        handleClick={() => onApproveReject(true)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ApproveRejectModal\r\n","\r\nconst ValidattionTranslation = {\r\n    \"validations.fieldReq\": \"$FIELD is required.\",\r\n    \"minLength\": \"Minimum length is $1 characters.\",\r\n    \"maxLength\": \"Maximum length is $1 characters.\",\r\n    \"emailInvalid\": \"The email address is invalid.\",\r\n    \"mobileNum\": \"Mobile Number\",\r\n    \"emailAddress\": \"Email Address\",\r\n    \"allFieldReq\": \"All $FIELD are required.\",\r\n    \"onlyDigit\":\"Mobile Number is only Digit\",\r\n    \"reqField\":\"$REQUIREDFIELD is required.\",\r\n\r\n    //mrf validation \r\n    \"department\": \"Department is required.\",\r\n    \"designation\": \"Designation is required.\",\r\n    \"position\": \"Position is required.\",\r\n    \"priority\": \"Priority is required.\",\r\n    \"minQualififcation\": \"Minimum qualification is required.\",\r\n    \"preferredQualification\": \"Preferred qualification is required.\",\r\n    \"businessImpact\": \"Business impact is required.\",\r\n    \"hiringFor\": \"Hiring for is required.\",\r\n    \"vacantPosition\": \"Vacant position is required.\",\r\n    \"yearOfExperience\": \"Years of experience is required.\",\r\n    \"mrfJustification\": \"Mrf justification is required.\",\r\n\r\n    // job description \r\n    \"responsiblities\": \"Responsiblities is required.\",\r\n    \"domainKnowledge\": \"Domain Knowledge is required.\",\r\n    \"roleSummary\": \"Role Summary is required.\",\r\n\r\n    //intervewer \r\n    \"interviewStage\": \"InterviewStage is required.\",\r\n    \"interviewer\": \"Interviewer is required.\",\r\n    \"nterviewer\": \"Interview Type is required.\",\r\n\r\n    // //candidate \r\n    // \"employeeName\": \"Employee Name is required.\",\r\n    // \"employeeEmail\": \"Employee Email is required.\",\r\n    // \"employeeMobile\":\"Employee Mobile is required.\",\r\n    // \"location\":\"Employee Location is required.\",\r\n    // \"source\": \"Source is required.\",\r\n    // \"experience\":\"Experience is required.\",\r\n    // \"address\": \"Address is optional.\",\r\n    // \"pincode\": \"Pincode is optional.\",\r\n    // \"skills\": \"Skills is optional.\",\r\n\r\n};\r\nexport default ValidattionTranslation\r\n","// import {\r\n//   addOrganizationSchema,\r\n//   addOrgBranchSchema,\r\n//   organizationSettingSchema,\r\n//   addInvoiceSchema,\r\n// } from \"./ValidationSchema\";\r\n\r\nimport ValidattionTranslation from './ValidattionTranslation';\r\n\r\nconst trans = (key,replacements = {}) => {\r\nlet translation = ValidattionTranslation[key] || key;\r\nfor (const [placeholder, value] of Object.entries(replacements)) {\r\n  translation = translation.replace(new RegExp(`\\\\$${placeholder}`, 'g'), value);\r\n}\r\nreturn translation;\r\n}\r\nconst emailRegix =\r\n  /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\nconst panNumRegex = new RegExp(/^[A-Z]{5}[0-9]{4}[A-Z]{1}$/);\r\nconst onlyDigitRegix = /^\\d+$/;\r\n\r\nconst isFieldValid = (formik, name) =>\r\n  !!(formik.touched[name] && formik.errors[name]);\r\n\r\nconst getFieldErrorMsg = (formik, name) => {\r\n  return (\r\n    isFieldValid(formik, name) && (\r\n      <small className=\"p-error\">{formik.errors[name]}</small>\r\n    )\r\n  );\r\n};\r\n\r\nconst digitsOnly = (value) => {\r\n  return onlyDigitRegix.test(value);\r\n};\r\n\r\nconst validateResponse = () => {\r\n  return { status: 401, msg_code: 401, msg: \"\", isValid: false, errors: null };\r\n};\r\n\r\nconst isBlank = (value) => {\r\n  return value === \"\" || false;\r\n};\r\n\r\nconst isNull = (value) => {\r\n  return value === null || false;\r\n};\r\n\r\nconst isNun = (value) => {\r\n  return Number.isNaN(value) || false;\r\n};\r\n\r\nconst isBlankOrNull = (value) => {\r\n  return value === undefined || isBlank(value) || isNull(value) || false;\r\n};\r\n\r\nconst validateMobile = (mobile) => {\r\n  if (mobile.length === 0) {\r\n    return {\r\n      isValid: false,\r\n      msg: trans(\"validations.fieldReq\").replace(\r\n        \"$FIELD\",\r\n        trans(\"label.mobileNum\")\r\n      ),\r\n    };\r\n  }\r\n  if (mobile.length < 10) {\r\n    return {\r\n      isValid: false,\r\n      msg: trans(\"validations.minLength\").replace(\"$1\", 10),\r\n    };\r\n  }\r\n  if (mobile.length > 10) {\r\n    return {\r\n      isValid: false,\r\n      msg: trans(\"validations.maxLength\").replace(\"$1\", 10),\r\n    };\r\n  }\r\n  return { isValid: true, msg: \"\" };\r\n};\r\n\r\nconst validateEmail = (email) => {\r\n  if (email.length === 0) {\r\n    return {\r\n      isValid: false,\r\n      msg: trans(\"validations.fieldReq\").replace(\r\n        \"$FIELD\",\r\n        trans(\"label.emailAddress\")\r\n      ),\r\n    };\r\n  }\r\n  if (!emailRegix.test(email)) {\r\n    return { isValid: false, msg: trans(\"validations.emailInvalid\") };\r\n  }\r\n  return { isValid: true, msg: \"\" };\r\n};\r\n\r\nconst validateSchema = async (schema, data) => {\r\n  const validateDataRes = validateResponse();\r\n  if (!schema) {\r\n    validateDataRes.msg_code = 401;\r\n    validateDataRes.msg = trans(\"validations.allFieldReq\");\r\n    return validateDataRes;\r\n  }\r\n\r\n  const result = await schema.isValid(data);\r\n  const errorsList = {};\r\n  if (!result) {\r\n    await schema.validate(data, { abortEarly: false }).catch((err) => {\r\n      const errors = err.inner.reduce((acc, error) => {\r\n        return (errorsList[error.path] = error.message);\r\n      }, {});\r\n    });\r\n    validateDataRes.errors = errorsList;\r\n    return validateDataRes;\r\n  }\r\n  validateDataRes.msg_code = 200;\r\n  validateDataRes.status = 200;\r\n  validateDataRes.isValid = true;\r\n  return validateDataRes;\r\n};\r\n\r\nconst validateAddBranch = async (body) => {\r\n  const validateDataRes = await validateSchema(\"addOrgBranchSchema\", body);\r\n  return validateDataRes;\r\n};\r\nconst validateAddOrganization = async (body) => {\r\n  const validateDataRes = await validateSchema(\"addOrganizationSchema\", body);\r\n  return validateDataRes;\r\n};\r\n\r\nconst validateOrgSettings = async (body) => {\r\n  const validateDataRes = await validateSchema(\"organizationSettingSchema\", body);\r\n  return validateDataRes;\r\n};\r\n\r\nconst validateAddInvoice = async (body) => {\r\n  const validateDataRes = await validateSchema(\"addInvoiceSchema\", body);\r\n  return validateDataRes;\r\n};\r\n\r\nconst validateField = (value, type, minLength = 3) => {\r\n  if (type === \"mobile\") {\r\n    if (value.length < 10) {\r\n      return trans(\"minLength\").replace(\"$1\", 10);\r\n    }\r\n    if (value.length > 10) {\r\n      return trans(\"maxLength\").replace(\"$1\", 10);\r\n    }\r\n    if(!onlyDigitRegix.test(value)){\r\n      return trans(\"onlyDigit\")\r\n    }\r\n    \r\n  } else if (type === \"email\") {\r\n    if (!emailRegix.test(value)) {\r\n      return trans(\"emailInvalid\");\r\n    }\r\n  } else if (type === \"string\") {\r\n    if (value.length < minLength) {\r\n      return trans(\"minLength\").replace(\"$1\", minLength);\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport {\r\n  trans,\r\n  digitsOnly,\r\n  isFieldValid,\r\n  getFieldErrorMsg,\r\n  validateAddBranch,\r\n  validateMobile,\r\n  validateAddOrganization,\r\n  validateOrgSettings,\r\n  validateAddInvoice,\r\n  validateSchema,\r\n  validateField,\r\n};\r\n","import * as yup from \"yup\";\r\nimport { digitsOnly, trans ,validateField} from './ValidationHelper';\r\n\r\n// // Extend Yup with the combined custom validation method\r\nyup.addMethod(yup.string, \"validateField\", function (type, minLength = 3) {\r\n  return this.test(\"validate-field\", trans(\"invalid input\"), function (value) {\r\n    const { path, createError } = this;\r\n    const validationResponse = validateField(value, type, minLength);\r\n    return validationResponse === true || createError({ path, message: validationResponse });\r\n  });\r\n});\r\n\r\nconst employeeLoginSchema = yup.object().shape({\r\n  username: yup\r\n    .string()\r\n    .required(trans(\"validations.emailReq\"))\r\n    .email(trans(\"validations.invalidEmail\"))\r\n    .min(3, trans(\"validations.minLength\").replace(\"$1\", 3))\r\n    .max(50, trans(\"validations.maxLength\").replace(\"$1\", 50)),\r\n  password: yup\r\n    .string()\r\n    .required(trans(\"validations.passwordReq\"))\r\n    .min(8, trans(\"validations.minLength\").replace(\"$1\", 8))\r\n    .max(20, trans(\"validations.maxLength\").replace(\"$1\", 20)),\r\n\r\n});\r\nconst addEmployeeSchema = yup.object().shape({\r\n  first_name: yup\r\n    .string()\r\n    .required(trans(\"validations.firstnameReq\"))\r\n    .min(2, trans(\"validations.minLength\").replace(\"$1\", 2))\r\n    .max(20, trans(\"validations.maxLength\").replace(\"$1\", 20)),\r\n  last_name: yup\r\n    .string()\r\n    .required(trans(\"validations.lastnameReq\"))\r\n    .min(2, trans(\"validations.minLength\").replace(\"$1\", 2))\r\n    .max(20, trans(\"validations.maxLength\").replace(\"$1\", 20)),\r\n  email_id: yup\r\n    .string()\r\n    .required(trans(\"validations.emailReq\"))\r\n    .email(trans(\"validations.invalidEmail\"))\r\n    .min(2, trans(\"validations.minLength\").replace(\"$1\", 2))\r\n    .max(50, trans(\"validations.maxLength\").replace(\"$1\", 50)),\r\n  contact_number: yup\r\n    .string()\r\n    .required(trans(\"validations.contactNumberReq\"))\r\n    .min(10, trans(\"validations.minLength\").replace(\"$1\", 10))\r\n    .max(10, trans(\"validations.maxLength\").replace(\"$1\", 10)),\r\n  pan: yup\r\n    .string()\r\n    .required(trans(\"validations.panReq\"))\r\n    .min(5, trans(\"validations.minLength\").replace(\"$1\", 5))\r\n    .max(10, trans(\"validations.maxLength\").replace(\"$1\", 10)),\r\n  currency: yup\r\n    .string()\r\n    .required(trans(\"validations.currencyReq\")),\r\n  address_line_1: yup\r\n    .string()\r\n    .required(trans(\"validations.addressLine1Req\"))\r\n    .min(2, trans(\"validations.minLength\").replace(\"$1\", 2))\r\n    .max(50, trans(\"validations.maxLength\").replace(\"$1\", 50)),\r\n  address_line_2: yup\r\n    .string()\r\n    .required(trans(\"validations.addressLine2Req\"))\r\n    .min(2, trans(\"validations.minLength\").replace(\"$1\", 2))\r\n    .max(50, trans(\"validations.maxLength\").replace(\"$1\", 50)),\r\n  city: yup\r\n    .string()\r\n    .required(trans(\"validations.cityReq\"))\r\n    .min(4, trans(\"validations.minLength\").replace(\"$1\", 4))\r\n    .max(20, trans(\"validations.maxLength\").replace(\"$1\", 20)),\r\n  state: yup\r\n    .string().required(trans(\"validations.stateReq\"))\r\n    .max(50, trans(\"validations.maxLength\").replace(\"$1\", 50)),\r\n  country: yup\r\n    .string().required(trans(\"validations.countryReq\")),\r\n  postal_code: yup\r\n    .number()\r\n    .typeError(trans(\"validations.numberReq\"))\r\n    .required(trans(\"validations.postalCodeReq\"))\r\n    .min(100000, trans(\"validations.minPostalCodeLength\"))\r\n    .max(999999, trans(\"validations.maxPostalCodeLength\")),\r\n});\r\nconst addCountry = yup.object().shape({\r\n  country_name: yup.string().required(trans(\"validations.country_name\")),\r\n  country_code: yup\r\n    .string()\r\n    .required(trans(\"validations.country_code\"))\r\n    .max(3, trans(\"validations.maxLength\").replace(\"$1\", 3)),\r\n});\r\n\r\nconst addDepartmentSchema = yup.object().shape({\r\n  depName: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Department Name\"})),\r\n  \r\n  shortName: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Short Name\"}))\r\n});\r\n\r\n// Designation Schema\r\nconst addDesignationSchema = yup.object().shape({\r\n\r\n  departmentId: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Department Name\"})),\r\n\r\n  designationName: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Designation Name\"})),\r\n  \r\n  shortName: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Short Name\"}))\r\n});\r\n// mrf form schema\r\n\r\nconst MrfCreateSchema = yup.object().shape({\r\n  department: yup\r\n    .string()\r\n    .required(trans(\"department\")),\r\n  designation: yup\r\n    .string()\r\n    .required(trans(\"designation\")),\r\n\r\n  position: yup\r\n    .string()\r\n    .required(trans(\"position\")),\r\n  priority: yup\r\n    .string()\r\n    .required(trans(\"priority\")),\r\n  minQualififcation: yup\r\n    .string()\r\n    .required(trans(\"minQualififcation\")),\r\n\r\n  preferredQualification: yup\r\n    .string()\r\n    .optional(),\r\n\r\n  businessImpact: yup\r\n    .string()\r\n    .required(trans(\"businessImpact\")),\r\n  hiringFor: yup\r\n    .string()\r\n    .required(trans(\"hiringFor\")),\r\n  vacantPosition: yup\r\n    .string()\r\n    .required(trans(\"vacantPosition\")),\r\n  yearOfExperience: yup\r\n    .string()\r\n    .required(trans(\"yearOfExperience\")),\r\n  mrfJustification: yup\r\n    .string()\r\n    .required(trans(\"mrfJustification\")),\r\n});\r\n\r\nconst MrfJobDescSchema = yup.object().shape({\r\n  responsiblities: yup\r\n    .string()\r\n    .required(trans(\"reqField\",{REQUIREDFIELD:\"Responsiblities\"})),\r\n  domainKnowledge: yup\r\n    .string()\r\n    .required(trans(\"reqField\",{REQUIREDFIELD:\"Domain Knowledge\"})),\r\n\r\n  roleSummary: yup\r\n    .string()\r\n    .required(trans(\"reqField\",{REQUIREDFIELD:\"Role Summary\"})),\r\n\r\n  otherSkills: yup\r\n    .string()\r\n    .optional(),\r\n  trainingCertificates: yup\r\n    .string()\r\n    .optional(),\r\n});\r\nconst MrfInterviewSchema = yup.object().shape({\r\n  department: yup\r\n    .string()\r\n    .required(trans(\"reqField\",{REQUIREDFIELD:\"Department\"})),\r\n  designation: yup\r\n    .string()\r\n    .required(trans(\"reqField\",{REQUIREDFIELD:\"Designation\"})),\r\n\r\n  interviewStage: yup\r\n    .string()\r\n    .required(trans(\"reqField\",{REQUIREDFIELD:\"Interview Stage\"})),\r\n\r\n  interviewer: yup\r\n    .string()\r\n    .required(trans(\"reqField\",{REQUIREDFIELD:\"Interviewer\"})),\r\n  interviewType: yup\r\n    .string()\r\n    .required(trans(\"reqField\",{REQUIREDFIELD:\"Interview Type\"})),\r\n\r\n});\r\n\r\n\r\n// candidate form \r\nconst candidateSchema = yup.object().shape({\r\n  employeeName: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Employee Name\"})),\r\n\r\n  employeeEmail: yup.\r\n  string()\r\n  .validateField(\"email\")\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Employee Email\"})),\r\n\r\n  employeeMobile: yup\r\n  .string()\r\n  .validateField(\"mobile\")\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Employee Mobile\"})),\r\n\r\n  location: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Location\"})),\r\n\r\n  source: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Source\"})),\r\n\r\n  experience: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Experience\"})),\r\n \r\n  address: yup\r\n  .string()\r\n  .optional(),\r\n\r\n  pincode: yup\r\n  .string()\r\n  .optional(),\r\n\r\n  skills: yup\r\n  .string()\r\n  .optional(),\r\n\r\n});\r\nexport {\r\n  employeeLoginSchema,\r\n  addEmployeeSchema,\r\n  addCountry,\r\n  addDepartmentSchema,\r\n  MrfCreateSchema,\r\n  MrfJobDescSchema,\r\n  MrfInterviewSchema,\r\n  candidateSchema,\r\n  addDesignationSchema\r\n};\r\n"],"names":["_ref","lottieUrl","Lottiestyle","speed","backgroundColor","_jsx","Lottie","loop","animationData","background","play","style","autoplay","text","_Fragment","children","className","notify","message","toastStyle","autoClose","arguments","length","undefined","position","toast","success","error","warn","info","titile","desc","onApproveReject","isShow","isLoading","btnTextLeft","btnTextRight","class","id","display","opacity","_jsxs","Lottieplayer","backup","width","height","CustomButton","classNames","handleClick","trans","key","replacements","translation","ValidattionTranslation","placeholder","value","Object","entries","replace","RegExp","concat","emailRegix","onlyDigitRegix","validateSchema","async","schema","data","validateDataRes","status","msg_code","msg","isValid","errors","result","errorsList","validate","abortEarly","catch","err","inner","reduce","acc","path","validateField","type","minLength","test","yup","this","createError","validationResponse","shape","username","required","email","min","max","password","first_name","last_name","email_id","contact_number","pan","currency","address_line_1","address_line_2","city","state","country","postal_code","typeError","country_name","country_code","addDepartmentSchema","depName","REQUIREDFIELD","shortName","addDesignationSchema","departmentId","designationName","MrfCreateSchema","department","designation","priority","minQualififcation","preferredQualification","optional","businessImpact","hiringFor","vacantPosition","yearOfExperience","mrfJustification","MrfJobDescSchema","responsiblities","domainKnowledge","roleSummary","otherSkills","trainingCertificates","MrfInterviewSchema","interviewStage","interviewer","interviewType","candidateSchema","employeeName","employeeEmail","employeeMobile","location","source","experience","address","pincode","skills"],"sourceRoot":""}