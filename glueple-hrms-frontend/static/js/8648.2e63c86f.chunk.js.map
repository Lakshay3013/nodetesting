{"version":3,"file":"static/js/8648.2e63c86f.chunk.js","mappings":"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","sources":["components/TaskManagement/TaskProject/projectType/CreateUpdateProjectType.js","components/TaskManagement/TaskProject/projectType/ProjectType.js","components/TaskManagement/TaskProject/project/CreateUpdateTaskProject.js","components/TaskManagement/TaskProject/project/Projects.js","components/TaskManagement/TaskProject/TaskProject.js"],"sourcesContent":["\r\nimport { CustomButton, CustomError } from '../../../globalComponents'\r\nimport { CustCheckbox, Input, Label } from '../../../commanComponent'\r\nimport { validateSchema } from '../../../../utils/ValidationHelper'\r\nimport { addUpdateProjectTypeSchema } from '../../../../utils/ValidationSchema'\r\nimport { useCustomTranslation } from '../../../../translation'\r\nimport { useEffect, useState } from 'react'\r\nimport { createShortName } from '../../../../utils/common'\r\n\r\nconst CreateUpdateProjectType = (props) => {\r\n  // const { createProjectTypePending, updateProjectTypePending } = useSelector(state => state?.project)\r\n  const { t } = useCustomTranslation()\r\n  const {\r\n    selectedProjectTypeData,\r\n    openModel,\r\n    handleOpenClose,\r\n    handleCreateUpdateProjectType,\r\n  } = props\r\n  const [errors, setErrors] = useState({})\r\n  const [formData, setFormData] = useState({\r\n    projectType: '',\r\n    shortName: '',\r\n    is_active: true\r\n  })\r\n\r\n  const handleFromChange = (e, fieldName) => {\r\n    const name = fieldName || e.target?.name;\r\n    const { value, type, checked } = e.target ? e.target : { value: e };\r\n\r\n    setFormData(prevState => {\r\n      const updatedState = {\r\n        ...prevState,\r\n        [name]: type === 'checkbox' ? checked : value,\r\n      };\r\n      if (name === 'projectType') {\r\n        updatedState.shortName = createShortName(value);\r\n      }\r\n\r\n      return updatedState;\r\n    });\r\n\r\n    // Reset error for this field\r\n    setErrors(prevErrors => ({\r\n      ...prevErrors,\r\n      [name]: undefined,\r\n    }));\r\n  };\r\n\r\n  const submitCreateUpdateProjectType = async () => {\r\n    const validationResponse = await validateSchema(addUpdateProjectTypeSchema, formData);\r\n    if (validationResponse.isValid) {\r\n      const {\r\n\r\n        projectType,\r\n        shortName,\r\n        is_active\r\n      } = formData\r\n      const params = {\r\n        name: projectType,\r\n        short_name: shortName,\r\n        is_active\r\n\r\n      }\r\n      setErrors({})\r\n      handleCreateUpdateProjectType(params)\r\n    } else {\r\n      setErrors(validationResponse.errors);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    return (() => {\r\n      resetForm()\r\n    })\r\n  }, [openModel])\r\n\r\n  useEffect(() => {\r\n    if (selectedProjectTypeData) {\r\n      setFormData({\r\n        projectType: selectedProjectTypeData?.name,\r\n        shortName:selectedProjectTypeData?.short_name,\r\n        is_active: selectedProjectTypeData?.is_active,\r\n\r\n      })\r\n    }\r\n  }, [selectedProjectTypeData])\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      projectType: '',\r\n      shortName: '',\r\n      is_active: true\r\n\r\n    })\r\n    setErrors({})\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n        tabIndex={-1}\r\n        style={{\r\n          visibility: openModel ? 'visible' : 'hidden',\r\n          width: \"800px\"\r\n        }}\r\n        id=\"interviewDetail\"\r\n      >\r\n        <div className=\"offcanvas-header\">\r\n          <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">\r\n            {selectedProjectTypeData ? t(\"headings.updateProjectType\") : t(\"headings.createProjectType\")}\r\n          </h5>\r\n          <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n            onClick={() => handleOpenClose()}\r\n          />\r\n        </div>\r\n\r\n\r\n        <div className=\"offcanvas-body myRequest \">\r\n          <div className=\"formPanel\">\r\n            <div className=\"row\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-3\">\r\n                  <Label text={t(\"labels.projectType\")} required={true} />\r\n\r\n                </div>\r\n                <div className=\"col-md-9\">\r\n                  <div className=\"form-group mb-3\">\r\n                    <Input\r\n                      type=\"text\"\r\n                      placeholder={t(\"placeholders.projectType\")}\r\n                      value={formData?.projectType}\r\n                      name=\"projectType\"\r\n                      onChange={(e) => handleFromChange(e)}\r\n                    />\r\n                    {errors?.projectType && (\r\n                      <CustomError text={errors.projectType} />\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"row\">\r\n                <div className=\"col-md-3\">\r\n                  <div className=\"form-group mb-3\">\r\n                    <Label text={t(\"labels.shortName\")} required={true} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-9\">\r\n                  <div className=\"form-group mb-3\">\r\n                    <input type=\"text\" className=\"form-control fs-7\"\r\n                      name='shortName'\r\n                      placeholder={t(\"placeholders.shortName\")}\r\n                      value={formData?.shortName}\r\n                      onChange={(e) => handleFromChange(e)}\r\n\r\n                    />\r\n                    {errors?.shortName && (\r\n                      <CustomError text={errors.shortName} />\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\"col-md-3\">\r\n                  <div className=\"form-group mb-3\">\r\n                    <Label text={t(\"labels.isActive\")} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-9\">\r\n                  <div className=\"form-group mb-3\">\r\n                    <CustCheckbox\r\n\r\n                      key={\"is_active\"}\r\n                      id={`is_active`}\r\n                      checked={formData?.is_active}\r\n                      handleChange={(e) => handleFromChange(e)}\r\n                      name={\"is_active\"}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n        <div className=\"offcanvas-footer\">\r\n          <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n            <CustomButton\r\n              text={selectedProjectTypeData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n              classNames={\"btn btn-org-gradient\"}\r\n              handleClick={() => submitCreateUpdateProjectType()}\r\n            // isLoading={selectedProjectTypeData ? updateProjectTypePending : createProjectTypePending}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {openModel && <div className=\"modal-backdrop fade show\"></div>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CreateUpdateProjectType\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomButton } from '../../../globalComponents'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { departmentAction, dropdownMasterActions, employeeActions } from '../../../../core/resource/actions'\r\nimport { pagination } from '../../../../utils/Constants.config'\r\nimport ApproveRejectModal from '../../../modal/ApproveRejectModal'\r\nimport { useCustomTranslation } from '../../../../translation'\r\nimport { CustomTable } from '../../../reuseableComponents'\r\nimport { Icon } from '../../../commanComponent'\r\nimport { dateFormate, getBadgeColor, setFilterDropdownData } from '../../../../utils/common'\r\nimport CreateUpdateProjectType from './CreateUpdateProjectType'\r\nimport { isPermission } from '../../../../utils/common'\r\n\r\nconst ProjectType = (props) => {\r\n    const { allDepartments, } = props\r\n    const dispatch = useDispatch()\r\n    const { t } = useCustomTranslation();\r\n    const [allEmployeeList, setAllEmployeeList] = useState([])\r\n\r\n    const {\r\n        addProjectTypePending,\r\n        addProjectTypeRes,\r\n        addProjectTypeError,\r\n\r\n        getProjectTypePending,\r\n        getProjectTypeRes,\r\n        getProjectTypeError,\r\n\r\n        updateProjectTypePending,\r\n        updateProjectTypeRes,\r\n        updateProjectTypeError,\r\n\r\n        deleteProjectTypePending,\r\n        deleteProjectTypeRes,\r\n        deleteProjectTypeError,\r\n    } = useSelector(state => state.department)\r\n\r\n\r\n    const [isOpenCreateUpdateProjectType, setIsOpenCreateUpdateProjectType] = useState(false)\r\n    const [selectedProjectTypeData, setSelectedProjectTypeData] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [allProjectTypes, setAllProjectTypes] = useState({})\r\n    const [isShowDeleteProjectTypeModal, setIsShowDeleteProjectTypeModal] = useState(false)\r\n    const [deleteProjectTypeId, setDeleteProjectTypeId] = useState('')\r\n    const [filteredDropdownData, setFilteredDropdownData] = useState('')\r\n    const [allProjectListData, setAllProjectListData] = useState([])\r\n    const updateProjectType = isPermission(\"update_project_type\")\r\n    const deleteProjectType = isPermission(\"delete_project_type\")\r\n\r\n\r\n    /* Create Update ProjectType */\r\n    const toggleCreateUpdateProjectTypeModal = (data) => {\r\n        if (!data) {\r\n            setSelectedProjectTypeData('')\r\n        } else {\r\n            setSelectedProjectTypeData(data)\r\n        }\r\n        setIsOpenCreateUpdateProjectType(!isOpenCreateUpdateProjectType)\r\n    }\r\n\r\n    const handleCreateUpdateProjectType = (params) => {\r\n        if (selectedProjectTypeData) {\r\n            params['_id'] = selectedProjectTypeData?._id || selectedProjectTypeData?.id\r\n            dispatch(departmentAction.updateProjectTypeRequest(params));\r\n        }\r\n        else {\r\n            dispatch(departmentAction.addProjectTypeRequest(params));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!addProjectTypePending) {\r\n            if (addProjectTypeError) {\r\n                dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_ADD_PROJECT_TYPE_STORE\"))\r\n                return;\r\n            }\r\n            if (addProjectTypeRes) {\r\n                if (addProjectTypeRes?.code === 200) {\r\n                    dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_ADD_PROJECT_TYPE_STORE\"))\r\n                    dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_GET_ALL_PROJECT_TYPE_LIST_STORE\"))\r\n                    dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_GET_PROJECT_TYPE_STORE\"))\r\n                    toggleCreateUpdateProjectTypeModal()\r\n                    getAllProjectTypes()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        addProjectTypeRes,\r\n        addProjectTypeError,\r\n        addProjectTypePending\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (!updateProjectTypePending) {\r\n            if (updateProjectTypeError) {\r\n                dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_UPDATE_PROJECT_TYPE_STORE\"))\r\n                return;\r\n            }\r\n            if (updateProjectTypeRes) {\r\n                if (updateProjectTypeRes?.code === 200) {\r\n                 dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_UPDATE_PROJECT_TYPE_STORE\"))\r\n                    dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_GET_ALL_PROJECT_TYPE_LIST_STORE\"))\r\n                    dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_GET_PROJECT_TYPE_STORE\"))\r\n                    getAllProjectTypes()\r\n                    toggleCreateUpdateProjectTypeModal()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updateProjectTypeRes,\r\n        updateProjectTypeError,\r\n        updateProjectTypePending\r\n    ]);\r\n\r\n\r\n    useEffect(() => {\r\n        getAllProjectTypes()\r\n    }, [currentPage])\r\n\r\n    /* Get All ProjectTypes Data */\r\n    const getAllProjectTypes = () => {\r\n        const params = {\r\n            page: currentPage,\r\n            limit: pagination.limit,\r\n        }\r\n        dispatch(departmentAction.getProjectTypeRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getProjectTypePending) {\r\n            if (getProjectTypeError) {\r\n                return;\r\n            }\r\n            if (getProjectTypeRes) {\r\n                if (getProjectTypeRes?.code === 200) {\r\n                    const getAllProjectTypeData = getProjectTypeRes?.data\r\n                    setAllProjectTypes(getAllProjectTypeData)\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getProjectTypeRes,\r\n        getProjectTypeError,\r\n        getProjectTypePending\r\n    ]);\r\n\r\n\r\n    /*  Delete ProjectType   */\r\n    const handleProjectTypeDeleteModal = (id) => {\r\n        if (id) {\r\n            setDeleteProjectTypeId(id)\r\n        }\r\n        setIsShowDeleteProjectTypeModal(!isShowDeleteProjectTypeModal)\r\n    }\r\n\r\n    const handleDeleteProjectType = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deleteProjectTypeId\r\n            }\r\n            dispatch(departmentAction?.deleteProjectTypeRequest(params))\r\n\r\n        } else {\r\n            handleProjectTypeDeleteModal()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!deleteProjectTypePending) {\r\n            if (deleteProjectTypeError) {\r\n                  dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_DELETE_PROJECT_TYPE_STORE\"))\r\n                return;\r\n            }\r\n            if (deleteProjectTypeRes) {\r\n                if (deleteProjectTypeRes?.code === 200) {\r\n                    handleProjectTypeDeleteModal()\r\n                    if (currentPage > 1 && allProjectTypes?.data?.length === 1) {\r\n                        setCurrentPage((pre => pre -= 1))\r\n                    } else {\r\n                        getAllProjectTypes()\r\n                    }\r\n                    dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_DELETE_PROJECT_TYPE_STORE\"))\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        deleteProjectTypeRes,\r\n        deleteProjectTypeError,\r\n        deleteProjectTypePending\r\n    ]);\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        created_at: item => dateFormate(item.created_at),\r\n        action: item => (\r\n            ( updateProjectType)\r\n            && <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    {updateProjectType && <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => toggleCreateUpdateProjectTypeModal(item)}\r\n                        >\r\n                            <Icon className={\"bi bi-pencil-square me-1\"} />Update</span>\r\n                    </li>}\r\n                    { deleteProjectType && <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleProjectTypeDeleteModal(item._id)}\r\n                        >\r\n                            <Icon className={\"bi bi-trash me-1\"} />Delete</span>\r\n                    </li>}\r\n                </ul>\r\n            </div>\r\n\r\n        )\r\n    }), [toggleCreateUpdateProjectTypeModal]);\r\n\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'name', label: 'Project Type Name' },\r\n        { key: 'is_active', label: 'Status' },\r\n        { key: 'created_at', label: 'Created At' },\r\n        ((updateProjectType || deleteProjectType) && { key: 'action', label: 'Action' })\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <div className='cardBox myRequest mb-3 employeeHistory'>\r\n                <div className=\"d-flex align-items-center justify-content-between gap-3\">\r\n                    <div className=\"cardHead d-flex\">\r\n                        <img src=\"images/myrequest-icon.svg\" alt=\"\" width={35} />\r\n                        <h4 className=\"ms-2 \">Project Types</h4>\r\n                    </div>\r\n                    <div>\r\n                        <CustomButton\r\n                            classNames={\"btn btn-primary gradientBg\"}\r\n                            handleClick={() => toggleCreateUpdateProjectTypeModal()}\r\n                            text={\"Project Type\"}\r\n                            icon={<Icon className={\"fa fa-plus\"} />}\r\n                        // slug={\"create_task\"}\r\n                        />\r\n\r\n                    </div>\r\n                </div>\r\n                <CustomTable\r\n                    data={allProjectTypes?.data}\r\n                    fields={fields}\r\n                    isLoading={getProjectTypePending}\r\n                    pagination={true}\r\n                    currentPage={currentPage}\r\n                    setCurrentPage={setCurrentPage}\r\n                    totalPages={allProjectTypes?.totalPages}\r\n                    isHeader={false}\r\n                    tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n                    scopedSlots={scopedSlots}\r\n                />\r\n            </div>\r\n\r\n            {isOpenCreateUpdateProjectType && <CreateUpdateProjectType\r\n                openModel={isOpenCreateUpdateProjectType}\r\n                handleOpenClose={toggleCreateUpdateProjectTypeModal}\r\n                handleCreateUpdateProjectType={handleCreateUpdateProjectType}\r\n                selectedProjectTypeData={selectedProjectTypeData}\r\n                allProjectListData={allProjectListData}\r\n                allEmployeeList={allEmployeeList}\r\n                filteredDropdownData={filteredDropdownData}\r\n            />}\r\n\r\n\r\n            {isShowDeleteProjectTypeModal && (\r\n                <ApproveRejectModal\r\n                    onApproveReject={handleDeleteProjectType}\r\n                    isShow={isShowDeleteProjectTypeModal}\r\n                    desc={t(\"alerts.deletePopup.desc\").replace('$1', \"ProjectType\")}\r\n                    btnRightLoading={deleteProjectTypePending}\r\n                    btnTextRight={t(\"btns.delete\")}\r\n                    btnTextLeft={t(\"btns.cancel\")}\r\n\r\n                />)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProjectType\r\n","\r\nimport { CustomButton, CustomError } from '../../../globalComponents'\r\nimport { CustCheckbox, CustomMultiSelect, Input, Label } from '../../../commanComponent'\r\nimport { validateSchema } from '../../../../utils/ValidationHelper'\r\nimport { addUpdateTaskProjectSchema } from '../../../../utils/ValidationSchema'\r\nimport { useCustomTranslation } from '../../../../translation'\r\nimport { useEffect, useState } from 'react'\r\nimport CustomSelect from '../../../commanComponent/CustomSelect'\r\nimport { CommonCKEditor } from '../../../reuseableComponents'\r\nimport { createShortName, multiSelectIDs } from '../../../../utils/common'\r\n\r\nconst CreateUpdateTaskProject = (props) => {\r\n    // const { createTaskProjectPending, updateTaskProjectPending } = useSelector(state => state?.project)\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        selectedTaskProjectData,\r\n        openModel,\r\n        handleOpenClose,\r\n        handleCreateUpdateTaskProject,\r\n        allProjectTypeList,\r\n        allEmployeeList\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [editorData, setEditorData] = useState('')\r\n    const [formData, setFormData] = useState({\r\n        projectName: '',\r\n        shortName: '',\r\n        projectType: null,\r\n        projectLead: null,\r\n        assignedTo: [],\r\n        is_active: true,\r\n\r\n    })\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e?.target?.name;\r\n        const { value, type, checked } = e?.target ? e?.target : { value: e };\r\n\r\n        setFormData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n            if (name === 'projectName') {\r\n                updatedState.shortName = createShortName(value);\r\n            }\r\n            return updatedState;\r\n        });\r\n\r\n\r\n        // Reset error for this field\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitCreateUpdateTaskProject = async () => {\r\n        const {\r\n            projectName,\r\n            shortName,\r\n            projectType,\r\n            projectLead,\r\n            assignedTo,\r\n            is_active,\r\n        } = formData\r\n        const params = {\r\n            name: projectName,\r\n            short_name: shortName,\r\n            project_type: projectType?.value,\r\n            project_lead: projectLead?.value,\r\n            assigned_project: multiSelectIDs(assignedTo),\r\n            description: editorData,\r\n            is_active,\r\n        }\r\n        const validationResponse = await validateSchema(addUpdateTaskProjectSchema, params);\r\n        if (validationResponse.isValid) {\r\n\r\n            setErrors({})\r\n            handleCreateUpdateTaskProject(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (selectedTaskProjectData) {\r\n            setFormData({\r\n                projectName: selectedTaskProjectData?.name,\r\n                shortName: selectedTaskProjectData?.short_name,\r\n                projectType: selectedTaskProjectData?.project_type,\r\n                projectLead: selectedTaskProjectData?.project_lead,\r\n                assignedTo: selectedTaskProjectData?.assigned_project,\r\n                is_active: selectedTaskProjectData?.is_active,\r\n\r\n            })\r\n            setEditorData(selectedTaskProjectData?.description)\r\n        }\r\n    }, [selectedTaskProjectData])\r\n\r\n    const resetForm = () => {\r\n        setFormData({\r\n\r\n            projectName: '',\r\n            shortName: '',\r\n            projectType: '',\r\n            projectLead: '',\r\n            assignedTo: '',\r\n            is_active: true,\r\n        })\r\n        setErrors({})\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n                tabIndex={-1}\r\n                style={{\r\n                    visibility: openModel ? 'visible' : 'hidden',\r\n                    width: \"800px\"\r\n                }}\r\n                id=\"interviewDetail\"\r\n            >\r\n                <div className=\"offcanvas-header\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">\r\n                        {selectedTaskProjectData ? t(\"headings.updateTaskProject\") : t(\"headings.createProject\")}\r\n                    </h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                        onClick={() => handleOpenClose()}\r\n                    />\r\n                </div>\r\n                <div className=\"offcanvas-body myRequest \">\r\n                    <div className=\"formPanel\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6\">\r\n                                <Label text={t(\"labels.projectName\")} required={true} />\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.projectName\")}\r\n                                        value={formData?.projectName}\r\n                                        name=\"projectName\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    />\r\n                                    {errors?.name && (\r\n                                        <CustomError text={errors.name} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <Label text={t(\"labels.shortName\")} required={true} />\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.shortName\")}\r\n                                        value={formData?.shortName}\r\n                                        name=\"shortName\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    />\r\n                                    {errors?.short_name && (\r\n                                        <CustomError text={errors.short_name} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"col-md-6\">\r\n                                <Label text={t(\"labels.projectType\")} required={true} />\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustomSelect\r\n                                        data={allProjectTypeList}\r\n                                        placeholder={t(\"placeholders.selectProjectType\")}\r\n                                        value={formData?.projectType || ''}\r\n                                        handleChange={(selectedOption) => handleFromChange(selectedOption, \"projectType\")}\r\n\r\n                                    />\r\n                                    {errors?.project_type && (\r\n                                        <CustomError text={errors.project_type} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"form-group mb-2\">\r\n                                    <Label text={t(\"labels.projectLead\")} required={true} />\r\n                                    <CustomSelect\r\n                                        data={allEmployeeList}\r\n                                        placeholder=\"Select Project Lead\"\r\n                                        value={formData.projectLead}\r\n                                        handleChange={(selectedOption) => handleFromChange(selectedOption, \"projectLead\")}\r\n                                    />\r\n                                    {errors?.project_lead && (\r\n                                        <CustomError text={errors.project_lead} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"form-group mb-2\">\r\n                                    <Label text={t(\"labels.assignedTo\")} required={true} />\r\n                                    <CustomMultiSelect\r\n                                        optionsData={allEmployeeList}\r\n                                        placeholder=\"Select...\"\r\n                                        values={formData.assignedTo}\r\n                                        onChange={(data) => handleFromChange(data, \"assignedTo\")}\r\n                                    />\r\n                                    {errors?.assigned_project && (\r\n                                        <CustomError text={errors.assigned_project} />\r\n                                    )}\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"col-md-12\">\r\n                                <Label text={t(\"labels.description\")} />\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CommonCKEditor\r\n                                        editorData={editorData}\r\n                                        setEditorData={setEditorData}\r\n                                        bodyData={''}\r\n                                        editorSize=\"sm\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"offcanvas-footer\">\r\n                    <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                        <CustomButton\r\n                            text={selectedTaskProjectData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                            classNames={\"btn btn-org-gradient\"}\r\n                            handleClick={() => submitCreateUpdateTaskProject()}\r\n                        // isLoading={selectedTaskProjectData ? updateTaskProjectPending : createTaskProjectPending}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {openModel && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateUpdateTaskProject\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomButton } from '../../../globalComponents'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { taskManagementActions } from '../../../../core/resource/actions'\r\nimport { pagination } from '../../../../utils/Constants.config'\r\nimport ApproveRejectModal from '../../../modal/ApproveRejectModal'\r\nimport { useCustomTranslation } from '../../../../translation'\r\nimport { CustomTable } from '../../../reuseableComponents'\r\nimport { Icon } from '../../../commanComponent'\r\nimport { dateFormate, getBadgeColor, } from '../../../../utils/common'\r\nimport CreateUpdateTaskProject from './CreateUpdateTaskProject'\r\nimport { isPermission } from '../../../../utils/common'\r\n\r\nconst Projects = (props) => {\r\n    const {allProjectTypeList,allEmployeeList}=props\r\n  const dispatch = useDispatch()\r\n  const { t } = useCustomTranslation();\r\n\r\n  const {\r\n    addTaskProjectPending,\r\n    addTaskProjectRes,\r\n    addTaskProjectError,\r\n\r\n    getTaskProjectPending,\r\n    getTaskProjectRes,\r\n    getTaskProjectError,\r\n\r\n    updateTaskProjectPending,\r\n    updateTaskProjectRes,\r\n    updateTaskProjectError,\r\n\r\n    deleteTaskProjectPending,\r\n    deleteTaskProjectRes,\r\n    deleteTaskProjectError,\r\n\r\n  } = useSelector(state => state.taskManagement)\r\n\r\n  const [isOpenCreateUpdateTaskProject, setIsOpenCreateUpdateTaskProject] = useState(false)\r\n  const [selectedTaskProjectData, setSelectedTaskProjectData] = useState('')\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [allTaskProject, setAllTaskProject] = useState({})\r\n  const [isShowDeleteTaskProjectModal, setIsShowDeleteTaskProjectModal] = useState(false)\r\n  const [deleteTaskProjectId, setDeleteTaskProjectId] = useState('')\r\n  const updateTaskProject = isPermission(\"update_task_project\")\r\n  const deleteTaskProject = isPermission(\"delete_task_project\")\r\n\r\n\r\n  /* Create Update TaskProject */\r\n  const toggleCreateUpdateTaskProjectModal = (data) => {\r\n    if (!data) {\r\n      setSelectedTaskProjectData('')\r\n    } else {\r\n      setSelectedTaskProjectData(data)\r\n    }\r\n    setIsOpenCreateUpdateTaskProject(!isOpenCreateUpdateTaskProject)\r\n  }\r\n\r\n  const handleCreateUpdateTaskProject = (params) => {\r\n    if (selectedTaskProjectData) {\r\n      params['_id'] = selectedTaskProjectData?._id || selectedTaskProjectData?.id\r\n      dispatch(taskManagementActions.updateTaskProjectRequest(params));\r\n    }\r\n    else {\r\n      dispatch(taskManagementActions.addTaskProjectRequest(params));\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!addTaskProjectPending) {\r\n      if (addTaskProjectError) {\r\n        dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_ADD_TASK_PROJECT_STORE\"))\r\n        return;\r\n      }\r\n      if (addTaskProjectRes) {\r\n        if (addTaskProjectRes?.code === 200) {\r\n          dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_ADD_TASK_PROJECT_STORE\"))\r\n          dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_GET_TASK_PROJECT_STORE\"))\r\n          dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_GET_ALL_TASK_PROJECT_LIST_STORE\"))\r\n          toggleCreateUpdateTaskProjectModal()\r\n          getAllTaskProject()\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    addTaskProjectRes,\r\n    addTaskProjectError,\r\n    addTaskProjectPending\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (!updateTaskProjectPending) {\r\n      if (updateTaskProjectError) {\r\n        dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_UPDATE_TASK_PROJECT_STORE\"))\r\n        return;\r\n      }\r\n      if (updateTaskProjectRes) {\r\n        if (updateTaskProjectRes?.code === 200) {\r\n          dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_UPDATE_TASK_PROJECT_STORE\"))\r\n          dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_GET_TASK_PROJECT_STORE\"))\r\n          dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_GET_ALL_TASK_PROJECT_LIST_STORE\"))\r\n          getAllTaskProject()\r\n          toggleCreateUpdateTaskProjectModal()\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    updateTaskProjectRes,\r\n    updateTaskProjectError,\r\n    updateTaskProjectPending\r\n  ]);\r\n\r\n\r\n  useEffect(() => {\r\n    getAllTaskProject()\r\n  }, [currentPage])\r\n\r\n  /* Get All TaskProject Data */\r\n  const getAllTaskProject = () => {\r\n    const params = {\r\n      page: currentPage,\r\n      limit: pagination.limit,\r\n    }\r\n    dispatch(taskManagementActions.getTaskProjectRequest(params));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!getTaskProjectPending) {\r\n      if (getTaskProjectError) {\r\n        return;\r\n      }\r\n      if (getTaskProjectRes) {\r\n        if (getTaskProjectRes?.code === 200) {\r\n          setAllTaskProject(getTaskProjectRes?.data)\r\n\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    getTaskProjectRes,\r\n    getTaskProjectError,\r\n    getTaskProjectPending\r\n  ]);\r\n\r\n\r\n  /*  Delete TaskProject   */\r\n  const handleTaskProjectDeleteModal = (id) => {\r\n    if (id) {\r\n      setDeleteTaskProjectId(id)\r\n    }\r\n    setIsShowDeleteTaskProjectModal(!isShowDeleteTaskProjectModal)\r\n  }\r\n\r\n  const handleDeleteTaskProject = (type) => {\r\n    if (type) {\r\n      const params = {\r\n        _id: deleteTaskProjectId\r\n      }\r\n\r\n      // dispatch(taskManagementActions?.deleteTaskProjectRequest(params))\r\n\r\n    } else {\r\n      handleTaskProjectDeleteModal()\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!deleteTaskProjectPending) {\r\n      if (deleteTaskProjectError) {\r\n        // dispatch(taskManagementActions.handleClearTaskProjectStore(\"HANDLE_CLEAR_DELETE_FUNCTION_STORE\"))\r\n        return;\r\n      }\r\n      if (deleteTaskProjectRes) {\r\n        if (deleteTaskProjectRes?.code === 200) {\r\n          handleTaskProjectDeleteModal()\r\n          if (currentPage > 1 && allTaskProject?.data?.length === 1) {\r\n            setCurrentPage((pre => pre -= 1))\r\n          } else {\r\n            getAllTaskProject()\r\n          }\r\n          // dispatch(taskManagementActions.handleClearTaskProjectStore(\"HANDLE_CLEAR_DELETE_FUNCTION_STORE\"))\r\n\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    deleteTaskProjectRes,\r\n    deleteTaskProjectError,\r\n    deleteTaskProjectPending\r\n  ]);\r\n\r\n  const scopedSlots = useMemo(() => ({\r\n    sn: (_, index) => (\r\n      <span>{index + 1}</span>\r\n    ),\r\n    is_active: item => (\r\n      <span\r\n        className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n      >\r\n        {item.is_active ? \"Active\" : \"Inactive\"}\r\n      </span>\r\n    ),\r\n    created_at: item => dateFormate(item.created_at),\r\n    action: item => (\r\n\r\n      (updateTaskProject|| deleteTaskProject)\r\n      && <div className=\"btn-group actionDrp\">\r\n        <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n          data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n          <i className=\"bi bi-three-dots-vertical\"></i>\r\n        </button>\r\n        <ul className=\"dropdown-menu\">\r\n          {updateTaskProject && <li>\r\n            <span className=\"dropdown-item\"\r\n              onClick={() => toggleCreateUpdateTaskProjectModal(item)}\r\n            >\r\n              <Icon className={\"bi bi-pencil-square me-1\"} />Update</span>\r\n          </li>}\r\n          { deleteTaskProject && <li>\r\n            <span className=\"dropdown-item\"\r\n              onClick={() => handleTaskProjectDeleteModal(item._id)}\r\n            >\r\n              <Icon className={\"bi bi-trash me-1\"} />Delete</span>\r\n          </li>}\r\n        </ul>\r\n      </div>\r\n\r\n    )\r\n  }), [toggleCreateUpdateTaskProjectModal]);\r\n\r\n\r\n  const fields = [\r\n    { key: 'sn', label: 'S.N' },\r\n    { key: 'name', label: 'Project Name  ' },\r\n    { key: 'is_active', label: 'Status' },\r\n    { key: 'created_at', label: 'Created At' },\r\n    ((updateTaskProject || deleteTaskProject) && { key: 'action', label: 'Action' })\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <div className='cardBox myRequest mb-3 employeeHistory'>\r\n        <div className=\"d-flex align-items-center justify-content-between gap-3\">\r\n          <div className=\"cardHead d-flex\">\r\n            <img src=\"images/myrequest-icon.svg\" alt=\"\" width={35} />\r\n            <h4 className=\"ms-2 \">Project</h4>\r\n          </div>\r\n          <div>\r\n            <CustomButton\r\n              classNames={\"btn btn-primary gradientBg\"}\r\n              handleClick={() => toggleCreateUpdateTaskProjectModal()}\r\n              text={\"Project\"}\r\n              icon={<Icon className={\"fa fa-plus\"} />}\r\n            // slug={\"project_category\"}\r\n            />\r\n\r\n          </div>\r\n        </div>\r\n        <CustomTable\r\n          data={allTaskProject?.data}\r\n          fields={fields}\r\n          isLoading={getTaskProjectPending}\r\n          pagination={true}\r\n          currentPage={currentPage}\r\n          setCurrentPage={setCurrentPage}\r\n          totalPages={allTaskProject?.totalPages}\r\n          isHeader={false}\r\n          tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n          scopedSlots={scopedSlots}\r\n        />\r\n      </div>\r\n\r\n      {isOpenCreateUpdateTaskProject && <CreateUpdateTaskProject\r\n        selectedTaskProjectData={selectedTaskProjectData}\r\n        openModel={isOpenCreateUpdateTaskProject}\r\n        handleOpenClose={toggleCreateUpdateTaskProjectModal}\r\n        handleCreateUpdateTaskProject={handleCreateUpdateTaskProject}\r\n        allProjectTypeList={allProjectTypeList}\r\n        allEmployeeList={allEmployeeList}\r\n      />}\r\n\r\n\r\n      {isShowDeleteTaskProjectModal && (\r\n        <ApproveRejectModal\r\n          onApproveReject={handleDeleteTaskProject}\r\n          isShow={isShowDeleteTaskProjectModal}\r\n          desc={t(\"alerts.deletePopup.desc\").replace('$1', \"Project Category\")}\r\n          btnRightLoading={deleteTaskProjectPending}\r\n          btnTextRight={t(\"btns.delete\")}\r\n          btnTextLeft={t(\"btns.cancel\")}\r\n\r\n        />)}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Projects\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport ProjectType from './projectType/ProjectType'\r\nimport { CustomCardHeaders } from '../../commanComponent'\r\nimport ProjectCategory from './projectCategory/ProjectCategory'\r\nimport { departmentAction, employeeActions } from '../../../core/resource/actions'\r\nimport Projects from './project/Projects'\r\nconst projectData = [\r\n    {\r\n        label: \"Projects\",\r\n        value: \"projects\",\r\n        totalCount: 1,\r\n        imgUrl: 'projectIcon.png',\r\n        permissionId: \"task_project_tab\"\r\n    },\r\n\r\n    {\r\n        label: \"Project Type\",\r\n        value: \"project_type\",\r\n        totalCount: 2,\r\n        imgUrl: 'networking.png',\r\n        permissionId: \"project_type\"\r\n\r\n    },\r\n    // {\r\n    //     label: \"Project Category \",\r\n    //     value: \"project_category\",\r\n    //     totalCount: 1,\r\n    //     imgUrl: 'settings.png',\r\n    //     permissionId: \"project_category\"\r\n    // },\r\n\r\n\r\n\r\n\r\n]\r\n\r\nconst TaskProject = () => {\r\n    const dispatch = useDispatch()\r\n    const [isActiveTab, setIsActiveTab] = useState('projects')\r\n    const [allDepartments, setAllDepartments] = useState([])\r\n    const [allProjectTypeList, setAllProjectTypeList] = useState([])\r\n    const [subDepartmentByDepartmentData, setSubDepartmentByDepartmentData] = useState([])\r\n    const [allEmployeeList, setAllEmployeeList] = useState([])\r\n    const [headerData, setHeaderData] = useState(projectData)\r\n    const [mappingCount, setMappingCount] = useState({\r\n        departmentCount: 0,\r\n        designationCount: 0,\r\n        projectCount: 0,\r\n        functionCount: 0\r\n\r\n    })\r\n    const {\r\n        getAllProjectTypeListPending,\r\n        getAllProjectTypeListRes,\r\n        getAllProjectTypeListError,\r\n\r\n    } = useSelector(state => state.department)\r\n\r\n    const {\r\n        getAllEmployeeRes,\r\n        getAllEmployeeError,\r\n        getAllEmployeePending\r\n\r\n    } = useSelector(state => state.employee)\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        getAllProjectTypeList()\r\n        getAllEmployee()\r\n    }, [])\r\n\r\n    /* Get All Project Type List */\r\n    const getAllProjectTypeList = () => {\r\n        const getAllProjectTypeList = getAllProjectTypeListRes?.data\r\n        if (!getAllProjectTypeList?.length) {\r\n            dispatch(departmentAction.getAllProjectTypeListRequest());\r\n        } else {\r\n            setAllProjectTypeList(getAllProjectTypeList)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllProjectTypeListPending) {\r\n            if (getAllProjectTypeListError) {\r\n                return;\r\n            }\r\n            if (getAllProjectTypeListRes) {\r\n                if (getAllProjectTypeListRes?.code === 200) {\r\n                    const departmentResponse = getAllProjectTypeListRes?.data\r\n                    setAllProjectTypeList(departmentResponse)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllProjectTypeListRes,\r\n        getAllProjectTypeListError,\r\n        getAllProjectTypeListPending\r\n    ]);\r\n\r\n    /* Get All Employee List*/\r\n    const getAllEmployee = () => {\r\n        dispatch(employeeActions.getAllEmployeeRequest())\r\n    }\r\n    useEffect(() => {\r\n        if (!getAllEmployeePending) {\r\n            if (getAllEmployeeError) {\r\n                return;\r\n            }\r\n            if (getAllEmployeeRes) {\r\n                if (getAllEmployeeRes?.code === 200) {\r\n\r\n                    setAllEmployeeList(getAllEmployeeRes?.data)\r\n                  \r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllEmployeeRes,\r\n        getAllEmployeeError,\r\n        getAllEmployeePending\r\n    ]);\r\n\r\n\r\n\r\n    // /* Get All Employee List*/\r\n    // const getSubDepartmentByDepartment = (id) => {\r\n    //     const payload ={\r\n    //         department_id:id\r\n    //     }\r\n    //     dispatch(departmentAction.getSubDepartmentByDepartmentRequest(payload))\r\n    // }\r\n    // useEffect(() => {\r\n    //     if (!getSubDepartmentByDepartmentPending) {\r\n    //         if (getSubDepartmentByDepartmentError) {\r\n    //             return;\r\n    //         }\r\n    //         if (getSubDepartmentByDepartmentRes) {\r\n    //             if (getSubDepartmentByDepartmentRes?.code === 200) {\r\n\r\n    //                 setSubDepartmentByDepartmentData(getSubDepartmentByDepartmentRes?.data)\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }, [\r\n    //     getSubDepartmentByDepartmentRes,\r\n    //     getSubDepartmentByDepartmentError,\r\n    //     getSubDepartmentByDepartmentPending\r\n    // ]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <CustomCardHeaders\r\n                isActiveTab={isActiveTab}\r\n                setIsActiveTab={setIsActiveTab}\r\n                data={headerData}\r\n            />\r\n            {isActiveTab === \"projects\" && <Projects\r\n                allProjectTypeList={allProjectTypeList}\r\n            // allDepartments={allDepartments}\r\n            allEmployeeList={allEmployeeList}\r\n            />}\r\n            {isActiveTab === \"project_type\" && <ProjectType />}\r\n            {/* {isActiveTab === \"project_category\" && <ProjectCategory\r\n                allDepartments={allDepartments}\r\n                allEmployeeList={allEmployeeList}\r\n            />} */}\r\n\r\n            {/* {isActiveTab === \"project\" && <Projects\r\n                allDepartments={allDepartments}\r\n                allEmployeeList={allEmployeeList}\r\n                getSubDepartmentByDepartment={getSubDepartmentByDepartment}\r\n                subDepartmentByDepartmentData={subDepartmentByDepartmentData}\r\n            />}\r\n            */}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TaskProject\r\n"],"names":["props","t","useCustomTranslation","selectedProjectTypeData","openModel","handleOpenClose","handleCreateUpdateProjectType","errors","setErrors","useState","formData","setFormData","projectType","shortName","is_active","handleFromChange","e","fieldName","_e$target","name","target","value","type","checked","prevState","updatedState","createShortName","prevErrors","undefined","useEffect","resetForm","short_name","_jsxs","_Fragment","children","className","tabIndex","style","visibility","width","id","_jsx","onClick","Label","text","required","Input","placeholder","onChange","CustomError","CustCheckbox","handleChange","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","addUpdateProjectTypeSchema","isValid","params","submitCreateUpdateProjectType","allDepartments","dispatch","useDispatch","allEmployeeList","setAllEmployeeList","addProjectTypePending","addProjectTypeRes","addProjectTypeError","getProjectTypePending","getProjectTypeRes","getProjectTypeError","updateProjectTypePending","updateProjectTypeRes","updateProjectTypeError","deleteProjectTypePending","deleteProjectTypeRes","deleteProjectTypeError","useSelector","state","department","isOpenCreateUpdateProjectType","setIsOpenCreateUpdateProjectType","setSelectedProjectTypeData","currentPage","setCurrentPage","allProjectTypes","setAllProjectTypes","isShowDeleteProjectTypeModal","setIsShowDeleteProjectTypeModal","deleteProjectTypeId","setDeleteProjectTypeId","filteredDropdownData","setFilteredDropdownData","allProjectListData","setAllProjectListData","updateProjectType","isPermission","deleteProjectType","toggleCreateUpdateProjectTypeModal","data","departmentAction","handleClearDepartmentStore","code","getAllProjectTypes","page","limit","pagination","getProjectTypeRequest","getAllProjectTypeData","handleProjectTypeDeleteModal","_allProjectTypes$data","length","pre","scopedSlots","useMemo","sn","_","index","item","getBadgeColor","created_at","dateFormate","action","Icon","_id","fields","key","label","src","alt","icon","CustomTable","isLoading","totalPages","isHeader","tableStyle","padding","boxShadow","CreateUpdateProjectType","updateProjectTypeRequest","addProjectTypeRequest","ApproveRejectModal","onApproveReject","deleteProjectTypeRequest","isShow","desc","replace","btnRightLoading","btnTextRight","btnTextLeft","selectedTaskProjectData","handleCreateUpdateTaskProject","allProjectTypeList","editorData","setEditorData","projectName","projectLead","assignedTo","project_type","project_lead","assigned_project","description","CustomSelect","selectedOption","CustomMultiSelect","optionsData","values","CommonCKEditor","bodyData","editorSize","multiSelectIDs","addUpdateTaskProjectSchema","submitCreateUpdateTaskProject","addTaskProjectPending","addTaskProjectRes","addTaskProjectError","getTaskProjectPending","getTaskProjectRes","getTaskProjectError","updateTaskProjectPending","updateTaskProjectRes","updateTaskProjectError","deleteTaskProjectPending","deleteTaskProjectRes","deleteTaskProjectError","taskManagement","isOpenCreateUpdateTaskProject","setIsOpenCreateUpdateTaskProject","setSelectedTaskProjectData","allTaskProject","setAllTaskProject","isShowDeleteTaskProjectModal","setIsShowDeleteTaskProjectModal","deleteTaskProjectId","setDeleteTaskProjectId","updateTaskProject","deleteTaskProject","toggleCreateUpdateTaskProjectModal","taskManagementActions","handleClearTaskStore","getAllTaskProject","getTaskProjectRequest","handleTaskProjectDeleteModal","_allTaskProject$data","CreateUpdateTaskProject","updateTaskProjectRequest","addTaskProjectRequest","projectData","totalCount","imgUrl","permissionId","TaskProject","isActiveTab","setIsActiveTab","setAllDepartments","setAllProjectTypeList","subDepartmentByDepartmentData","setSubDepartmentByDepartmentData","headerData","setHeaderData","mappingCount","setMappingCount","departmentCount","designationCount","projectCount","functionCount","getAllProjectTypeListPending","getAllProjectTypeListRes","getAllProjectTypeListError","getAllEmployeeRes","getAllEmployeeError","getAllEmployeePending","employee","getAllProjectTypeList","getAllEmployee","getAllProjectTypeListRequest","departmentResponse","employeeActions","getAllEmployeeRequest","CustomCardHeaders","Projects","ProjectType"],"sourceRoot":""}