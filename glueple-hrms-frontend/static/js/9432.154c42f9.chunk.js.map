{"version":3,"file":"static/js/9432.154c42f9.chunk.js","mappings":"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","sources":["components/TaskManagement/TaskProject/projectType/CreateUpdateProjectType.js","components/TaskManagement/TaskProject/projectType/ProjectType.js","components/TaskManagement/TaskProject/projectCategory/CreateUpdateProjectCategory.js","components/TaskManagement/TaskProject/projectCategory/ProjectCategory.js","components/TaskManagement/TaskProject/TaskProject.js"],"sourcesContent":["\r\nimport { CustomButton, CustomError } from '../../../globalComponents'\r\nimport { CustCheckbox, Input, Label } from '../../../commanComponent'\r\nimport { validateSchema } from '../../../../utils/ValidationHelper'\r\nimport { addUpdateProjectTypeSchema } from '../../../../utils/ValidationSchema'\r\nimport { useCustomTranslation } from '../../../../translation'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst CreateUpdateProjectType = (props) => {\r\n  // const { createProjectTypePending, updateProjectTypePending } = useSelector(state => state?.project)\r\n  const { t } = useCustomTranslation()\r\n  const {\r\n    selectedProjectTypeData,\r\n    openModel,\r\n    handleOpenClose,\r\n    handleCreateUpdateProjectType,\r\n  } = props\r\n  const [errors, setErrors] = useState({})\r\n  const [formData, setFormData] = useState({\r\n    projectType: '',\r\n    is_active: true\r\n  })\r\n\r\n  const handleFromChange = (e, fieldName) => {\r\n    const name = fieldName || e.target?.name;\r\n    const { value, type, checked } = e.target ? e.target : { value: e };\r\n\r\n    setFormData(prevState => {\r\n      const updatedState = {\r\n        ...prevState,\r\n        [name]: type === 'checkbox' ? checked : value,\r\n      };\r\n\r\n      return updatedState;\r\n    });\r\n\r\n    // Reset error for this field\r\n    setErrors(prevErrors => ({\r\n      ...prevErrors,\r\n      [name]: undefined,\r\n    }));\r\n  };\r\n\r\n  const submitCreateUpdateProjectType = async () => {\r\n    const validationResponse = await validateSchema(addUpdateProjectTypeSchema, formData);\r\n    if (validationResponse.isValid) {\r\n      const {\r\n\r\n        projectType,\r\n        is_active\r\n      } = formData\r\n      const params = {\r\n        projectType,\r\n        is_active\r\n\r\n      }\r\n      setErrors({})\r\n      handleCreateUpdateProjectType(params)\r\n    } else {\r\n      setErrors(validationResponse.errors);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    return (() => {\r\n      resetForm()\r\n    })\r\n  }, [openModel])\r\n\r\n  useEffect(() => {\r\n    if (selectedProjectTypeData) {\r\n      setFormData({\r\n        projectType: selectedProjectTypeData?.projectType,\r\n        is_active: selectedProjectTypeData?.is_active,\r\n\r\n      })\r\n    }\r\n  }, [selectedProjectTypeData])\r\n\r\n  const resetForm = () => {\r\n    setFormData({\r\n      projectType: '',\r\n      is_active: true\r\n\r\n    })\r\n    setErrors({})\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n        tabIndex={-1}\r\n        style={{\r\n          visibility: openModel ? 'visible' : 'hidden',\r\n          width: \"800px\"\r\n        }}\r\n        id=\"interviewDetail\"\r\n      >\r\n        <div className=\"offcanvas-header\">\r\n          <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">\r\n            {selectedProjectTypeData ? t(\"headings.updateProjectType\") : t(\"headings.createProjectType\")}\r\n          </h5>\r\n          <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n            onClick={() => handleOpenClose()}\r\n          />\r\n        </div>\r\n\r\n\r\n        <div className=\"offcanvas-body myRequest \">\r\n          <div className=\"formPanel\">\r\n            <div className=\"row\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-3\">\r\n                  <Label text={t(\"labels.projectType\")} required={true} />\r\n\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                  <div className=\"form-group mb-3\">\r\n                    <Input\r\n                      type=\"text\"\r\n                      placeholder={t(\"placeholders.projectType\")}\r\n                      value={formData?.projectType}\r\n                      name=\"projectType\"\r\n                      onChange={(e) => handleFromChange(e)}\r\n                    />\r\n                    {errors?.projectType && (\r\n                      <CustomError text={errors.projectType} />\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"row\">\r\n                <div className=\"col-md-3\">\r\n                  <div className=\"form-group mb-3\">\r\n                    <Label text={t(\"labels.isActive\")} />\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-md-9\">\r\n                  <div className=\"form-group mb-3\">\r\n                    <CustCheckbox\r\n\r\n                      key={\"is_active\"}\r\n                      id={`is_active`}\r\n                      // label={\"Active\"}\r\n                      checked={formData?.is_active}\r\n                      handleChange={(e) => handleFromChange(e)}\r\n                      name={\"is_active\"}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n        <div className=\"offcanvas-footer\">\r\n          <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n            <CustomButton\r\n              text={selectedProjectTypeData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n              classNames={\"btn btn-org-gradient\"}\r\n              handleClick={() => submitCreateUpdateProjectType()}\r\n            // isLoading={selectedProjectTypeData ? updateProjectTypePending : createProjectTypePending}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {openModel && <div className=\"modal-backdrop fade show\"></div>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CreateUpdateProjectType\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomButton } from '../../../globalComponents'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { departmentAction, dropdownMasterActions, employeeActions } from '../../../../core/resource/actions'\r\nimport { pagination } from '../../../../utils/Constants.config'\r\nimport ApproveRejectModal from '../../../modal/ApproveRejectModal'\r\nimport { useCustomTranslation } from '../../../../translation'\r\nimport { CustomTable } from '../../../reuseableComponents'\r\nimport { Icon } from '../../../commanComponent'\r\nimport { dateFormate, getBadgeColor, setFilterDropdownData } from '../../../../utils/common'\r\nimport CreateUpdateProjectType from './CreateUpdateProjectType'\r\nimport { isPermission } from '../../../../utils/common'\r\n\r\nconst ProjectType = (props) => {\r\n    const { allDepartments, } = props\r\n    const dispatch = useDispatch()\r\n    const { t } = useCustomTranslation();\r\n    const [allEmployeeList, setAllEmployeeList] = useState([])\r\n\r\n    const {\r\n        addProjectTypePending,\r\n        addProjectTypeRes,\r\n        addProjectTypeError,\r\n\r\n        getProjectTypePending,\r\n        getProjectTypeRes,\r\n        getProjectTypeError,\r\n\r\n        updateProjectTypePending,\r\n        updateProjectTypeRes,\r\n        updateProjectTypeError,\r\n\r\n        deleteProjectTypePending,\r\n        deleteProjectTypeRes,\r\n        deleteProjectTypeError,\r\n    } = useSelector(state => state.department)\r\n\r\n\r\n    const [isOpenCreateUpdateProjectType, setIsOpenCreateUpdateProjectType] = useState(false)\r\n    const [selectedProjectTypeData, setSelectedProjectTypeData] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [allProjectTypes, setAllProjectTypes] = useState({})\r\n    const [isShowDeleteProjectTypeModal, setIsShowDeleteProjectTypeModal] = useState(false)\r\n    const [deleteProjectTypeId, setDeleteProjectTypeId] = useState('')\r\n    const [filteredDropdownData, setFilteredDropdownData] = useState('')\r\n    const [allProjectListData, setAllProjectListData] = useState([])\r\n    const updateProjectType = isPermission(\"update_task\")\r\n    const deleteProjectType = isPermission(\"delete_task\")\r\n\r\n\r\n    /* Create Update ProjectType */\r\n    const toggleCreateUpdateProjectTypeModal = (data) => {\r\n        if (!data) {\r\n            setSelectedProjectTypeData('')\r\n        } else {\r\n            setSelectedProjectTypeData(data)\r\n        }\r\n        setIsOpenCreateUpdateProjectType(!isOpenCreateUpdateProjectType)\r\n    }\r\n\r\n    const handleCreateUpdateProjectType = (params) => {\r\n        if (selectedProjectTypeData) {\r\n            params['_id'] = selectedProjectTypeData?._id || selectedProjectTypeData?.id\r\n            dispatch(departmentAction.updateProjectTypeRequest(params));\r\n        }\r\n        else {\r\n            dispatch(departmentAction.addProjectTypeRequest(params));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!addProjectTypePending) {\r\n            if (addProjectTypeError) {\r\n                dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_ADD_PROJECT_TYPE_STORE\"))\r\n                return;\r\n            }\r\n            if (addProjectTypeRes) {\r\n                if (addProjectTypeRes?.code === 200) {\r\n                    dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_ADD_PROJECT_TYPE_STORE\"))\r\n                    dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_GET_ALL_PROJECT_TYPE_LIST_STORE\"))\r\n                    dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_GET_PROJECT_TYPE_STORE\"))\r\n                    toggleCreateUpdateProjectTypeModal()\r\n                    getAllProjectTypes()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        addProjectTypeRes,\r\n        addProjectTypeError,\r\n        addProjectTypePending\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (!updateProjectTypePending) {\r\n            if (updateProjectTypeError) {\r\n                dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_UPDATE_PROJECT_TYPE_STORE\"))\r\n                return;\r\n            }\r\n            if (updateProjectTypeRes) {\r\n                if (updateProjectTypeRes?.code === 200) {\r\n                 dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_UPDATE_PROJECT_TYPE_STORE\"))\r\n                    dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_GET_ALL_PROJECT_TYPE_LIST_STORE\"))\r\n                    dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_GET_PROJECT_TYPE_STORE\"))\r\n                    getAllProjectTypes()\r\n                    toggleCreateUpdateProjectTypeModal()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updateProjectTypeRes,\r\n        updateProjectTypeError,\r\n        updateProjectTypePending\r\n    ]);\r\n\r\n\r\n    useEffect(() => {\r\n        getAllProjectTypes()\r\n    }, [currentPage])\r\n\r\n    /* Get All ProjectTypes Data */\r\n    const getAllProjectTypes = () => {\r\n        const params = {\r\n            page: currentPage,\r\n            limit: pagination.limit,\r\n        }\r\n        dispatch(departmentAction.getProjectTypeRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getProjectTypePending) {\r\n            if (getProjectTypeError) {\r\n                return;\r\n            }\r\n            if (getProjectTypeRes) {\r\n                if (getProjectTypeRes?.code === 200) {\r\n                    const getAllProjectTypeData = getProjectTypeRes?.data\r\n                    setAllProjectTypes(getAllProjectTypeData)\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getProjectTypeRes,\r\n        getProjectTypeError,\r\n        getProjectTypePending\r\n    ]);\r\n\r\n\r\n    /*  Delete ProjectType   */\r\n    const handleProjectTypeDeleteModal = (id) => {\r\n        if (id) {\r\n            setDeleteProjectTypeId(id)\r\n        }\r\n        setIsShowDeleteProjectTypeModal(!isShowDeleteProjectTypeModal)\r\n    }\r\n\r\n    const handleDeleteProjectType = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deleteProjectTypeId\r\n            }\r\n            // dispatch(departmentAction?.deleteProjectTypeRequest(params))\r\n\r\n        } else {\r\n            handleProjectTypeDeleteModal()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!deleteProjectTypePending) {\r\n            if (deleteProjectTypeError) {\r\n                // dispatch(departmentAction.handleClearProjectTypeStore(\"HANDLE_CLEAR_DELETE_FUNCTION_STORE\"))\r\n                return;\r\n            }\r\n            if (deleteProjectTypeRes) {\r\n                if (deleteProjectTypeRes?.code === 200) {\r\n                    handleProjectTypeDeleteModal()\r\n                    if (currentPage > 1 && allProjectTypes?.data?.length === 1) {\r\n                        setCurrentPage((pre => pre -= 1))\r\n                    } else {\r\n                        getAllProjectTypes()\r\n                    }\r\n                    // dispatch(departmentAction.handleClearProjectTypeStore(\"HANDLE_CLEAR_DELETE_FUNCTION_STORE\"))\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        deleteProjectTypeRes,\r\n        deleteProjectTypeError,\r\n        deleteProjectTypePending\r\n    ]);\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        created_at: item => dateFormate(item.created_at),\r\n        action: item => (\r\n\r\n            (item?.emp_count === 0 || updateProjectType)\r\n            && <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    {updateProjectType && <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => toggleCreateUpdateProjectTypeModal(item)}\r\n                        >\r\n                            <Icon className={\"bi bi-pencil-square me-1\"} />Update</span>\r\n                    </li>}\r\n                    {item?.emp_count === 0 && deleteProjectType && <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleProjectTypeDeleteModal(item._id)}\r\n                        >\r\n                            <Icon className={\"bi bi-trash me-1\"} />Delete</span>\r\n                    </li>}\r\n                </ul>\r\n            </div>\r\n\r\n        )\r\n    }), [toggleCreateUpdateProjectTypeModal]);\r\n\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'name', label: 'Project Type Name' },\r\n        { key: 'is_active', label: 'Status' },\r\n        { key: 'created_at', label: 'Created At' },\r\n        ((updateProjectType || deleteProjectType) && { key: 'action', label: 'Action' })\r\n    ];\r\n\r\n    return (\r\n        <>\r\n            <div className='cardBox myRequest mb-3 employeeHistory'>\r\n                <div className=\"d-flex align-items-center justify-content-between gap-3\">\r\n                    <div className=\"cardHead d-flex\">\r\n                        <img src=\"images/myrequest-icon.svg\" alt=\"\" width={35} />\r\n                        <h4 className=\"ms-2 \">Project Types</h4>\r\n                    </div>\r\n                    <div>\r\n                        <CustomButton\r\n                            classNames={\"btn btn-primary gradientBg\"}\r\n                            handleClick={() => toggleCreateUpdateProjectTypeModal()}\r\n                            text={\"Project Type\"}\r\n                            icon={<Icon className={\"fa fa-plus\"} />}\r\n                        // slug={\"create_task\"}\r\n                        />\r\n\r\n                    </div>\r\n                </div>\r\n                <CustomTable\r\n                    data={allProjectTypes?.data}\r\n                    fields={fields}\r\n                    isLoading={getProjectTypePending}\r\n                    pagination={true}\r\n                    currentPage={currentPage}\r\n                    setCurrentPage={setCurrentPage}\r\n                    totalPages={allProjectTypes?.totalPages}\r\n                    isHeader={false}\r\n                    tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n                    scopedSlots={scopedSlots}\r\n                />\r\n            </div>\r\n\r\n            {isOpenCreateUpdateProjectType && <CreateUpdateProjectType\r\n                openModel={isOpenCreateUpdateProjectType}\r\n                handleOpenClose={toggleCreateUpdateProjectTypeModal}\r\n                handleCreateUpdateProjectType={handleCreateUpdateProjectType}\r\n                selectedProjectTypeData={selectedProjectTypeData}\r\n                allProjectListData={allProjectListData}\r\n                allEmployeeList={allEmployeeList}\r\n                filteredDropdownData={filteredDropdownData}\r\n            />}\r\n\r\n\r\n            {isShowDeleteProjectTypeModal && (\r\n                <ApproveRejectModal\r\n                    onApproveReject={handleDeleteProjectType}\r\n                    isShow={isShowDeleteProjectTypeModal}\r\n                    desc={t(\"alerts.deletePopup.desc\").replace('$1', \"ProjectType\")}\r\n                    btnRightLoading={deleteProjectTypePending}\r\n                    btnTextRight={t(\"btns.delete\")}\r\n                    btnTextLeft={t(\"btns.cancel\")}\r\n\r\n                />)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProjectType\r\n","\r\nimport { CustomButton, CustomError } from '../../../globalComponents'\r\nimport { CustCheckbox, Input, Label } from '../../../commanComponent'\r\nimport { validateSchema } from '../../../../utils/ValidationHelper'\r\nimport { addUpdateCategorySchema } from '../../../../utils/ValidationSchema'\r\nimport { useCustomTranslation } from '../../../../translation'\r\nimport { useEffect, useState } from 'react'\r\n\r\nconst CreateUpdateProjectCategory = (props) => {\r\n    // const { createCategoryPending, updateCategoryPending } = useSelector(state => state?.project)\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        selectedCategoryData,\r\n        openModel,\r\n        handleOpenClose,\r\n        handleCreateUpdateCategory,\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [formData, setFormData] = useState({\r\n        categoryName: '',\r\n        is_active:true\r\n    })\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e.target ? e.target : { value: e };\r\n\r\n        setFormData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n\r\n            return updatedState;\r\n        });\r\n\r\n        // Reset error for this field\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitCreateUpdateCategory = async () => {\r\n        const validationResponse = await validateSchema(addUpdateCategorySchema, formData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n       \r\n                categoryName,\r\n          \r\n            } = formData\r\n            const params = {\r\n               \r\n                categoryName,\r\n           \r\n\r\n            }\r\n            setErrors({})\r\n            handleCreateUpdateCategory(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (selectedCategoryData) {\r\n            setFormData({\r\n \r\n                categoryName: selectedCategoryData?.categoryName,\r\n        \r\n            })\r\n        }\r\n    }, [selectedCategoryData])\r\n\r\n    const resetForm = () => {\r\n        setFormData({\r\n            categoryName: '',\r\n\r\n        })\r\n        setErrors({})\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n                tabIndex={-1}\r\n                style={{\r\n                    visibility: openModel ? 'visible' : 'hidden',\r\n                    width: \"800px\"\r\n                }}\r\n                id=\"interviewDetail\"\r\n            >\r\n                <div className=\"offcanvas-header\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">\r\n                        {selectedCategoryData ? t(\"headings.updateCategory\") : t(\"headings.createCategory\")}\r\n                    </h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                        onClick={() => handleOpenClose()}\r\n                    />\r\n                </div>\r\n\r\n\r\n                <div className=\"offcanvas-body myRequest \">\r\n                    <div className=\"formPanel\">\r\n                        <div className=\"row\">\r\n                            <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <Label text={t(\"labels.categoryName\")} required={true} />\r\n                               \r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                 <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.categoryName\")}\r\n                                        value={formData?.categoryName}\r\n                                        name=\"categoryName\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    />\r\n                                    {errors?.categoryName && (\r\n                                        <CustomError text={errors.categoryName} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            </div>\r\n                            <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.isActive\")} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustCheckbox\r\n\r\n                                        key={\"is_active\"}\r\n                                        id={`is_active`}\r\n                                        // label={\"Active\"}\r\n                                        checked={formData?.is_active}\r\n                                        handleChange={(e) => handleFromChange(e)}\r\n                                        name={\"is_active\"}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"offcanvas-footer\">\r\n                    <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                        <CustomButton\r\n                            text={selectedCategoryData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                            classNames={\"btn btn-org-gradient\"}\r\n                            handleClick={() => submitCreateUpdateCategory()}\r\n                        // isLoading={selectedCategoryData ? updateCategoryPending : createCategoryPending}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {openModel && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateUpdateProjectCategory\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomButton } from '../../../globalComponents'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { departmentAction } from '../../../../core/resource/actions'\r\nimport { pagination } from '../../../../utils/Constants.config'\r\nimport ApproveRejectModal from '../../../modal/ApproveRejectModal'\r\nimport { useCustomTranslation } from '../../../../translation'\r\nimport { CustomTable } from '../../../reuseableComponents'\r\nimport { Icon } from '../../../commanComponent'\r\nimport { dateFormate, getBadgeColor, } from '../../../../utils/common'\r\nimport CreateUpdateProjectCategory from './CreateUpdateProjectCategory'\r\nimport { isPermission } from '../../../../utils/common'\r\n\r\nconst ProjectCategory = () => {\r\n  const dispatch = useDispatch()\r\n  const { t } = useCustomTranslation();\r\n\r\n  const {\r\n    addProjectCategoryPending,\r\n    addProjectCategoryRes,\r\n    addProjectCategoryError,\r\n\r\n    getProjectCategoryPending,\r\n    getProjectCategoryRes,\r\n    getProjectCategoryError,\r\n\r\n    updateProjectCategoryPending,\r\n    updateProjectCategoryRes,\r\n    updateProjectCategoryError,\r\n\r\n    deleteProjectCategoryPending,\r\n    deleteProjectCategoryRes,\r\n    deleteProjectCategoryError,\r\n\r\n  } = useSelector(state => state.department)\r\n\r\n  const [isOpenCreateUpdateProjectCategory, setIsOpenCreateUpdateProjectCategory] = useState(false)\r\n  const [selectedProjectCategoryData, setSelectedProjectCategoryData] = useState('')\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [allProjectCategory, setAllProjectCategory] = useState({})\r\n  const [isShowDeleteProjectCategoryModal, setIsShowDeleteProjectCategoryModal] = useState(false)\r\n  const [deleteProjectCategoryId, setDeleteProjectCategoryId] = useState('')\r\n  const updateProjectCategory = isPermission(\"update_task\")\r\n  const deleteProjectCategory = isPermission(\"delete_task\")\r\n\r\n\r\n  /* Create Update ProjectCategory */\r\n  const toggleCreateUpdateProjectCategoryModal = (data) => {\r\n    if (!data) {\r\n      setSelectedProjectCategoryData('')\r\n    } else {\r\n      setSelectedProjectCategoryData(data)\r\n    }\r\n    setIsOpenCreateUpdateProjectCategory(!isOpenCreateUpdateProjectCategory)\r\n  }\r\n\r\n  const handleCreateUpdateProjectCategory = (params) => {\r\n    if (selectedProjectCategoryData) {\r\n      params['_id'] = selectedProjectCategoryData?._id || selectedProjectCategoryData?.id\r\n      dispatch(departmentAction.updateProjectCategoryRequest(params));\r\n    }\r\n    else {\r\n      dispatch(departmentAction.addProjectCategoryRequest(params));\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!addProjectCategoryPending) {\r\n      if (addProjectCategoryError) {\r\n        dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_ADD_PROJECT_CATEGORY_STORE\"))\r\n        return;\r\n      }\r\n      if (addProjectCategoryRes) {\r\n        if (addProjectCategoryRes?.code === 200) {\r\n          dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_ADD_PROJECT_CATEGORY_STORE\"))\r\n          dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_GET_PROJECT_CATEGORY_STORE\"))\r\n          dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_GET_ALL_PROJECT_CATEGORY_LIST_STORE\"))\r\n          toggleCreateUpdateProjectCategoryModal()\r\n          getAllProjectCategory()\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    addProjectCategoryRes,\r\n    addProjectCategoryError,\r\n    addProjectCategoryPending\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (!updateProjectCategoryPending) {\r\n      if (updateProjectCategoryError) {\r\n        dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_UPDATE_PROJECT_CATEGORY_STORE\"))\r\n        return;\r\n      }\r\n      if (updateProjectCategoryRes) {\r\n        if (updateProjectCategoryRes?.code === 200) {\r\n          dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_UPDATE_PROJECT_CATEGORY_STORE\"))\r\n          dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_GET_PROJECT_CATEGORY_STORE\"))\r\n          dispatch(departmentAction.handleClearDepartmentStore(\"HANDLE_CLEAR_GET_ALL_PROJECT_CATEGORY_LIST_STORE\"))\r\n          getAllProjectCategory()\r\n          toggleCreateUpdateProjectCategoryModal()\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    updateProjectCategoryRes,\r\n    updateProjectCategoryError,\r\n    updateProjectCategoryPending\r\n  ]);\r\n\r\n\r\n  useEffect(() => {\r\n    getAllProjectCategory()\r\n  }, [currentPage])\r\n\r\n  /* Get All ProjectCategory Data */\r\n  const getAllProjectCategory = () => {\r\n    const params = {\r\n      page: currentPage,\r\n      limit: pagination.limit,\r\n    }\r\n    dispatch(departmentAction.getProjectCategoryRequest(params));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!getProjectCategoryPending) {\r\n      if (getProjectCategoryError) {\r\n        return;\r\n      }\r\n      if (getProjectCategoryRes) {\r\n        if (getProjectCategoryRes?.code === 200) {\r\n          const getAllProjectCategoryData = getProjectCategoryRes?.data\r\n          setAllProjectCategory(getAllProjectCategoryData)\r\n\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    getProjectCategoryRes,\r\n    getProjectCategoryError,\r\n    getProjectCategoryPending\r\n  ]);\r\n\r\n\r\n  /*  Delete ProjectCategory   */\r\n  const handleProjectCategoryDeleteModal = (id) => {\r\n    if (id) {\r\n      setDeleteProjectCategoryId(id)\r\n    }\r\n    setIsShowDeleteProjectCategoryModal(!isShowDeleteProjectCategoryModal)\r\n  }\r\n\r\n  const handleDeleteProjectCategory = (type) => {\r\n    if (type) {\r\n      const params = {\r\n        _id: deleteProjectCategoryId\r\n      }\r\n\r\n      // dispatch(departmentAction?.deleteProjectCategoryRequest(params))\r\n\r\n    } else {\r\n      handleProjectCategoryDeleteModal()\r\n    }\r\n\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!deleteProjectCategoryPending) {\r\n      if (deleteProjectCategoryError) {\r\n        // dispatch(departmentAction.handleClearProjectCategoryStore(\"HANDLE_CLEAR_DELETE_FUNCTION_STORE\"))\r\n        return;\r\n      }\r\n      if (deleteProjectCategoryRes) {\r\n        if (deleteProjectCategoryRes?.code === 200) {\r\n          handleProjectCategoryDeleteModal()\r\n          if (currentPage > 1 && allProjectCategory?.data?.length === 1) {\r\n            setCurrentPage((pre => pre -= 1))\r\n          } else {\r\n            getAllProjectCategory()\r\n          }\r\n          // dispatch(departmentAction.handleClearProjectCategoryStore(\"HANDLE_CLEAR_DELETE_FUNCTION_STORE\"))\r\n\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    deleteProjectCategoryRes,\r\n    deleteProjectCategoryError,\r\n    deleteProjectCategoryPending\r\n  ]);\r\n\r\n  const scopedSlots = useMemo(() => ({\r\n    sn: (_, index) => (\r\n      <span>{index + 1}</span>\r\n    ),\r\n    is_active: item => (\r\n      <span\r\n        className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n      >\r\n        {item.is_active ? \"Active\" : \"Inactive\"}\r\n      </span>\r\n    ),\r\n    created_at: item => dateFormate(item.created_at),\r\n    action: item => (\r\n\r\n      (item?.emp_count === 0 || updateProjectCategory)\r\n      && <div className=\"btn-group actionDrp\">\r\n        <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n          data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n          <i className=\"bi bi-three-dots-vertical\"></i>\r\n        </button>\r\n        <ul className=\"dropdown-menu\">\r\n          {updateProjectCategory && <li>\r\n            <span className=\"dropdown-item\"\r\n              onClick={() => toggleCreateUpdateProjectCategoryModal(item)}\r\n            >\r\n              <Icon className={\"bi bi-pencil-square me-1\"} />Update</span>\r\n          </li>}\r\n          {item?.emp_count === 0 && deleteProjectCategory && <li>\r\n            <span className=\"dropdown-item\"\r\n              onClick={() => handleProjectCategoryDeleteModal(item._id)}\r\n            >\r\n              <Icon className={\"bi bi-trash me-1\"} />Delete</span>\r\n          </li>}\r\n        </ul>\r\n      </div>\r\n\r\n    )\r\n  }), [toggleCreateUpdateProjectCategoryModal]);\r\n\r\n\r\n  const fields = [\r\n    { key: 'sn', label: 'S.N' },\r\n    { key: 'name', label: 'Category  ' },\r\n    { key: 'is_active', label: 'Status' },\r\n    { key: 'created_at', label: 'Created At' },\r\n    ((updateProjectCategory || deleteProjectCategory) && { key: 'action', label: 'Action' })\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <div className='cardBox myRequest mb-3 employeeHistory'>\r\n        <div className=\"d-flex align-items-center justify-content-between gap-3\">\r\n          <div className=\"cardHead d-flex\">\r\n            <img src=\"images/myrequest-icon.svg\" alt=\"\" width={35} />\r\n            <h4 className=\"ms-2 \">Project Category</h4>\r\n          </div>\r\n          <div>\r\n            <CustomButton\r\n              classNames={\"btn btn-primary gradientBg\"}\r\n              handleClick={() => toggleCreateUpdateProjectCategoryModal()}\r\n              text={\"Project Category\"}\r\n              icon={<Icon className={\"fa fa-plus\"} />}\r\n            // slug={\"project_category\"}\r\n            />\r\n\r\n          </div>\r\n        </div>\r\n        <CustomTable\r\n          data={allProjectCategory?.data}\r\n          fields={fields}\r\n          isLoading={getProjectCategoryPending}\r\n          pagination={true}\r\n          currentPage={currentPage}\r\n          setCurrentPage={setCurrentPage}\r\n          totalPages={allProjectCategory?.totalPages}\r\n          isHeader={false}\r\n          tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n          scopedSlots={scopedSlots}\r\n        />\r\n      </div>\r\n\r\n      {isOpenCreateUpdateProjectCategory && <CreateUpdateProjectCategory\r\n        selectedCategoryData={selectedProjectCategoryData}\r\n        openModel={isOpenCreateUpdateProjectCategory}\r\n        handleOpenClose={toggleCreateUpdateProjectCategoryModal}\r\n        handleCreateUpdateCategory={handleCreateUpdateProjectCategory}\r\n      />}\r\n\r\n\r\n      {isShowDeleteProjectCategoryModal && (\r\n        <ApproveRejectModal\r\n          onApproveReject={handleDeleteProjectCategory}\r\n          isShow={isShowDeleteProjectCategoryModal}\r\n          desc={t(\"alerts.deletePopup.desc\").replace('$1', \"Project Category\")}\r\n          btnRightLoading={deleteProjectCategoryPending}\r\n          btnTextRight={t(\"btns.delete\")}\r\n          btnTextLeft={t(\"btns.cancel\")}\r\n\r\n        />)}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ProjectCategory\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport ProjectType from './projectType/ProjectType'\r\nimport { CustomCardHeaders } from '../../commanComponent'\r\nimport ProjectCategory from './projectCategory/ProjectCategory'\r\nimport { departmentAction,employeeActions } from '../../../core/resource/actions'\r\nconst projectData = [\r\n    {\r\n        label: \"Project Type\",\r\n        value: \"project_type\",\r\n        totalCount: 2,\r\n        imgUrl: 'networking.png',\r\n        permissionId:\"project_type\"\r\n        \r\n    },\r\n    {\r\n        label: \"Project Category \",\r\n        value: \"project_category\",\r\n        totalCount: 1,\r\n        imgUrl: 'settings.png',\r\n         permissionId:\"project_category\"\r\n    },\r\n    {\r\n        label: \"Projects\",\r\n        value: \"projects\",\r\n        totalCount: 1,\r\n        imgUrl: 'projectIcon.png',\r\n        permissionId:\"project\"  \r\n    },\r\n\r\n\r\n\r\n\r\n]\r\n\r\nconst TaskProject = () => {\r\n    const dispatch = useDispatch()\r\n    const [isActiveTab, setIsActiveTab] = useState('project_type')\r\n    const [allDepartments, setAllDepartments] = useState([])\r\n    const [subDepartmentByDepartmentData,setSubDepartmentByDepartmentData]=useState([])\r\n    const [allEmployeeList, setAllEmployeeList] = useState([])\r\n    const [headerData,setHeaderData]=useState(projectData)\r\n    const [mappingCount,setMappingCount]=useState({\r\n        departmentCount:0,\r\n        designationCount:0,\r\n        projectCount :0,\r\n        functionCount:0\r\n\r\n    })\r\n    const {\r\n        getDepartmentListRes,\r\n        getDepartmentListError,\r\n        getDepartmentListPending,\r\n\r\n        getSubDepartmentByDepartmentRes,\r\n        getSubDepartmentByDepartmentError,\r\n        getSubDepartmentByDepartmentPending,\r\n\r\n    } = useSelector(state => state.department)\r\n\r\n    const {\r\n        getAllEmployeeRes,\r\n        getAllEmployeeError,\r\n        getAllEmployeePending\r\n\r\n    } = useSelector(state => state.employee)\r\n\r\n\r\n\r\n    // useEffect(() => {\r\n    //     getAllDepartments()\r\n    //     getAllEmployee()\r\n    // }, [])\r\n\r\n    // /* Get All Departments */\r\n    // const getAllDepartments = () => {\r\n    //     const departmentResposnse = getDepartmentListRes?.data\r\n    //     if (!departmentResposnse?.length) {\r\n    //         dispatch(departmentAction.getDepartmentListRequest());\r\n    //     } else {\r\n    //         setAllDepartments(departmentResposnse)\r\n    //     }\r\n    // }\r\n\r\n    // useEffect(() => {\r\n    //     if (!getDepartmentListPending) {\r\n    //         if (getDepartmentListError) {\r\n    //             return;\r\n    //         }\r\n    //         if (getDepartmentListRes) {\r\n    //             if (getDepartmentListRes?.code === 200) {\r\n    //                 const departmentResponse = getDepartmentListRes?.data\r\n    //                 setAllDepartments(departmentResponse)\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }, [\r\n    //     getDepartmentListRes,\r\n    //     getDepartmentListError,\r\n    //     getDepartmentListPending\r\n    // ]);\r\n\r\n    // /* Get All Employee List*/\r\n    // const getAllEmployee = () => {\r\n    //     dispatch(employeeActions.getAllEmployeeRequest())\r\n    // }\r\n    // useEffect(() => {\r\n    //     if (!getAllEmployeePending) {\r\n    //         if (getAllEmployeeError) {\r\n    //             return;\r\n    //         }\r\n    //         if (getAllEmployeeRes) {\r\n    //             if (getAllEmployeeRes?.code === 200) {\r\n\r\n    //                 setAllEmployeeList(getAllEmployeeRes?.data)\r\n    //                 setMappingCount((pre)=>({\r\n    //                     ...pre,\r\n    //                     [\"departmentCount\"]:getAllEmployeeRes?.data\r\n    //                 }))\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }, [\r\n    //     getAllEmployeeRes,\r\n    //     getAllEmployeeError,\r\n    //     getAllEmployeePending\r\n    // ]);\r\n\r\n\r\n\r\n    // /* Get All Employee List*/\r\n    // const getSubDepartmentByDepartment = (id) => {\r\n    //     const payload ={\r\n    //         department_id:id\r\n    //     }\r\n    //     dispatch(departmentAction.getSubDepartmentByDepartmentRequest(payload))\r\n    // }\r\n    // useEffect(() => {\r\n    //     if (!getSubDepartmentByDepartmentPending) {\r\n    //         if (getSubDepartmentByDepartmentError) {\r\n    //             return;\r\n    //         }\r\n    //         if (getSubDepartmentByDepartmentRes) {\r\n    //             if (getSubDepartmentByDepartmentRes?.code === 200) {\r\n\r\n    //                 setSubDepartmentByDepartmentData(getSubDepartmentByDepartmentRes?.data)\r\n    //             }\r\n    //         }\r\n    //     }\r\n    // }, [\r\n    //     getSubDepartmentByDepartmentRes,\r\n    //     getSubDepartmentByDepartmentError,\r\n    //     getSubDepartmentByDepartmentPending\r\n    // ]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <CustomCardHeaders\r\n                isActiveTab={isActiveTab}\r\n                setIsActiveTab={setIsActiveTab}\r\n                data={headerData}\r\n            />\r\n            { isActiveTab === \"project_type\" && <ProjectType/>}\r\n            {isActiveTab === \"project_category\" && <ProjectCategory\r\n                allDepartments={allDepartments}\r\n                allEmployeeList={allEmployeeList}\r\n            />}\r\n            {/* {isActiveTab === \"project\" && <Projects\r\n                allDepartments={allDepartments}\r\n                allEmployeeList={allEmployeeList}\r\n                getSubDepartmentByDepartment={getSubDepartmentByDepartment}\r\n                subDepartmentByDepartmentData={subDepartmentByDepartmentData}\r\n            />}\r\n            */}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TaskProject\r\n"],"names":["props","t","useCustomTranslation","selectedProjectTypeData","openModel","handleOpenClose","handleCreateUpdateProjectType","errors","setErrors","useState","formData","setFormData","projectType","is_active","handleFromChange","e","fieldName","_e$target","name","target","value","type","checked","prevState","prevErrors","undefined","useEffect","resetForm","_jsxs","_Fragment","children","className","tabIndex","style","visibility","width","id","_jsx","onClick","Label","text","required","Input","placeholder","onChange","CustomError","CustCheckbox","handleChange","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","addUpdateProjectTypeSchema","isValid","params","submitCreateUpdateProjectType","allDepartments","dispatch","useDispatch","allEmployeeList","setAllEmployeeList","addProjectTypePending","addProjectTypeRes","addProjectTypeError","getProjectTypePending","getProjectTypeRes","getProjectTypeError","updateProjectTypePending","updateProjectTypeRes","updateProjectTypeError","deleteProjectTypePending","deleteProjectTypeRes","deleteProjectTypeError","useSelector","state","department","isOpenCreateUpdateProjectType","setIsOpenCreateUpdateProjectType","setSelectedProjectTypeData","currentPage","setCurrentPage","allProjectTypes","setAllProjectTypes","isShowDeleteProjectTypeModal","setIsShowDeleteProjectTypeModal","deleteProjectTypeId","setDeleteProjectTypeId","filteredDropdownData","setFilteredDropdownData","allProjectListData","setAllProjectListData","updateProjectType","isPermission","deleteProjectType","toggleCreateUpdateProjectTypeModal","data","departmentAction","handleClearDepartmentStore","code","getAllProjectTypes","page","limit","pagination","getProjectTypeRequest","getAllProjectTypeData","handleProjectTypeDeleteModal","_allProjectTypes$data","length","pre","scopedSlots","useMemo","sn","_","index","item","getBadgeColor","created_at","dateFormate","action","emp_count","Icon","_id","fields","key","label","src","alt","icon","CustomTable","isLoading","totalPages","isHeader","tableStyle","padding","boxShadow","CreateUpdateProjectType","updateProjectTypeRequest","addProjectTypeRequest","ApproveRejectModal","onApproveReject","isShow","desc","replace","btnRightLoading","btnTextRight","btnTextLeft","selectedCategoryData","handleCreateUpdateCategory","categoryName","addUpdateCategorySchema","submitCreateUpdateCategory","ProjectCategory","addProjectCategoryPending","addProjectCategoryRes","addProjectCategoryError","getProjectCategoryPending","getProjectCategoryRes","getProjectCategoryError","updateProjectCategoryPending","updateProjectCategoryRes","updateProjectCategoryError","deleteProjectCategoryPending","deleteProjectCategoryRes","deleteProjectCategoryError","isOpenCreateUpdateProjectCategory","setIsOpenCreateUpdateProjectCategory","selectedProjectCategoryData","setSelectedProjectCategoryData","allProjectCategory","setAllProjectCategory","isShowDeleteProjectCategoryModal","setIsShowDeleteProjectCategoryModal","deleteProjectCategoryId","setDeleteProjectCategoryId","updateProjectCategory","deleteProjectCategory","toggleCreateUpdateProjectCategoryModal","getAllProjectCategory","getProjectCategoryRequest","getAllProjectCategoryData","handleProjectCategoryDeleteModal","_allProjectCategory$d","CreateUpdateProjectCategory","updateProjectCategoryRequest","addProjectCategoryRequest","projectData","totalCount","imgUrl","permissionId","TaskProject","isActiveTab","setIsActiveTab","setAllDepartments","subDepartmentByDepartmentData","setSubDepartmentByDepartmentData","headerData","setHeaderData","mappingCount","setMappingCount","departmentCount","designationCount","projectCount","functionCount","getDepartmentListRes","getDepartmentListError","getDepartmentListPending","getSubDepartmentByDepartmentRes","getSubDepartmentByDepartmentError","getSubDepartmentByDepartmentPending","getAllEmployeeRes","getAllEmployeeError","getAllEmployeePending","employee","CustomCardHeaders","ProjectType"],"sourceRoot":""}