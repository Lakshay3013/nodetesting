{"version":3,"file":"static/js/1588.fc261c31.chunk.js","mappings":"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","sources":["components/TaskManagement/task/CreateUpdateTask.js","components/TaskManagement/task/TaskCounts.js","components/TaskManagement/task/Task.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { CustomButton, CustomError } from '../../globalComponents'\r\nimport { createShortName } from '../../../utils/common'\r\nimport CustomSelect from '../../commanComponent/CustomSelect'\r\nimport { CustCheckbox, CustomMultiSelect, Input, Label } from '../../commanComponent'\r\nimport { validateSchema } from '../../../utils/ValidationHelper'\r\nimport { addUpdateTaskSchema } from '../../../utils/ValidationSchema'\r\nimport { useSelector } from 'react-redux'\r\nimport { useCustomTranslation } from '../../../translation'\r\nimport { CommonCKEditor } from '../../reuseableComponents'\r\n\r\nconst CreateUpdateTask = (props) => {\r\n    // const { createTaskPending, updateTaskPending } = useSelector(state => state?.project)\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        selectedTaskData,\r\n        openModel,\r\n        handleOpenClose,\r\n        allDepartments,\r\n        allEmployeeList,\r\n        allProjectListData,\r\n        subDepartmentByDepartmentData,\r\n        handleCreateUpdateTask,\r\n        filteredDropdownData\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [editorData, setEditorData] = useState('')\r\n    const [createUpdateTaskFormData, setCreateUpdateTaskFormData] = useState({\r\n        project: null,\r\n        taskType: null,\r\n        status: null,\r\n        title: '',\r\n        priority: null,\r\n        assignee: null,\r\n        watchers: null,\r\n        taskDate: '',\r\n        dueDate: '',\r\n        originalEstimate: ''\r\n\r\n\r\n\r\n    })\r\n    const [taskFile, setTaskFile] = useState('')\r\n    const fileInputRef = useRef(null);\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e.target ? e.target : { value: e };\r\n\r\n        setCreateUpdateTaskFormData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n\r\n            return updatedState;\r\n        });\r\n\r\n        // Reset error for this field\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitCreateUpdateTask = async () => {\r\n        const validationResponse = await validateSchema(addUpdateTaskSchema, createUpdateTaskFormData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n                project,\r\n                title,\r\n                taskType,\r\n                status,\r\n                priority,\r\n                assignee,\r\n                watchers,\r\n                taskDate,\r\n                dueDate,\r\n                originalEstimate\r\n            } = createUpdateTaskFormData\r\n            const params = {\r\n                [\"project_id\"]: project?.value,\r\n                title,\r\n                [\"sub_department_id\"]: taskType?.value,\r\n                task_manager_id: status?.value,\r\n                function_head_id: priority?.value,\r\n                assignee: [],\r\n                watchers: watchers,\r\n                taskDate,\r\n                dueDate,\r\n                original_estimate: originalEstimate\r\n\r\n            }\r\n            setErrors({})\r\n            handleCreateUpdateTask(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (selectedTaskData) {\r\n            setCreateUpdateTaskFormData({\r\n                project: { value: selectedTaskData?.project_id, label: selectedTaskData?.project_name },\r\n                priority: { value: selectedTaskData?.priority_id, label: selectedTaskData?.priority_name },\r\n                title: selectedTaskData?.title,\r\n                taskType: { value: selectedTaskData?.task_type_id, label: selectedTaskData?.task_type_name },\r\n                status: { value: selectedTaskData?.task_manager_id, label: selectedTaskData?.task_manager_name },\r\n                assignee: null,\r\n                watchers: selectedTaskData?.watchers,\r\n                taskDate: selectedTaskData?.task_date,\r\n                dueDate: selectedTaskData?.due_date,\r\n            })\r\n        }\r\n    }, [selectedTaskData])\r\n\r\n    const resetForm = () => {\r\n        setCreateUpdateTaskFormData({\r\n            project: null,\r\n            taskType: null,\r\n            status: null,\r\n            priority: null,\r\n            title: '',\r\n            assignee: null,\r\n            watchers: null,\r\n            taskDate: '',\r\n            dueDate: '',\r\n        })\r\n        setErrors({})\r\n    }\r\n\r\n    const handleTaskFile = (e) => {\r\n        const file = e.target.files[0]\r\n        setTaskFile(file)\r\n    }\r\n    return (\r\n        <>\r\n            <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n                tabIndex={-1}\r\n                style={{\r\n                    visibility: openModel ? 'visible' : 'hidden',\r\n                    width: \"800px\"\r\n                }}\r\n                id=\"interviewDetail\"\r\n            >\r\n                <div className=\"offcanvas-header\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">\r\n                        {selectedTaskData ? t(\"headings.updateTask\") : t(\"headings.createTask\")}\r\n                    </h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                        onClick={() => handleOpenClose()}\r\n                    />\r\n                </div>\r\n\r\n\r\n                <div className=\"offcanvas-body myRequest \">\r\n                    <div className=\"formPanel\">\r\n                        <div className=\"row\">\r\n\r\n                            <div className=\"col-md-6\">\r\n                                <Label text={t(\"labels.selectProject\")} required={true} />\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustomSelect\r\n                                        data={allProjectListData}\r\n                                        placeholder={t(\"placeholders.selectProject\")}\r\n                                        value={createUpdateTaskFormData?.project || ''}\r\n                                        handleChange={(selectedOption) => handleFromChange(selectedOption, \"project\")}\r\n\r\n                                    />\r\n                                    {errors?.project && (\r\n                                        <CustomError text={errors.project} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <Label text={t(\"labels.title\")} required={true} />\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.title\")}\r\n                                        value={createUpdateTaskFormData?.title}\r\n                                        name=\"title\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    />\r\n                                    {errors?.title && (\r\n                                        <CustomError text={errors.title} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <Label text={t(\"labels.taskType\")} required={true} />\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustomSelect\r\n                                        data={subDepartmentByDepartmentData}\r\n                                        placeholder={t(\"placeholders.taskType\")}\r\n                                        value={createUpdateTaskFormData?.taskType || ''}\r\n                                        handleChange={(selectedOption) => handleFromChange(selectedOption, \"taskType\")}\r\n                                        name=\"taskType\"\r\n                                    />\r\n                                    {errors?.taskType && (\r\n                                        <CustomError text={errors.taskType} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <Label text={t(\"labels.status\")} required={true} />\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustomSelect\r\n                                        data={filteredDropdownData?.task_status}\r\n                                        placeholder={t(\"placeholders.status\")}\r\n                                        value={createUpdateTaskFormData?.status || ''}\r\n                                        handleChange={(selectedOption) => handleFromChange(selectedOption, \"status\")}\r\n                                        name=\"status\"\r\n                                    />\r\n                                    {errors?.status && (\r\n                                        <CustomError text={errors.status} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <Label text={t(\"labels.priority\")} required={true} />\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustomSelect\r\n                                        data={filteredDropdownData?.priority}\r\n                                        placeholder={t(\"placeholders.priority\")}\r\n                                        value={createUpdateTaskFormData?.priority || ''}\r\n                                        handleChange={(selectedOption) => handleFromChange(selectedOption, \"priority\")}\r\n                                        name=\"priority\"\r\n                                    />\r\n                                    {errors?.priority && (\r\n                                        <CustomError text={errors.priority} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <Label text={t(\"labels.assignee\")} required={true} />\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustomSelect\r\n                                        data={allEmployeeList}\r\n                                        placeholder={t(\"placeholders.assignee\")}\r\n                                        value={createUpdateTaskFormData?.assignee || ''}\r\n                                        handleChange={(selectedOption) => handleFromChange(selectedOption, \"assignee\")}\r\n                                        name=\"assignee\"\r\n                                    />\r\n                                    {errors?.assignee && (\r\n                                        <CustomError text={errors.assignee} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"form-group mb-2\">\r\n                                    <Label text={t(\"labels.watchers\")} required={true} />\r\n                                    <CustomMultiSelect\r\n                                        optionsData={allEmployeeList}\r\n                                        placeholder=\"Select Watchers\"\r\n                                        values={createUpdateTaskFormData.watchers}\r\n                                        onChange={(data) => handleFromChange(data, \"watchers\")}\r\n                                    />\r\n                                    {errors?.watchers && (\r\n                                        <CustomError text={errors.watchers} />\r\n                                    )}\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <Label text={t(\"labels.taskDate\")} required={true} />\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        placeholder={t(\"placeholders.taskDate\")}\r\n                                        value={createUpdateTaskFormData?.taskDate}\r\n                                        name=\"taskDate\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    />\r\n                                    {errors?.taskDate && (\r\n                                        <CustomError text={errors.taskDate} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <Label text={t(\"labels.dueDate\")} required={true} />\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"date\"\r\n                                        placeholder={t(\"placeholders.dueDate\")}\r\n                                        value={createUpdateTaskFormData?.dueDate}\r\n                                        name=\"dueDate\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    />\r\n                                    {errors?.dueDate && (\r\n                                        <CustomError text={errors.dueDate} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"col-md-6\">\r\n                                <Label text={t(\"labels.originalEstimate\")}/>\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.originalEstimate\")}\r\n                                        value={createUpdateTaskFormData?.originalEstimate}\r\n                                        name=\"originalEstimate\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    />\r\n                                    {errors?.originalEstimate && (\r\n                                        <CustomError text={errors.originalEstimate} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-12\">\r\n                                <Label text={t(\"labels.description\")}  />\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CommonCKEditor\r\n                                        editorData={editorData}\r\n                                        setEditorData={setEditorData}\r\n                                        bodyData={''}\r\n                                        editorSize=\"sm\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-12\">\r\n                                <Label text={t(\"labels.selectFile\")}  />\r\n                                <div className=\"form-group mb-3\">\r\n\r\n                                    <input type=\"file\"\r\n                                        id=\"taskFile\"\r\n                                        name=\"poster\"\r\n                                        className={`form-control `}\r\n                                        onChange={handleTaskFile}\r\n                                        accept=\".png, .jpeg, .doc, .docx, .pdf\"\r\n                                        ref={fileInputRef}\r\n                                    />\r\n\r\n\r\n                                </div>\r\n                            </div>\r\n\r\n\r\n\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"offcanvas-footer\">\r\n                    <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                        <CustomButton\r\n                            text={selectedTaskData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                            classNames={\"btn btn-org-gradient\"}\r\n                            handleClick={() => submitCreateUpdateTask()}\r\n                        // isLoading={selectedTaskData ? updateTaskPending : createTaskPending}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {openModel && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateUpdateTask\r\n","import React from 'react'\r\nimport { toTitleCase } from '../../../utils/common';\r\n\r\nconst TaskCounts = () => {\r\n    const data = [\r\n        { count: 12, name: \"Total\" },\r\n        { count: 1, name: \"Open\" },\r\n        { count: 2, name: \"Reopened\" },\r\n        { count: 3, name: \"Close\" },\r\n        { count: 6, name: \"To Do\" },\r\n        { count: 3, name: \"InProgress\" },\r\n        { count: 1, name: \"Rejected\" },\r\n        { count: 2, name: \"Hold\" },\r\n    ]\r\n    const renderedTaskCounts = () => {\r\n        if (!data?.length) return null;\r\n        return data.map((item, ind) => (\r\n            <div className=\"col-md px-md-2 mb-3\" key={ind}>\r\n                <div className=\"totalBx h-100\" style={{    border: \"1px solid #D8E8F7\",   background:(ind%2===0)?\"#D8E8F7\":\"#fff\"}}>\r\n                    <div className='d-flex justify-content-between '>\r\n                        <figure className=\"mb-0\">\r\n                            <img src=\"images/applyleavesIcon.svg\" alt=\"Task Icon\" width={40} />\r\n                        </figure>\r\n                        <div>\r\n                            <div className=\"\">\r\n                                <span className='d-flex justify-content-end'>{item?.count}</span>\r\n                                <h3 className=\"fw-bolder mb-0 mt-3\">{toTitleCase(item?.name)}</h3>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <img\r\n                        src=\"images/totalattendance.svg\"\r\n                        className=\"cornerLine\"\r\n                        alt=\"Corner Design\"\r\n                        width={95}\r\n                    />\r\n                </div>\r\n            </div>\r\n        ));\r\n    };\r\n\r\n    return (\r\n        <div className=\"ticketScoreSection\">\r\n            <div className=\"cardBox mb-3 leaveAppli\" >\r\n                <div className=\"row px-md-1\">\r\n                    {renderedTaskCounts()}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TaskCounts\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { taskManagementActions, dropdownMasterActions, employeeActions, departmentAction } from '../../../core/resource/actions'\r\nimport { pagination } from '../../../utils/Constants.config'\r\nimport ApproveRejectModal from '../../modal/ApproveRejectModal'\r\nimport { useCustomTranslation } from '../../../translation'\r\nimport { CustomTable } from '../../reuseableComponents'\r\nimport { Icon } from '../../commanComponent'\r\nimport { dateFormate, getBadgeColor, setFilterDropdownData } from '../../../utils/common'\r\nimport { isPermission } from '../../../utils/common'\r\nimport CreateUpdateTask from './CreateUpdateTask'\r\nimport TaskCounts from './TaskCounts'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst dummyData = [\r\n    {\r\n        sn: '1',\r\n        name: 'testing',\r\n        task_id: '01',\r\n        project: 'glueple',\r\n        assignedTo: 'sarfaraz',\r\n        task_type: 'bug',\r\n        no_of_sub_task: '0',\r\n        task_date: '16-05-2024',\r\n        due_date: '20-05-2024',\r\n        is_active: 'open',\r\n    }\r\n]\r\nconst Task = (props) => {\r\n    const dispatch = useDispatch()\r\n    const { t } = useCustomTranslation();\r\n    const navigate = useNavigate()\r\n    const [allEmployeeList, setAllEmployeeList] = useState([])\r\n\r\n    const {\r\n        addTaskPending,\r\n        addTaskRes,\r\n        addTaskError,\r\n\r\n        getTaskPending,\r\n        getTaskRes,\r\n        getTaskError,\r\n\r\n        updateTaskPending,\r\n        updateTaskRes,\r\n        updateTaskError,\r\n\r\n        deleteTaskPending,\r\n        deleteTaskRes,\r\n        deleteTaskError,\r\n    } = useSelector(state => state.taskManagement)\r\n    const {\r\n        getAllEmployeeRes,\r\n        getAllEmployeeError,\r\n        getAllEmployeePending\r\n\r\n    } = useSelector(state => state.employee)\r\n\r\n    const {\r\n        getFilteredDropdownDataError,\r\n        getFilteredDropdownDataRes,\r\n        getFilteredDropdownDataPending\r\n    } = useSelector(state => state.dropdownMaster)\r\n    const {\r\n        getAllProjectListPending,\r\n        getAllProjectListRes,\r\n        getAllProjectListError,\r\n\r\n    } = useSelector(state => state.department)\r\n\r\n    const [isOpenCreateUpdateTask, setIsOpenCreateUpdateTask] = useState(false)\r\n    const [selectedTaskData, setSelectedTaskData] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [allTasks, setAllTasks] = useState({})\r\n    const [isShowDeleteTaskModal, setIsShowDeleteTaskModal] = useState(false)\r\n    const [deleteTaskId, setDeleteTaskId] = useState('')\r\n    const [filteredDropdownData, setFilteredDropdownData] = useState('')\r\n    const [allProjectListData, setAllProjectListData] = useState([])\r\n    const updateTask = isPermission(\"update_task\")\r\n    const deleteTask = isPermission(\"delete_task\")\r\n\r\n\r\n    /* Create Update Task */\r\n    const toggleCreateUpdateTaskModal = (data) => {\r\n        if (!data) {\r\n            setSelectedTaskData('')\r\n        } else {\r\n            setSelectedTaskData(data)\r\n        }\r\n        setIsOpenCreateUpdateTask(!isOpenCreateUpdateTask)\r\n    }\r\n\r\n    const handleCreateUpdateTask = (params) => {\r\n        if (selectedTaskData) {\r\n            params['_id'] = selectedTaskData?._id || selectedTaskData?.id\r\n            dispatch(taskManagementActions.updateTaskRequest(params));\r\n        }\r\n        else {\r\n            dispatch(taskManagementActions.addTaskRequest(params));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!addTaskPending) {\r\n            if (addTaskError) {\r\n                dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_CREATE_TASK_STORE\"))\r\n                return;\r\n            }\r\n            if (addTaskRes) {\r\n                if (addTaskRes?.code === 200) {\r\n                    dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_ADD_TASK_STORE\"))\r\n                    dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_GET_ALL_TASK_LIST_STORE\"))\r\n                    dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_GET_TASK_STORE\"))\r\n                    toggleCreateUpdateTaskModal()\r\n                    getAllTasks()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        addTaskRes,\r\n        addTaskError,\r\n        addTaskPending\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (!updateTaskPending) {\r\n            if (updateTaskError) {\r\n                dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_UPDATE_TASK_STORE\"))\r\n                return;\r\n            }\r\n            if (updateTaskRes) {\r\n                if (updateTaskRes?.code === 200) {\r\n                    dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_UPDATE_TASK_STORE\"))\r\n                    dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_CREATE_TASK_STORE\"))\r\n                    dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_GET_TASK_STORE\"))\r\n                    getAllTasks()\r\n                    toggleCreateUpdateTaskModal()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updateTaskRes,\r\n        updateTaskError,\r\n        updateTaskPending\r\n    ]);\r\n\r\n\r\n    useEffect(() => {\r\n        getAllTasks()\r\n    }, [currentPage])\r\n\r\n    /* Get All Tasks Data */\r\n    const getAllTasks = () => {\r\n        const params = {\r\n            page: currentPage,\r\n            limit: pagination.limit,\r\n        }\r\n        dispatch(taskManagementActions.getAllTaskRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getTaskPending) {\r\n            if (getTaskError) {\r\n                return;\r\n            }\r\n            if (getTaskRes) {\r\n                if (getTaskRes?.code === 200) {\r\n                    const getAllTaskData = getTaskRes?.data\r\n                    setAllTasks(getAllTaskData)\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getTaskRes,\r\n        getTaskError,\r\n        getTaskPending\r\n    ]);\r\n\r\n\r\n    /*  Delete Task   */\r\n    const handleTaskDeleteModal = (id) => {\r\n        if (id) {\r\n            setDeleteTaskId(id)\r\n        }\r\n        setIsShowDeleteTaskModal(!isShowDeleteTaskModal)\r\n    }\r\n\r\n    const handleDeleteTask = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deleteTaskId\r\n            }\r\n\r\n            // dispatch(taskManagementActions?.deleteTaskRequest(params))\r\n\r\n        } else {\r\n            handleTaskDeleteModal()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!deleteTaskPending) {\r\n            if (deleteTaskError) {\r\n                // dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_DELETE_FUNCTION_STORE\"))\r\n                return;\r\n            }\r\n            if (deleteTaskRes) {\r\n                if (deleteTaskRes?.code === 200) {\r\n                    handleTaskDeleteModal()\r\n                    if (currentPage > 1 && allTasks?.data?.length === 1) {\r\n                        setCurrentPage((pre => pre -= 1))\r\n                    } else {\r\n                        getAllTasks()\r\n                    }\r\n                    // dispatch(taskManagementActions.handleClearTaskStore(\"HANDLE_CLEAR_DELETE_FUNCTION_STORE\"))\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        deleteTaskRes,\r\n        deleteTaskError,\r\n        deleteTaskPending\r\n    ]);\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        created_at: item => dateFormate(item.created_at),\r\n        action: item => (\r\n\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => toggleCreateUpdateTaskModal(item)}\r\n                        >\r\n                            <Icon className={\"bi bi-pencil-square me-1\"} />Update</span>\r\n                    </li>\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleTaskDeleteModal(item._id)}\r\n                        >\r\n                            <Icon className={\"bi bi-trash me-1\"} />Delete</span>\r\n                    </li>\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => viewTaskDetail(item)}\r\n                        >\r\n                            <Icon className={\"bi bi-eye me-1\"} />View Detail</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n        )\r\n    }), [toggleCreateUpdateTaskModal]);\r\n\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'name', label: 'Task' },\r\n        { key: 'task_id', label: 'Task Id' },\r\n        { key: 'project', label: 'Project' },\r\n        { key: 'assignedTo', label: 'Assigned to' },\r\n        { key: 'task_type', label: 'Task Type' },\r\n        { key: 'no_of_sub_task', label: 'No of Sub Task' },\r\n        { key: 'task_date', label: 'Task Date' },\r\n        { key: 'due_date', label: 'Due Date' },\r\n        { key: 'is_active', label: 'Status' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n\r\n\r\n    /* Dropdown Master Filter */\r\n    const getDropdownFilteredData = () => {\r\n        const categories = ['priority', \"task_status\"]\r\n        let params = { category: categories }\r\n        dispatch(dropdownMasterActions.getFilteredDropdownDataRequest(params))\r\n\r\n    }\r\n    useEffect(() => {\r\n        if (!getFilteredDropdownDataPending) {\r\n            if (getFilteredDropdownDataError) {\r\n                return;\r\n            }\r\n            if (getFilteredDropdownDataRes) {\r\n                if (getFilteredDropdownDataRes?.code === 200) {\r\n                    const updateData = setFilterDropdownData(getFilteredDropdownDataRes?.data?.data)\r\n                    setFilteredDropdownData(updateData);\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getFilteredDropdownDataRes,\r\n        getFilteredDropdownDataError,\r\n        getFilteredDropdownDataPending\r\n    ]);\r\n\r\n    /* Get All Employee List*/\r\n    const getAllEmployee = () => {\r\n        dispatch(employeeActions.getAllEmployeeRequest())\r\n    }\r\n    useEffect(() => {\r\n        if (!getAllEmployeePending) {\r\n            if (getAllEmployeeError) {\r\n                return;\r\n            }\r\n            if (getAllEmployeeRes) {\r\n                if (getAllEmployeeRes?.code === 200) {\r\n\r\n                    setAllEmployeeList(getAllEmployeeRes?.data)\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllEmployeeRes,\r\n        getAllEmployeeError,\r\n        getAllEmployeePending\r\n    ]);\r\n\r\n    /* Get all Skills List Data */\r\n    const getAllProjectList = () => {\r\n        dispatch(departmentAction.getAllProjectListRequest())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllProjectListPending) {\r\n            if (getAllProjectListError) {\r\n                return;\r\n            }\r\n            if (getAllProjectListRes) {\r\n                if (getAllProjectListRes?.code == 200) {\r\n                    setAllProjectListData(getAllProjectListRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllProjectListPending,\r\n        getAllProjectListRes,\r\n        getAllProjectListError,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        getDropdownFilteredData()\r\n        getAllEmployee()\r\n        getAllProjectList()\r\n    }, [])\r\n\r\n    const viewTaskDetail = (item) => {\r\n        dispatch(taskManagementActions.selectedTaskDetail(item))\r\n        navigate(\"/view-task-detail\")\r\n    }\r\n\r\n\r\n    \r\n    return (\r\n        <>\r\n            <TaskCounts />\r\n            <div className='cardBox myRequest mb-3 employeeHistory'>\r\n                <div className=\"d-flex align-items-center justify-content-between gap-3\">\r\n                    <div className=\"cardHead d-flex\">\r\n                        <img src=\"images/myrequest-icon.svg\" alt=\"\" width={35} />\r\n                        <h4 className=\"ms-2 \">Tasks</h4>\r\n                    </div>\r\n                    <div>\r\n                        <CustomButton\r\n                            classNames={\"btn btn-primary gradientBg\"}\r\n                            handleClick={() => toggleCreateUpdateTaskModal()}\r\n                            text={t(\"btns.createNewTask\")}\r\n                            // icon={<Icon className={\"fa fa-plus\"} />}\r\n                            slug={\"create_task\"}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <CustomTable\r\n                    // data={allTasks?.data}\r\n                    data={dummyData}\r\n                    fields={fields}\r\n                    isLoading={getTaskPending}\r\n                    pagination={true}\r\n                    currentPage={currentPage}\r\n                    setCurrentPage={setCurrentPage}\r\n                    totalPages={allTasks?.totalPages}\r\n                    isHeader={false}\r\n                    tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n                    scopedSlots={scopedSlots}\r\n                />\r\n            </div>\r\n\r\n            {isOpenCreateUpdateTask && <CreateUpdateTask\r\n                openModel={isOpenCreateUpdateTask}\r\n                handleOpenClose={toggleCreateUpdateTaskModal}\r\n                handleCreateUpdateTask={handleCreateUpdateTask}\r\n                selectedTaskData={selectedTaskData}\r\n                allProjectListData={allProjectListData}\r\n                allEmployeeList={allEmployeeList}\r\n                filteredDropdownData={filteredDropdownData}\r\n            />}\r\n\r\n\r\n            {isShowDeleteTaskModal && (\r\n                <ApproveRejectModal\r\n                    onApproveReject={handleDeleteTask}\r\n                    isShow={isShowDeleteTaskModal}\r\n                    desc={t(\"alerts.deletePopup.desc\").replace('$1', \"Task\")}\r\n                    btnRightLoading={deleteTaskPending}\r\n                    btnTextRight={t(\"btns.delete\")}\r\n                    btnTextLeft={t(\"btns.cancel\")}\r\n\r\n                />)}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Task\r\n"],"names":["props","t","useCustomTranslation","selectedTaskData","openModel","handleOpenClose","allDepartments","allEmployeeList","allProjectListData","subDepartmentByDepartmentData","handleCreateUpdateTask","filteredDropdownData","errors","setErrors","useState","editorData","setEditorData","createUpdateTaskFormData","setCreateUpdateTaskFormData","project","taskType","status","title","priority","assignee","watchers","taskDate","dueDate","originalEstimate","taskFile","setTaskFile","fileInputRef","useRef","handleFromChange","e","fieldName","_e$target","name","target","value","type","checked","prevState","prevErrors","undefined","useEffect","resetForm","project_id","label","project_name","priority_id","priority_name","task_type_id","task_type_name","task_manager_id","task_manager_name","task_date","due_date","_jsxs","_Fragment","children","className","tabIndex","style","visibility","width","id","_jsx","onClick","Label","text","required","CustomSelect","data","placeholder","handleChange","selectedOption","CustomError","Input","onChange","task_status","CustomMultiSelect","optionsData","values","CommonCKEditor","bodyData","editorSize","file","files","accept","ref","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","addUpdateTaskSchema","isValid","params","function_head_id","original_estimate","submitCreateUpdateTask","TaskCounts","count","length","map","item","ind","border","background","src","alt","toTitleCase","dummyData","sn","task_id","assignedTo","task_type","no_of_sub_task","is_active","dispatch","useDispatch","navigate","useNavigate","setAllEmployeeList","addTaskPending","addTaskRes","addTaskError","getTaskPending","getTaskRes","getTaskError","updateTaskPending","updateTaskRes","updateTaskError","deleteTaskPending","deleteTaskRes","deleteTaskError","useSelector","state","taskManagement","getAllEmployeeRes","getAllEmployeeError","getAllEmployeePending","employee","getFilteredDropdownDataError","getFilteredDropdownDataRes","getFilteredDropdownDataPending","dropdownMaster","getAllProjectListPending","getAllProjectListRes","getAllProjectListError","department","isOpenCreateUpdateTask","setIsOpenCreateUpdateTask","setSelectedTaskData","currentPage","setCurrentPage","allTasks","setAllTasks","isShowDeleteTaskModal","setIsShowDeleteTaskModal","deleteTaskId","setDeleteTaskId","setFilteredDropdownData","setAllProjectListData","toggleCreateUpdateTaskModal","isPermission","taskManagementActions","handleClearTaskStore","code","getAllTasks","page","limit","pagination","getAllTaskRequest","getAllTaskData","handleTaskDeleteModal","_allTasks$data","pre","scopedSlots","useMemo","_","index","getBadgeColor","created_at","dateFormate","action","Icon","_id","viewTaskDetail","_getFilteredDropdownD","updateData","setFilterDropdownData","getDropdownFilteredData","category","dropdownMasterActions","getFilteredDropdownDataRequest","employeeActions","getAllEmployeeRequest","departmentAction","getAllProjectListRequest","selectedTaskDetail","slug","CustomTable","fields","key","isLoading","totalPages","isHeader","tableStyle","padding","boxShadow","CreateUpdateTask","updateTaskRequest","addTaskRequest","ApproveRejectModal","onApproveReject","isShow","desc","replace","btnRightLoading","btnTextRight","btnTextLeft"],"sourceRoot":""}