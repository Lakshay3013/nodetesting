{"version":3,"file":"static/js/2355.a4867134.chunk.js","mappings":"8RAUA,MAmRA,EAnRiCA,IAC7B,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,MACR,kBACFC,EAAiB,uBACjBC,EAAsB,OACtBC,EAAM,kBACNC,EAAiB,oBACjBC,GACAP,GACGQ,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,CAAC,GAChCC,GAAWC,EAAAA,EAAAA,OACX,sBAAEC,EAAqB,kBAAEC,EAAiB,oBAAEC,IAAwBC,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,eAC/F,yBAAEC,EAAwB,qBAAEC,EAAoB,uBAAEC,IAA2BL,EAAAA,EAAAA,KAAYC,GAASA,EAAMK,cACxG,yBAAEC,EAAwB,qBAAEC,EAAoB,uBAAEC,IAA2BT,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,eACvGQ,EAAgBC,IAAqBjB,EAAAA,EAAAA,UAAS,KAC9CkB,EAAUC,IAAenB,EAAAA,EAAAA,WAAS,IAClCoB,EAAeC,IAAoBrB,EAAAA,EAAAA,UAAS,KAC5CsB,EAAqBC,IAA0BvB,EAAAA,EAAAA,UAAS,CAC3DwB,aAAc,GACdC,gBAAiB,GACjBC,UAAW,MAGfC,EAAAA,EAAAA,YAAU,KACNC,GAAkB,GACnB,IAEH,MAAMA,EAAmBA,KACrB3B,EAAS4B,EAAAA,GAAiBC,2BAA2B,GAEzDH,EAAAA,EAAAA,YAAU,KACN,IAAKlB,EAA0B,CAC3B,GAAIE,EACA,OAEJ,GAAID,GACmC,OAAX,OAApBA,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBqB,MAAc,CACpC,MAAMC,EAA0C,OAApBtB,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBuB,KAClDhB,EAAkBe,EACtB,CAER,IACD,CACCtB,EACAC,EACAF,KA2BJkB,EAAAA,EAAAA,YAAU,KACN,IAAKxB,EAAuB,CACxB,GAAIE,EAEA,YADAJ,EAASiC,EAAAA,GAAkBC,4BAA4B,uCAGvD/B,GAC+B,MAAV,OAAjBA,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmB2B,QACnB9B,EAASiC,EAAAA,GAAkBC,4BAA4B,uCACvDvC,IACAH,IAGZ,IACD,CACCU,EACAC,EACAC,IAGJ,MAAM+B,EAAgBC,IAClBvC,GAAUC,EAAU,CAAC,GACrB,MAAM,KAAEuC,EAAI,MAAEC,GAAUF,EAAMG,OAE9BjB,GAAuBkB,IACnB,MAAMC,EAAe,IACdD,EACH,CAACH,GAAOC,GAKZ,MAHa,oBAATD,IACAI,EAAahB,WAAYiB,EAAAA,EAAAA,IAAgBJ,IAEtCG,CAAY,GACrB,EAoDN,OA/CAf,EAAAA,EAAAA,YAAU,KACNJ,EAAuB,CACnBC,aAAiC,OAAnB3B,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqB+C,cACnCnB,iBAAoC,OAAnB5B,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqByC,OAAQ,GAC9CZ,WAA8B,OAAnB7B,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBgD,aAAc,KAElD1B,EAA+B,OAAnBtB,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBiD,WACjCzB,EAAoC,OAAnBxB,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBkD,IAAI,GAC3C,CAAClD,KAGJ8B,EAAAA,EAAAA,YAAU,KACN,IAAKd,EAA0B,CAC3B,GAAIE,EAEA,YADAd,EAASiC,EAAAA,GAAkBC,4BAA4B,0CAGvDrB,GACkC,MAAV,OAApBA,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBiB,QACtB9B,EAASiC,EAAAA,GAAkBC,4BAA4B,0CACvDvC,IACAH,IAGZ,IACD,CACCoB,EACAC,EACAC,KAKJY,EAAAA,EAAAA,YAAU,KACQ,GAAVhC,IACA4B,EAAuB,CACnBC,aAAc,GACdC,gBAAiB,GACjBC,UAAW,KAEfhC,EAAuB,IACvBK,EAAU,CAAC,GAEf,GACD,CAACJ,KAIAqD,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIC,EAAAA,EAAAA,MAAA,OAAKC,UAAW,8CAA6CzD,EAAS,OAAS,IAAM0D,UAAW,EAC5FC,MAAO,CAAEC,WAAY5D,EAAS,UAAY,UAAWuD,SAAA,EAErDC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBF,SAAA,EAC7BC,EAAAA,EAAAA,MAAA,MAAIC,UAAU,6CAA4CF,SAAA,CAAErD,EAAsB,SAAW,aAAa,mBAC1GmD,EAAAA,EAAAA,KAAA,UAAQQ,KAAK,SAASJ,UAAU,YAAY,kBAAgB,YAAY,aAAW,QAC/EK,QAASA,IAAM7D,UAGvBoD,EAAAA,EAAAA,KAAA,OAAKI,UAAU,iBAAgBF,UAC3BC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWF,SAAA,EACtBC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKF,SAAA,EAChBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,WAAUF,UACrBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,kBAAiBF,UAC5BF,EAAAA,EAAAA,KAACU,EAAAA,GAAK,CAACC,KAAMpE,EAAE,2BAA4BqE,UAAU,SAG7DZ,EAAAA,EAAAA,KAAA,OAAKI,UAAU,WAAUF,UACrBC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBF,SAAA,EAC5BC,EAAAA,EAAAA,MAAA,UAAQC,UAAU,cACdd,KAAK,eACLC,MAA0B,OAAnBjB,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBE,aAC5BqC,SAAWC,GAAM1B,EAAa0B,GAC9BC,SAAS,GAAEb,SAAA,EAEXF,EAAAA,EAAAA,KAAA,UAAQT,MAAM,GAAGyB,QAAM,EAACC,UAAQ,EAAAf,SAAC,yBAChClC,IAAgC,OAAdA,QAAc,IAAdA,OAAc,EAAdA,EAAgBkD,QAAS,IAC1B,OAAdlD,QAAc,IAAdA,OAAc,EAAdA,EAAgBmD,KAAI,CAACvD,EAAYwD,KAAUpB,EAAAA,EAAAA,KAAA,UACvCT,MAAiB,OAAV3B,QAAU,IAAVA,OAAU,EAAVA,EAAYmC,IAAIG,SAEZ,OAAVtC,QAAU,IAAVA,OAAU,EAAVA,EAAY0B,cAIlB,OAANxC,QAAM,IAANA,OAAM,EAANA,EAAQ0B,gBACLwB,EAAAA,EAAAA,KAACqB,EAAAA,GAAW,CAACV,KAAM7D,EAAO0B,qBAItCwB,EAAAA,EAAAA,KAAA,OAAKI,UAAU,WAAUF,UACrBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,kBAAiBF,UAC5BF,EAAAA,EAAAA,KAACU,EAAAA,GAAK,CAACC,KAAMpE,EAAE,eAAgBqE,UAAU,SAGjDZ,EAAAA,EAAAA,KAAA,OAAKI,UAAU,WAAUF,UACrBC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBF,SAAA,EAC5BF,EAAAA,EAAAA,KAACsB,EAAAA,GAAK,CACFd,KAAK,OACLe,YAAahF,EAAE,gCACfgD,OAA0B,OAAnBjB,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBG,kBAAmB,GAC/Ca,KAAK,kBACLuB,SAAWC,GAAM1B,EAAa0B,MAG3B,OAANhE,QAAM,IAANA,OAAM,EAANA,EAAQ2B,mBACLuB,EAAAA,EAAAA,KAACqB,EAAAA,GAAW,CAACV,KAAM7D,EAAO2B,2BAK1C0B,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKF,SAAA,EAChBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,WAAUF,UACrBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,kBAAiBF,UAC5BF,EAAAA,EAAAA,KAACU,EAAAA,GAAK,CAACC,KAAMpE,EAAE,oBAAqBqE,UAAU,SAGtDZ,EAAAA,EAAAA,KAAA,OAAKI,UAAU,WAAUF,UACrBC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBF,SAAA,EAC5BF,EAAAA,EAAAA,KAACsB,EAAAA,GAAK,CACFd,KAAK,OACLe,YAAahF,EAAE,0BACfgD,MAA0B,OAAnBjB,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBI,UAC5BY,KAAK,YACLuB,SAAWC,GAAM1B,EAAa0B,MAE3B,OAANhE,QAAM,IAANA,OAAM,EAANA,EAAQ4B,aACLsB,EAAAA,EAAAA,KAACqB,EAAAA,GAAW,CAACV,KAAM7D,EAAO4B,qBAK1CyB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,MAAKF,SAAA,EAChBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,WAAUF,UACrBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,kBAAiBF,UAC5BF,EAAAA,EAAAA,KAACU,EAAAA,GAAK,CAACC,KAAMpE,EAAE,0BAGvByD,EAAAA,EAAAA,KAAA,OAAKI,UAAU,WAAUF,UACrBF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,kBAAiBF,UAC5BF,EAAAA,EAAAA,KAACwB,EAAAA,GAAY,CAETC,GAAI,YACJC,QAASxD,EACTkB,aAAe0B,GAAM3C,GAAaD,GAClCoB,KAAM,aAJD,0BAW7BU,EAAAA,EAAAA,KAAA,OAAKI,UAAU,mBAAkBF,UAC7BF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,sDAAqDF,UAChEF,EAAAA,EAAAA,KAAC2B,EAAAA,GAAY,CACThB,KAA4BpE,EAAtBM,EAAwB,cAAmB,eACjD+E,WAAY,uBACZC,YAAaA,IAxNXC,WACtB,MAAMC,QAA2BC,EAAAA,EAAAA,IAAeC,EAAAA,GAAsB3D,GACtE,GAAIyD,EAAmBG,QAAS,CAC5BnF,EAAU,CAAC,GACX,IAAIoF,EAAS,CACTvC,cAAkC,OAAnBtB,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBE,aACpCc,MAAyB,OAAnBhB,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBG,kBAAmB,GAC9CoB,YAA+B,OAAnBvB,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBI,YAAa,GAC9CoB,UAAW5B,GAGXrB,GACAsF,EAAY,IAAI/D,EAChBnB,EAASiC,EAAAA,GAAkBkD,yBAAyBD,KAGpDlF,EAASiC,EAAAA,GAAkBmD,sBAAsBF,GAEzD,MACIpF,EAAUgF,EAAmBjF,OACjC,EAoMuCwF,GACnBC,UAAW1F,EAAsBgB,EAA2BV,YAK7E,EC/IX,EAhIoBqF,KAClB,MAAM,EAACjG,IAAGC,EAAAA,EAAAA,KACJS,GAAWC,EAAAA,EAAAA,OACX,qBACJuF,EAAoB,uBACpBC,EAAsB,yBACtBC,EAAwB,yBACxBC,EAAwB,qBACxBC,EAAoB,uBACpBC,IAEExF,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,eACxBuF,EAAiBC,IAAsBhG,EAAAA,EAAAA,UAAS,KAChDH,EAAqBH,IAA0BM,EAAAA,EAAAA,UAAS,KACxDL,EAAQsG,IAAajG,EAAAA,EAAAA,WAAS,IAC9BkG,EAAkBC,IAAsBnG,EAAAA,EAAAA,WAAS,IACjDoG,EAAcC,IAAmBrG,EAAAA,EAAAA,aACjCsG,EAAaC,IAAkBvG,EAAAA,EAAAA,UAAmB,OAAVwG,EAAAA,SAAU,IAAVA,EAAAA,QAAU,EAAVA,EAAAA,GAAYC,OAE3D9E,EAAAA,EAAAA,YAAU,KACRlC,GAAmB,GAClB,CAAC6G,IAEJ,MAAM1G,EAAoBA,KACxBqG,GAAWtG,EAAO,EAEdF,EAAoBA,KACxB,MAAM0F,EAAS,CACbsB,KAAMH,EACNI,MAAiB,OAAVF,EAAAA,SAAU,IAAVA,EAAAA,QAAU,EAAVA,EAAAA,GAAYE,OAErBzG,EAASiC,EAAAA,GAAkByE,yBAAyBxB,GAAQ,GAG9DxD,EAAAA,EAAAA,YAAU,KACR,IAAKgE,EAA0B,CAC7B,GAAID,EACF,OAEED,GACgC,MAAV,OAApBA,QAAoB,IAApBA,OAAoB,EAApBA,EAAsB1D,OACxBiE,EAAuC,OAApBP,QAAoB,IAApBA,OAAoB,EAApBA,EAAsBxD,KAG/C,IACC,CACDwD,EACAC,EACAC,IA2CF,OAxBAhE,EAAAA,EAAAA,YAAU,KACR,IAAKiE,EAA0B,CAC7B,GAAIE,EAEF,YADA7F,EAASiC,EAAAA,GAAkBC,4BAA4B,0CAIf,IAADyE,EADzC,GAAIf,EACF,GAAkC,MAAV,OAApBA,QAAoB,IAApBA,OAAoB,EAApBA,EAAsB9D,MACxB9B,EAASiC,EAAAA,GAAkBC,4BAA4B,0CACnDmE,EAAc,GAAuC,KAAnB,OAAfP,QAAe,IAAfA,GAAqB,QAANa,EAAfb,EAAiB9D,YAAI,IAAA2E,OAAN,EAAfA,EAAuB1C,QAC5CqC,GAAgBM,GAAOA,EAAO,IAE9BpH,GAIR,IACC,CACDoG,EACAC,EACAF,KAKAzC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAKI,UAAU,gCAA+BF,UAC9CF,EAAAA,EAAAA,KAAC2B,EAAAA,GAAY,CACTC,WAAY,6BACZC,YAAaA,IAAMjF,IACnB+D,KAAMpE,EAAE,+BAGZyD,EAAAA,EAAAA,KAAC8D,EAAAA,EAAgB,CACff,gBAAiBA,EACjBR,UAAWI,EACXjG,uBAAwBA,EACxBE,kBAAmBA,EACnBmH,oBA3CuBtC,IAC3B0B,GAAsBD,GACtBG,EAAgB5B,EAAG,EA0Cf6B,YAAaA,EACbC,eAAgBA,KAGlBvD,EAAAA,EAAAA,KAACgE,EAAuB,CACtBvH,kBAAmBA,EACnBC,uBAAwBA,EACxBC,OAAQA,EACRC,kBAAmBA,EACnBC,oBAAqBA,IAErBqG,IACAlD,EAAAA,EAAAA,KAACiE,EAAAA,EAAkB,CACjBC,gBAlE0BC,CAAC3D,EAAMiB,KACvC,GAAIjB,EAAM,CACR,IAAI2B,EAAS,CACXpC,IAAKqD,GAEPnG,EAA0B,OAAjBiC,EAAAA,SAAiB,IAAjBA,EAAAA,QAAiB,EAAjBA,EAAAA,GAAmBkF,yBAAyBjC,GACvD,CACAgB,GAAsBD,EAAkB,EA4DlCmB,OAAQnB,EACRoB,KAAM/H,EAAE,2BAA2BgI,QAAQ,KAAK,eAChDC,gBAAiB5B,MAEjB,C,wIC/HV,MA6FA,EA7F0BtG,IACxB,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,MACR,gBACJuG,EAAe,UACfR,EAAS,uBACT7F,EAAsB,kBACtBE,EAAiB,oBACjBmH,EAAmB,eACnBR,EAAc,YACdD,GACEhH,GAEGmI,EAAUC,IAAe1H,EAAAA,EAAAA,aAMhC2B,EAAAA,EAAAA,YAAU,KACR+F,EAAY3B,EAAgB,GAC3B,CAACA,IAGJ,MAAM4B,GAAcC,EAAAA,EAAAA,UAAQ,MAC1BC,GAAIA,CAACC,EAAG1D,KACNpB,EAAAA,EAAAA,KAAA,QAAAE,SAAOkB,EAAQ,IAEjBtB,UAAWiF,IACT/E,EAAAA,EAAAA,KAAA,QACEI,UAAW,UAAS4E,EAAAA,EAAAA,IAAcD,EAAKjF,UAAY,SAAW,cAAcI,SAE3E6E,EAAKjF,UAAY,SAAW,aAGjCmF,WAAYF,GAAQG,IAAOH,EAAKE,YAAYE,OAAO,cACnDC,OAAQL,IACN5E,EAAAA,EAAAA,MAAA,OAAKC,UAAU,sBAAqBF,SAAA,EAClCF,EAAAA,EAAAA,KAAA,UAAQQ,KAAK,SAASJ,UAAU,4BAC9B,iBAAe,WAAW,gBAAc,QAAOF,UAC/CF,EAAAA,EAAAA,KAAA,KAAGI,UAAU,iCAEfD,EAAAA,EAAAA,MAAA,MAAIC,UAAU,gBAAeF,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,UACEC,EAAAA,EAAAA,MAAA,QAAMC,UAAU,gBACdK,QAASA,KA9BnB/D,EA8B2CqI,QA7B3CnI,KA6BiDsD,SAAA,EAEvCF,EAAAA,EAAAA,KAACqF,EAAAA,GAAI,CAACjF,UAAW,6BAA8B,cAE9B,KAAhB,OAAJ2E,QAAI,IAAJA,OAAI,EAAJA,EAAMO,aAAmBtF,EAAAA,EAAAA,KAAA,MAAAE,UACxBC,EAAAA,EAAAA,MAAA,QAAMC,UAAU,gBACdK,QAASA,IAAMsD,EAAoBgB,EAAKhF,KAAKG,SAAA,EAE7CF,EAAAA,EAAAA,KAACqF,EAAAA,GAAI,CAACjF,UAAW,qBAAsB,uBAK/C,CACF1D,EACAE,EACAmH,IAcF,OACE/D,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACEF,EAAAA,EAAAA,KAACuF,EAAAA,GAAW,CACVtG,KAAc,OAARwF,QAAQ,IAARA,OAAQ,EAARA,EAAUxF,KAChBuG,OAhBS,CACb,CAAEC,IAAK,KAAMC,MAAO,OACpB,CAAED,IAAK,kBAAmBC,MAAO,mBACjC,CAAED,IAAK,OAAQC,MAAO,QACtB,CAAED,IAAK,aAAcC,MAAO,cAC5B,CAAED,IAAK,YAAaC,MAAO,mBAC3B,CAAED,IAAK,YAAaC,MAAO,UAC3B,CAAED,IAAK,aAAcC,MAAO,cAC5B,CAAED,IAAK,SAAUC,MAAO,WASpBnD,UAAWA,EACXiB,YAAY,EACZF,YAAaA,EACbC,eAAgBA,EAChBoC,WAAoB,OAARlB,QAAQ,IAARA,OAAQ,EAARA,EAAUkB,WACtBC,UAAW,cAEXjB,YAAaA,KAEd,C","sources":["components/admin/designation/CreateUpdateDesignation.js","components/admin/designation/Designation.js","components/admin/designation/DesignationTable.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { CustomButton, CustomError } from '../../globalComponents';\r\nimport { departmentAction, designationAction } from '../../../core/resource/actions';\r\nimport { addDesignationSchema } from '../../../utils/ValidationSchema';\r\nimport { validateSchema } from '../../../utils/ValidationHelper';\r\nimport { useCustomTranslation } from '../../../translation';\r\nimport { CustCheckbox, Input, Label } from '../../commanComponent';\r\nimport { createShortName } from '../../../utils/common';\r\n\r\nconst CreateUpdateDesignation = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        getAllDesignation,\r\n        setSelectedDesignation,\r\n        isOpen,\r\n        toggleDesignation,\r\n        selectedDesignation,\r\n    } = props\r\n    const [errors, setErrors] = useState({});\r\n    const dispatch = useDispatch();\r\n    const { addDesignationPending, addDesignationRes, addDesignationError } = useSelector(state => state.designation);\r\n    const { getDepartmentListPending, getDepartmentListRes, getDepartmentListError } = useSelector(state => state.department);\r\n    const { updateDesignationPending, updateDesignationRes, updateDesignationError } = useSelector(state => state.designation);\r\n    const [departmentList, setDepartmentList] = useState([])\r\n    const [isActive, setIsActive] = useState(true);\r\n    const [designaitonId, setDesignationId] = useState('')\r\n    const [designationFromData, setDesignationFromData] = useState({\r\n        departmentId: '',\r\n        designationName: '',\r\n        shortName: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        getAllDepartment()\r\n    }, [])\r\n\r\n    const getAllDepartment = () => {\r\n        dispatch(departmentAction.getDepartmentListRequest());\r\n    }\r\n    useEffect(() => {\r\n        if (!getDepartmentListPending) {\r\n            if (getDepartmentListError) {\r\n                return;\r\n            }\r\n            if (getDepartmentListRes) {\r\n                if (getDepartmentListRes?.code === 200) {\r\n                    const departmentResposnse = getDepartmentListRes?.data\r\n                    setDepartmentList(departmentResposnse)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getDepartmentListRes,\r\n        getDepartmentListError,\r\n        getDepartmentListPending\r\n    ]);\r\n\r\n\r\n    const createDesignation = async () => {\r\n        const validationResponse = await validateSchema(addDesignationSchema, designationFromData);\r\n        if (validationResponse.isValid) {\r\n            setErrors({});\r\n            let params = {\r\n                department_id: designationFromData?.departmentId,\r\n                name: designationFromData?.designationName || '',\r\n                short_name: designationFromData?.shortName || '',\r\n                is_active: isActive\r\n\r\n            }\r\n            if (selectedDesignation) {\r\n                params[\"_id\"] = designaitonId\r\n                dispatch(designationAction.updateDesignationRequest(params));\r\n            } else {\r\n\r\n                dispatch(designationAction.addDesignationRequest(params));\r\n            }\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!addDesignationPending) {\r\n            if (addDesignationError) {\r\n                dispatch(designationAction.handleClearDesignationStore('HANDLE_CLEAR_ADD_DESIGNATION_STORE'))\r\n                return;\r\n            }\r\n            if (addDesignationRes) {\r\n                if (addDesignationRes?.code == 200) {\r\n                    dispatch(designationAction.handleClearDesignationStore('HANDLE_CLEAR_ADD_DESIGNATION_STORE'))\r\n                    toggleDesignation()\r\n                    getAllDesignation()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        addDesignationPending,\r\n        addDesignationRes,\r\n        addDesignationError,\r\n    ]);\r\n\r\n    const handleChange = (event) => {\r\n        errors && setErrors({});\r\n        const { name, value } = event.target\r\n\r\n        setDesignationFromData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: value,\r\n            };\r\n            if (name === 'designationName') {\r\n                updatedState.shortName = createShortName(value);\r\n            }\r\n            return updatedState;\r\n        });\r\n\r\n    }\r\n\r\n    //update designation \r\n    useEffect(() => {\r\n        setDesignationFromData({\r\n            departmentId: selectedDesignation?.department_id,\r\n            designationName: selectedDesignation?.name || '',\r\n            shortName: selectedDesignation?.short_name || '',\r\n        })\r\n        setIsActive(selectedDesignation?.is_active)\r\n        setDesignationId(selectedDesignation?._id)\r\n    }, [selectedDesignation])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!updateDesignationPending) {\r\n            if (updateDesignationError) {\r\n                dispatch(designationAction.handleClearDesignationStore('HANDLE_CLEAR_UPDATE_DESIGNATION_STORE'))\r\n                return;\r\n            }\r\n            if (updateDesignationRes) {\r\n                if (updateDesignationRes?.code == 200) {\r\n                    dispatch(designationAction.handleClearDesignationStore('HANDLE_CLEAR_UPDATE_DESIGNATION_STORE'))\r\n                    toggleDesignation();\r\n                    getAllDesignation();\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updateDesignationPending,\r\n        updateDesignationRes,\r\n        updateDesignationError\r\n    ]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (isOpen == false) {\r\n            setDesignationFromData({\r\n                departmentId: '',\r\n                designationName: '',\r\n                shortName: ''\r\n            })\r\n            setSelectedDesignation('')\r\n            setErrors({});\r\n            // setDesignationId()\r\n        }\r\n    }, [isOpen])\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={`offcanvas offcanvas-end creatNewTicketOff ${isOpen ? 'show' : ''}`} tabIndex={-1}\r\n                style={{ visibility: isOpen ? 'visible' : 'hidden' }}\r\n            >\r\n                <div className=\"offcanvas-header\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{selectedDesignation ? \"Update\" : \"Create New\"} Designation</h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                        onClick={() => toggleDesignation()}\r\n                    />\r\n                </div>\r\n                <div className=\"offcanvas-body\">\r\n                    <div className=\"formPanel\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.selectDepartment\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <select className=\"form-select\"\r\n                                        name='departmentId'\r\n                                        value={designationFromData?.departmentId}\r\n                                        onChange={(e) => handleChange(e)}\r\n                                        disabled=''\r\n                                    >\r\n                                        <option value=\"\" hidden selected>Select Department...</option>\r\n                                        {departmentList && departmentList?.length > 0 &&\r\n                                            departmentList?.map((department, index) => <option\r\n                                                value={department?._id}\r\n                                            >\r\n                                                {department?.name}\r\n                                            </option>\r\n                                            )}\r\n                                    </select>\r\n                                    {errors?.departmentId && (\r\n                                        <CustomError text={errors.departmentId} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.name\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.designationName\")}\r\n                                        value={designationFromData?.designationName || ''}\r\n                                        name=\"designationName\"\r\n                                        onChange={(e) => handleChange(e)}\r\n                                    />\r\n\r\n                                    {errors?.designationName && (\r\n                                        <CustomError text={errors.designationName} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.shortName\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.shortName\")}\r\n                                        value={designationFromData?.shortName}\r\n                                        name=\"shortName\"\r\n                                        onChange={(e) => handleChange(e)}\r\n                                    />\r\n                                    {errors?.shortName && (\r\n                                        <CustomError text={errors.shortName} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.isActive\")} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustCheckbox\r\n                                        key={\"is_active\"}\r\n                                        id={`is_active`}\r\n                                        checked={isActive}\r\n                                        handleChange={(e) => setIsActive(!isActive)}\r\n                                        name={\"is_active\"}  \r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"offcanvas-footer\">\r\n                    <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                        <CustomButton\r\n                            text={selectedDesignation ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                            classNames={\"btn btn-org-gradient\"}\r\n                            handleClick={() => createDesignation()}\r\n                            isLoading={selectedDesignation ? updateDesignationPending : addDesignationPending}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateUpdateDesignation\r\n","import React, { useEffect, useState } from 'react'\r\nimport DesignationTable from './DesignationTable'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { designationAction } from '../../../core/resource/actions'\r\nimport ApproveRejectModal from '../../modal/ApproveRejectModal'\r\nimport { pagination } from '../../../utils/Constants.config'\r\nimport { useCustomTranslation } from '../../../translation'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport CreateUpdateDesignation from './CreateUpdateDesignation'\r\n\r\nconst Designation = () => {\r\n  const {t}=useCustomTranslation()\r\n  const dispatch = useDispatch();\r\n  const { \r\n    getAllDesignationRes,\r\n    getAllDesignationError,\r\n    getAllDesignationPending,\r\n    deleteDesignationPending,\r\n    deleteDesignationRes,\r\n    deleteDesignationError\r\n\r\n  } = useSelector(state => state.designation);\r\n  const [designationList, setDesignationList] = useState('')\r\n  const [selectedDesignation, setSelectedDesignation] = useState('')\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isShowDeleteModal,setIsShowDeleteModal]=useState(false)\r\n  const [deleteDesiId, setDeleteDesiId] = useState()\r\n  const [currentPage, setCurrentPage] = useState(pagination?.page);\r\n\r\n  useEffect(() => {\r\n    getAllDesignation()\r\n  }, [currentPage])\r\n\r\n  const toggleDesignation = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n  const getAllDesignation = () => {\r\n    const params = {\r\n      page: currentPage,\r\n      limit: pagination?.limit,\r\n    }\r\n    dispatch(designationAction.getAllDesignationRequest(params));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!getAllDesignationPending) {\r\n      if (getAllDesignationError) {\r\n        return;\r\n      }\r\n      if (getAllDesignationRes) {\r\n        if (getAllDesignationRes?.code == 200) {\r\n          setDesignationList(getAllDesignationRes?.data)\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    getAllDesignationRes,\r\n    getAllDesignationError,\r\n    getAllDesignationPending\r\n  ]);\r\n\r\n  //delete designation\r\n\r\n  const onDeleteCancelDesignation = (type, id) => {\r\n    if (type) {\r\n      let params = {\r\n        _id: deleteDesiId\r\n      }\r\n      dispatch(designationAction?.deleteDesignationRequest(params))\r\n    }\r\n    setIsShowDeleteModal(!isShowDeleteModal)\r\n  }\r\n  const onHandleDeleteModal = (id) => {\r\n    setIsShowDeleteModal(!isShowDeleteModal)\r\n    setDeleteDesiId(id)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!deleteDesignationPending) {\r\n      if (deleteDesignationError) {\r\n        dispatch(designationAction.handleClearDesignationStore('HANDLE_CLEAR_DELETE_DESIGNATION_STORE'))\r\n        return;\r\n      }\r\n      if (deleteDesignationRes) {\r\n        if (deleteDesignationRes?.code == 200) {\r\n          dispatch(designationAction.handleClearDesignationStore('HANDLE_CLEAR_DELETE_DESIGNATION_STORE'))\r\n          if (currentPage > 1 && designationList?.data?.length === 1) {\r\n            setCurrentPage((pre => pre -= 1))\r\n          } else {\r\n            getAllDesignation()\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    deleteDesignationRes,\r\n    deleteDesignationError,\r\n    deleteDesignationPending\r\n  ]);\r\n\r\n\r\n  return (\r\n    <div>\r\n      <div className=\" d-flex  justify-content-end \">\r\n      <CustomButton\r\n          classNames={\"btn btn-primary gradientBg\"}\r\n          handleClick={() => toggleDesignation(\"createDesignation\")}\r\n          text={t(\"btns.createDesignation\")}\r\n        />\r\n      </div>\r\n      <DesignationTable\r\n        designationList={designationList}\r\n        isLoading={getAllDesignationPending}\r\n        setSelectedDesignation={setSelectedDesignation}\r\n        toggleDesignation={toggleDesignation}\r\n        onHandleDeleteModal={onHandleDeleteModal}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n\r\n      />\r\n      <CreateUpdateDesignation\r\n        getAllDesignation={getAllDesignation}\r\n        setSelectedDesignation={setSelectedDesignation}\r\n        isOpen={isOpen}\r\n        toggleDesignation={toggleDesignation}\r\n        selectedDesignation={selectedDesignation}\r\n      />\r\n       {isShowDeleteModal && (\r\n        <ApproveRejectModal\r\n          onApproveReject={onDeleteCancelDesignation}\r\n          isShow={isShowDeleteModal}\r\n          desc={t(\"alerts.deletePopup.desc\").replace('$1',\"Designation\")}\r\n          btnRightLoading={deleteDesignationPending}\r\n        />)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Designation\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment-timezone'\r\nimport { getBadgeColor } from '../../../utils/common'\r\nimport { CustomTable } from '../../reuseableComponents'\r\nimport { useCustomTranslation } from '../../../translation'\r\nimport { Icon } from '../../commanComponent'\r\nconst DesignationTable = (props) => {\r\n  const { t } = useCustomTranslation()\r\n  const {\r\n    designationList,\r\n    isLoading,\r\n    setSelectedDesignation,\r\n    toggleDesignation,\r\n    onHandleDeleteModal,\r\n    setCurrentPage,\r\n    currentPage\r\n  } = props\r\n\r\n  const [desiList, setDesiList] = useState()\r\n  const updateDesignation = (data) => {\r\n    setSelectedDesignation(data)\r\n    toggleDesignation()\r\n  }\r\n\r\n  useEffect(() => {\r\n    setDesiList(designationList)\r\n  }, [designationList])\r\n\r\n\r\n  const scopedSlots = useMemo(() => ({\r\n    sn: (_, index) => (\r\n      <span>{index + 1}</span>\r\n    ),\r\n    is_active: item => (\r\n      <span\r\n        className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n      >\r\n        {item.is_active ? \"Active\" : \"Inactive\"}\r\n      </span>\r\n    ),\r\n    created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n    action: item => (\r\n      <div className=\"btn-group actionDrp\">\r\n        <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n          data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n          <i className=\"bi bi-three-dots-vertical\"></i>\r\n        </button>\r\n        <ul className=\"dropdown-menu\">\r\n          <li>\r\n            <span className=\"dropdown-item\"\r\n              onClick={() => updateDesignation(item)}\r\n            >\r\n              <Icon className={\"bi bi-pencil-square me-1\"} />Update</span>\r\n          </li>\r\n          {item?.emp_count === 0 && <li>\r\n            <span className=\"dropdown-item\"\r\n              onClick={() => onHandleDeleteModal(item._id)}\r\n            >\r\n              <Icon className={\"bi bi-trash me-1\"} />Delete</span>\r\n          </li>}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }), [\r\n    setSelectedDesignation,\r\n    toggleDesignation,\r\n    onHandleDeleteModal\r\n  ]);\r\n  const fields = [\r\n    { key: 'sn', label: 'S.N' },\r\n    { key: 'department_name', label: 'Department Name' },\r\n    { key: 'name', label: 'Name' },\r\n    { key: 'short_name', label: 'Short Name' },\r\n    { key: 'emp_count', label: 'Total Employees' },\r\n    { key: 'is_active', label: 'Status' },\r\n    { key: 'created_at', label: 'Created At' },\r\n    { key: 'action', label: 'Action' }\r\n  ];\r\n\r\n\r\n  return (\r\n    <>\r\n      <CustomTable\r\n        data={desiList?.data}\r\n        fields={fields}\r\n        isLoading={isLoading}\r\n        pagination={true}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n        totalPages={desiList?.totalPages}\r\n        tableName={\"Designation\"}\r\n        // onSearch={handleSearch}\r\n        scopedSlots={scopedSlots}\r\n      />\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default DesignationTable\r\n"],"names":["props","t","useCustomTranslation","getAllDesignation","setSelectedDesignation","isOpen","toggleDesignation","selectedDesignation","errors","setErrors","useState","dispatch","useDispatch","addDesignationPending","addDesignationRes","addDesignationError","useSelector","state","designation","getDepartmentListPending","getDepartmentListRes","getDepartmentListError","department","updateDesignationPending","updateDesignationRes","updateDesignationError","departmentList","setDepartmentList","isActive","setIsActive","designaitonId","setDesignationId","designationFromData","setDesignationFromData","departmentId","designationName","shortName","useEffect","getAllDepartment","departmentAction","getDepartmentListRequest","code","departmentResposnse","data","designationAction","handleClearDesignationStore","handleChange","event","name","value","target","prevState","updatedState","createShortName","department_id","short_name","is_active","_id","_jsx","_Fragment","children","_jsxs","className","tabIndex","style","visibility","type","onClick","Label","text","required","onChange","e","disabled","hidden","selected","length","map","index","CustomError","Input","placeholder","CustCheckbox","id","checked","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","addDesignationSchema","isValid","params","updateDesignationRequest","addDesignationRequest","createDesignation","isLoading","Designation","getAllDesignationRes","getAllDesignationError","getAllDesignationPending","deleteDesignationPending","deleteDesignationRes","deleteDesignationError","designationList","setDesignationList","setIsOpen","isShowDeleteModal","setIsShowDeleteModal","deleteDesiId","setDeleteDesiId","currentPage","setCurrentPage","pagination","page","limit","getAllDesignationRequest","_designationList$data","pre","DesignationTable","onHandleDeleteModal","CreateUpdateDesignation","ApproveRejectModal","onApproveReject","onDeleteCancelDesignation","deleteDesignationRequest","isShow","desc","replace","btnRightLoading","desiList","setDesiList","scopedSlots","useMemo","sn","_","item","getBadgeColor","created_at","moment","format","action","Icon","emp_count","CustomTable","fields","key","label","totalPages","tableName"],"sourceRoot":""}