{"version":3,"file":"static/js/222.105f7646.chunk.js","mappings":"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","sources":["components/admin/role/CreateUpdateRole.js","components/admin/role/Role.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useSelector } from 'react-redux'\r\nimport { useCustomTranslation } from '../../../translation';\r\nimport { validateSchema } from '../../../utils/ValidationHelper';\r\nimport { addUpdateRoleSchema } from '../../../utils/ValidationSchema';\r\nimport { CustCheckbox, Input, Label } from '../../commanComponent';\r\nimport { CustomButton, CustomError } from '../../globalComponents';\r\nimport { createShortName } from '../../../utils/common';\r\n\r\n\r\nconst CreateUpdateRole = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        openCreateUpdateRoleModal,\r\n        toggleRoleModal,\r\n        selectedRoleData,\r\n        handleCreateUpdateRole\r\n    } = props\r\n    const [errors, setErrors] = useState({});\r\n    const {\r\n        addRolePending,\r\n        updateRolePending,\r\n    } = useSelector(state => state.roles);\r\n    const [isActive, setIsActive] = useState(true);\r\n    const [roleData, setRoleData] = useState({\r\n        roleName: '',\r\n        shortName: '',\r\n        isActive: true\r\n    })\r\n\r\n    const submitCreateUpdateRole = async () => {\r\n        const validationResponse = await validateSchema(addUpdateRoleSchema, roleData);\r\n        if (validationResponse.isValid) {\r\n            setErrors({});\r\n            const params = {\r\n                name: roleData?.roleName || '',\r\n                short_name: roleData?.shortName || '',\r\n                is_active: roleData?.isActive\r\n            }\r\n            handleCreateUpdateRole(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    const handleChange = (e,fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e.target ? e.target : { value: e };\r\n\r\n        setRoleData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n            if (name === 'roleName') {\r\n                updatedState.shortName = createShortName(value);\r\n            }\r\n            return updatedState;\r\n        });\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    }\r\n\r\n    // Update Role \r\n    useEffect(() => {\r\n        if (selectedRoleData) {\r\n            setRoleData({\r\n                roleName: selectedRoleData?.name || '',\r\n                shortName: selectedRoleData?.short_name || '',\r\n                isActive:selectedRoleData?.is_active\r\n            })\r\n           \r\n        }\r\n    }, [selectedRoleData])\r\n\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetRoleData()\r\n        })\r\n    }, [openCreateUpdateRoleModal])\r\n\r\n\r\n    const resetRoleData = () => {\r\n        setRoleData({\r\n            roleName: '',\r\n            shortName: '',\r\n        })\r\n        setErrors({});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={`offcanvas offcanvas-end creatNewTicketOff ${openCreateUpdateRoleModal ? 'show' : ''}`} tabIndex={-1}\r\n                style={{\r\n                    visibility: openCreateUpdateRoleModal ? 'visible' : 'hidden',\r\n                    width: \"800px\"\r\n                }}\r\n            >\r\n                <div className=\"offcanvas-header\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\"> {selectedRoleData ? \"Update\" : \"Create New\"} Role</h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                        onClick={() => toggleRoleModal()}\r\n                    />\r\n                </div>\r\n                <div className=\"offcanvas-body\">\r\n                    <div className=\"formPanel\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.name\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.roleName\")}\r\n                                        value={roleData?.roleName || ''}\r\n                                        name=\"roleName\"\r\n                                        onChange={(e) => handleChange(e)}\r\n                                    />\r\n                                    {errors?.roleName && (\r\n                                        <CustomError text={errors.roleName} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group\">\r\n                                    <Label text={t(\"labels.shortName\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.shortName\")}\r\n                                        value={roleData?.shortName}\r\n                                        name=\"shortName\"\r\n                                        onChange={(e) => handleChange(e)}\r\n                                    />\r\n\r\n                                    {errors?.shortName && (\r\n                                        <CustomError text={errors.shortName} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.isActive\")} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustCheckbox\r\n                                        key={\"is_active\"}\r\n                                        id={`is_active`}\r\n                                        // label={\"Active\"}\r\n                                        checked={roleData?.isActive}\r\n                                        handleChange={(e) => handleChange(e)}\r\n                                        name={\"isActive\"}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n                <div className=\"offcanvas-footer\">\r\n                    <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                        <CustomButton\r\n                            text={selectedRoleData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                            classNames={\"btn btn-org-gradient\"}\r\n                            handleClick={() => submitCreateUpdateRole()}\r\n                            isLoading={selectedRoleData ? updateRolePending : addRolePending}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {openCreateUpdateRoleModal && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateUpdateRole\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport ApproveRejectModal from '../../modal/ApproveRejectModal'\r\nimport { useCustomTranslation } from '../../../translation'\r\nimport { CustomTable } from '../../reuseableComponents'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport { rolesActions } from '../../../core/resource/actions'\r\nimport { pagination } from '../../../utils/Constants.config'\r\nimport { Icon } from '../../commanComponent'\r\nimport { dateFormate, getBadgeColor } from '../../../utils/common'\r\nimport CreateUpdateRole from './CreateUpdateRole'\r\n\r\nconst Role = () => {\r\n    const { t } = useCustomTranslation()\r\n    const dispatch = useDispatch();\r\n    const {\r\n        getAllRolesDataRes,\r\n        getAllRolesDataError,\r\n        getAllRolesDataPending,\r\n\r\n        deleteRolePending,\r\n        deleteRoleRes,\r\n        deleteRoleError,\r\n\r\n        addRolePending,\r\n        addRoleRes,\r\n        addRoleError,\r\n\r\n        updateRolePending,\r\n        updateRoleRes,\r\n        updateRoleError\r\n    } = useSelector(state => state.roles);\r\n\r\n    const [roleList, setRoleList] = useState('')\r\n    const [selectedRoleData, setSelectedRoleData] = useState('')\r\n    const [openCreateUpdateRoleModal, setOpenCreateUpdateRoleModal] = useState(false);\r\n    const [deleteRoleId, setDeleteRoleId] = useState()\r\n    const [isShowDeleteModal, setIsShowDeleteModal] = useState(false)\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n\r\n\r\n    /* Create Update Role */\r\n    const toggleRoleModal = (data) => {\r\n        if (!data) {\r\n            setSelectedRoleData('')\r\n        } else {\r\n            setSelectedRoleData(data)\r\n        }\r\n        setOpenCreateUpdateRoleModal(!openCreateUpdateRoleModal)\r\n    }\r\n\r\n    const handleCreateUpdateRole = (params) => {\r\n        if (selectedRoleData) {\r\n            params['_id'] = selectedRoleData?._id\r\n            dispatch(rolesActions.updateRoleRequest(params));\r\n        }\r\n        else {\r\n            dispatch(rolesActions.addRoleRequest(params));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!addRolePending) {\r\n            if (addRoleError) {\r\n                dispatch(rolesActions.handleClearRolesStore('HANDLE_CLEAR_ADD_ROLE_STORE'))\r\n                return;\r\n            }\r\n            if (addRoleRes) {\r\n                if (addRoleRes?.code == 200) {\r\n                    dispatch(rolesActions.handleClearRolesStore('HANDLE_CLEAR_ADD_ROLE_STORE'))\r\n                    dispatch(rolesActions.handleClearRolesStore('HANDLE_CLEAR_GET_ROLE_LIST_STORE'))\r\n                    toggleRoleModal()\r\n                    getAllRoles();\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        addRolePending,\r\n        addRoleRes,\r\n        addRoleError,\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (!updateRolePending) {\r\n            if (updateRoleError) {\r\n                dispatch(rolesActions.handleClearRolesStore('HANDLE_CLEAR_UPDATE_ROLE_STORE'))\r\n                return;\r\n            }\r\n            if (updateRoleRes) {\r\n                if (updateRoleRes?.code == 200) {\r\n                    dispatch(rolesActions.handleClearRolesStore('HANDLE_CLEAR_UPDATE_ROLE_STORE'))\r\n                    dispatch(rolesActions.handleClearRolesStore('HANDLE_CLEAR_GET_ROLE_LIST_STORE'))\r\n                    getAllRoles();\r\n                    toggleRoleModal();\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updateRolePending,\r\n        updateRoleRes,\r\n        updateRoleError\r\n    ]);\r\n\r\n    /* Get All Roles */\r\n    useEffect(() => {\r\n        getAllRoles()\r\n    }, [currentPage])\r\n\r\n    const getAllRoles = () => {\r\n        const params = {\r\n            page: currentPage,\r\n            limit: pagination.limit,\r\n        }\r\n        dispatch(rolesActions.getAllRolesDataRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllRolesDataPending) {\r\n            if (getAllRolesDataError) {\r\n                return;\r\n            }\r\n            if (getAllRolesDataRes) {\r\n                if (getAllRolesDataRes?.code === 200) {\r\n                    setRoleList(getAllRolesDataRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllRolesDataRes,\r\n        getAllRolesDataError,\r\n        getAllRolesDataPending\r\n    ]);\r\n\r\n    /* Delete Role */\r\n    const onDeleteCancelRole = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deleteRoleId\r\n            }\r\n            dispatch(rolesActions?.deleteRoleRequest(params))\r\n        } else {\r\n            toggleDeleteModal()\r\n        }\r\n    }\r\n    const toggleDeleteModal = (id) => {\r\n        if (id) {\r\n            setDeleteRoleId(id)\r\n        }\r\n        setIsShowDeleteModal(!isShowDeleteModal)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!deleteRolePending) {\r\n            if (deleteRoleError) {\r\n                dispatch(rolesActions.handleClearRolesStore('HANDLE_CLEAR_DELETE_ROLE_STORE'))\r\n                return;\r\n            }\r\n            if (deleteRoleRes) {\r\n                if (deleteRoleRes?.code == 200) {\r\n                    dispatch(rolesActions.handleClearRolesStore('HANDLE_CLEAR_DELETE_ROLE_STORE'))\r\n                    dispatch(rolesActions.handleClearRolesStore('HANDLE_CLEAR_GET_ROLE_LIST_STORE'))\r\n                    toggleDeleteModal()\r\n                    if (currentPage > 1 && roleList?.data?.length === 1) {\r\n                        setCurrentPage((pre => pre -= 1))\r\n                    } else {\r\n                        getAllRoles()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        deleteRoleRes,\r\n        deleteRoleError,\r\n        deleteRolePending\r\n    ]);\r\n\r\n\r\n    /* role table */\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        created_at: item => dateFormate(item.created_at),\r\n        action: item => (\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => {\r\n                                toggleRoleModal(item);\r\n                            }}\r\n                        >\r\n                            <Icon className={\"bi bi-pencil-square me-1\"} />Update</span>\r\n                    </li>\r\n                    { <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => toggleDeleteModal(item._id)}\r\n                        >\r\n                            <Icon className={\"bi bi-trash me-1\"} />Delete</span>\r\n                    </li>}\r\n                </ul>\r\n            </div>\r\n\r\n        )\r\n    }), [setSelectedRoleData, toggleRoleModal, toggleDeleteModal]);\r\n\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'name', label: 'Name' },\r\n        { key: 'short_name', label: 'Short Name' },\r\n        { key: 'is_active', label: 'Status' },\r\n        { key: 'created_at', label: 'Created At' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex  justify-content-end \">\r\n                <CustomButton\r\n                    classNames={\"btn btn-primary gradientBg\"}\r\n                    handleClick={() => toggleRoleModal()}\r\n                    text={t(\"btns.createRole\")}\r\n                />\r\n\r\n            </div>\r\n            <CustomTable\r\n                data={roleList?.data}\r\n                fields={fields}\r\n                isLoading={getAllRolesDataPending}\r\n                pagination={true}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                totalPages={roleList?.totalPages}\r\n                tableName={\"Role\"}\r\n                scopedSlots={scopedSlots}\r\n            />\r\n            {/* {console.log(openCreateUpdateRoleModal,\"openCreateUpdateRoleModal\")} */}\r\n\r\n            {openCreateUpdateRoleModal && <CreateUpdateRole\r\n                getAllRoles={getAllRoles}\r\n                openCreateUpdateRoleModal={openCreateUpdateRoleModal}\r\n                toggleRoleModal={toggleRoleModal}\r\n                selectedRoleData={selectedRoleData}\r\n                handleCreateUpdateRole={handleCreateUpdateRole}\r\n            />}\r\n\r\n            {isShowDeleteModal && (\r\n                <ApproveRejectModal\r\n                    onApproveReject={onDeleteCancelRole}\r\n                    isShow={isShowDeleteModal}\r\n                    desc={t(\"alerts.deletePopup.desc\").replace('$1', \"Role\")}\r\n                    btnRightLoading={deleteRolePending}\r\n                    btnTextRight={t(\"btns.delete\")}\r\n                    btnTextLeft={t(\"btns.cancel\")}\r\n                />)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Role\r\n"],"names":["props","t","useCustomTranslation","openCreateUpdateRoleModal","toggleRoleModal","selectedRoleData","handleCreateUpdateRole","errors","setErrors","useState","addRolePending","updateRolePending","useSelector","state","roles","isActive","setIsActive","roleData","setRoleData","roleName","shortName","handleChange","e","fieldName","_e$target","name","target","value","type","checked","prevState","updatedState","createShortName","prevErrors","undefined","useEffect","short_name","is_active","resetRoleData","_jsxs","_Fragment","children","className","tabIndex","style","visibility","width","_jsx","onClick","Label","text","required","Input","placeholder","onChange","CustomError","CustCheckbox","id","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","addUpdateRoleSchema","isValid","params","submitCreateUpdateRole","isLoading","Role","dispatch","useDispatch","getAllRolesDataRes","getAllRolesDataError","getAllRolesDataPending","deleteRolePending","deleteRoleRes","deleteRoleError","addRoleRes","addRoleError","updateRoleRes","updateRoleError","roleList","setRoleList","setSelectedRoleData","setOpenCreateUpdateRoleModal","deleteRoleId","setDeleteRoleId","isShowDeleteModal","setIsShowDeleteModal","currentPage","setCurrentPage","data","rolesActions","handleClearRolesStore","code","getAllRoles","page","limit","pagination","getAllRolesDataRequest","toggleDeleteModal","_roleList$data","length","pre","scopedSlots","useMemo","sn","_","index","item","getBadgeColor","created_at","dateFormate","action","Icon","_id","CustomTable","fields","key","label","totalPages","tableName","CreateUpdateRole","updateRoleRequest","addRoleRequest","ApproveRejectModal","onApproveReject","deleteRoleRequest","isShow","desc","replace","btnRightLoading","btnTextRight","btnTextLeft"],"sourceRoot":""}