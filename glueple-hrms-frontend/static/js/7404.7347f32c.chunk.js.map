{"version":3,"file":"static/js/7404.7347f32c.chunk.js","mappings":"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","sources":["components/hrDashboard/CandidateCreate.js","components/hrDashboard/CandidateTable.js","components/hrDashboard/AssignInterview.js","components/hrDashboard/HrDashboard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { candidateSchema } from '../../utils/ValidationSchema';\r\nimport { validateSchema, } from '../../utils/ValidationHelper';\r\nimport CustomError from '../globalComponents/CustomError';\r\nimport Input from '../commanComponent/Input';\r\nimport CustomSelect from '../commanComponent/CustomSelect';\r\nimport { CustomButton } from '../globalComponents';\r\nimport { Label } from '../commanComponent';\r\nimport { useCustomTranslation } from '../../translation';\r\n\r\nconst CandidateCreate = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const { handleOpenClose, openModel, filteredDropdownData, allLocationsData, mrfIdsData, handleCreateCandidate, isLoadingCandidateCreate } = props\r\n    const [errors, setErrors] = useState({});\r\n    const [candidate, setCandidate] = useState(\r\n        {\r\n            \"mrf_id\": \"\",\r\n            \"employeeName\": \"\",\r\n            \"employeeEmail\": \"\",\r\n            \"employeeMobile\": \"\",\r\n            \"location\": null,\r\n            \"source\": null,\r\n            \"experience\": null,\r\n            \"address\": \"\",\r\n            \"pincode\": \"\",\r\n            \"skills\": '',\r\n        })\r\n    const [experienceData, setExperienceData] = useState('')\r\n    const [skillsData, setSkillsData] = useState('')\r\n    const [sourceData, setSourceData] = useState('')\r\n    const [locationData, setLocationData] = useState('')\r\n    useEffect(() => {\r\n        if (filteredDropdownData) {\r\n            const { \"year_of_experience\": yearOfExperience, skills, source } = filteredDropdownData;\r\n            setExperienceData(yearOfExperience)\r\n            setSkillsData(skills)\r\n            setSourceData(source)\r\n        }\r\n    }, [filteredDropdownData])\r\n    useEffect(() => {\r\n        if (allLocationsData) {\r\n            setLocationData(allLocationsData)\r\n        }\r\n    }, [allLocationsData])\r\n    useEffect(() => {\r\n        if (openModel === false) {\r\n            resetFields()\r\n        }\r\n    }, [openModel])\r\n\r\n    const resetFields = () => {\r\n        setCandidate(\r\n            {\r\n                \"mrf_id\": \"\",\r\n                \"employeeName\": \"\",\r\n                \"employeeEmail\": \"\",\r\n                \"employeeMobile\": \"\",\r\n                \"location\": null,\r\n                \"source\": null,\r\n                \"experience\": null,\r\n                \"address\": \"\",\r\n                \"pincode\": \"\",\r\n                \"skills\": '',\r\n            })\r\n    }\r\n\r\n    const handleFormData = async (input, fieldName) => {\r\n        const name = fieldName || input.target.name;\r\n        const value = input.target ? input.target.value : input;\r\n\r\n        // Remove errors for the field being modified\r\n        setErrors((prevErrors) => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n\r\n        // Update form state\r\n        setCandidate((prevState) => ({\r\n            ...prevState,\r\n            [name]: value,\r\n        }));\r\n    }\r\n\r\n    const onSubmitForm = async () => {\r\n        const validationResponse = await validateSchema(candidateSchema, candidate);\r\n        if (validationResponse.isValid) {\r\n            const skillIds = candidate?.skills.filter(skill => skill.is_active).map(skill => skill.id);\r\n            const params = {\r\n                mrf_id: candidate?.mrf_id?.value,\r\n                name: candidate?.employeeName,\r\n                email: candidate?.employeeEmail,\r\n                mobile: candidate?.employeeMobile,\r\n                location: candidate?.location?.value,\r\n                source: candidate?.source?.value,\r\n                year_of_experience: candidate?.experience?.value,\r\n                address: candidate?.address,\r\n                pincode: candidate?.pincode,\r\n                skills: skillIds\r\n            }\r\n            handleCreateCandidate(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n                tabIndex={-1}\r\n                style={{\r\n                    visibility: openModel ? 'visible' : 'hidden',\r\n                    width: \"800px\"\r\n                }}\r\n                id=\"interviewDetail\"\r\n            >\r\n                <div className=\"offcanvas-header\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{t(\"headings.createCandidate\")} </h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                        onClick={() => handleOpenClose()}\r\n                    />\r\n                </div>\r\n                <div className=\"offcanvas-body\">\r\n                    <div className=\"formPanel\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6 form-group mb-3\">\r\n                                <Label text={t(\"labels.mrfId\")} />\r\n                                <CustomSelect\r\n                                    data={mrfIdsData}\r\n                                    placeholder={t(\"placeholders.selectMrfId\")}\r\n                                    value={candidate.mrf_id || \"\"}\r\n                                    handleChange={(selectedOption) => handleFormData(selectedOption, \"mrf_id\")}\r\n                                    name=\"mrf_id\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-md-6 form-group mb-3\">\r\n                                <Label text={t(\"labels.employeeName\")} required={true} />\r\n                                <Input\r\n                                    type={\"text\"}\r\n                                    name='employeeName'\r\n                                    placeholder={t(\"placeholders.name\")}\r\n                                    value={candidate.employeeName || \"\"}\r\n                                    id=\"other_skills\"\r\n                                    onChange={(e) => handleFormData(e)}\r\n                                />\r\n                                {errors.employeeName &&\r\n                                    <CustomError\r\n                                        text={errors.employeeName}\r\n                                    />\r\n                                }\r\n                            </div>\r\n                            <div className=\" col-md-6 form-group mb-3\">\r\n                                <Label text={t(\"labels.employeeEmail\")} required={true} />\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    name=\"employeeEmail\"\r\n                                    placeholder={t(\"placeholders.email\")}\r\n                                    value={candidate.employeeEmail || \"\"}\r\n                                    onChange={handleFormData}\r\n                                />\r\n                                {errors.employeeEmail &&\r\n                                    <CustomError\r\n                                        text={errors.employeeEmail}\r\n                                    />\r\n                                }\r\n                            </div>\r\n                            <div className=\"col-md-6 form-group mb-3\">\r\n                                <Label text={t(\"labels.employeeMobile\")} required={true} />\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    name=\"employeeMobile\"\r\n                                    placeholder={t(\"placeholders.employeeMobile\")}\r\n                                    value={candidate.employeeMobile || \"\"}\r\n                                    onChange={handleFormData}\r\n                                />\r\n                                {errors.employeeMobile &&\r\n                                    <CustomError\r\n                                        text={errors.employeeMobile}\r\n                                    />\r\n                                }\r\n                            </div>\r\n\r\n                            <div className=\"col-md-6 form-group mb-3\">\r\n                                <Label text={t(\"labels.source\")} required={true} />\r\n                                <CustomSelect\r\n                                    data={sourceData}\r\n                                    placeholder={t(\"placeholders.selectSource\")}\r\n                                    value={candidate.source || \"\"}\r\n                                    handleChange={(selectedOption) => handleFormData(selectedOption, \"source\")}\r\n                                    name=\"source\"\r\n                                />\r\n                                {errors.source &&\r\n                                    <CustomError\r\n                                        text={errors.source}\r\n                                    />\r\n                                }\r\n                            </div>\r\n                            <div className=\" col-md-6 form-group mb-3\">\r\n                                <Label text={t(\"labels.yearOfExperience\")} required={true} />\r\n                                <CustomSelect\r\n                                    data={experienceData}\r\n                                    placeholder={t(\"placeholders.yearOfExperience\")}\r\n                                    value={candidate?.experience || \"\"}\r\n                                    handleChange={(selectedOption) => handleFormData(selectedOption, \"experience\")}\r\n                                    name=\"experience\"\r\n                                />\r\n\r\n                                {errors.experience &&\r\n                                    <CustomError\r\n                                        text={errors.experience}\r\n                                    />\r\n                                }\r\n                            </div>\r\n                            <div className=\"col-md-12 form-group mb-3\">\r\n                                <Label text={t(\"labels.skills\")} />\r\n                                <CustomSelect\r\n                                    data={skillsData}\r\n                                    placeholder={t(\"placeholders.selectSkills\")}\r\n                                    value={candidate.skills || \"\"}\r\n                                    handleChange={(selectedOption) => handleFormData(selectedOption, \"skills\")}\r\n                                    name=\"skills\"\r\n                                    isMulti={true}\r\n                                />\r\n\r\n                            </div>\r\n                            <div className=\" col-md-6 form-group mb-3\">\r\n                                <Label text={t(\"labels.location\")} required={true} />\r\n                                <CustomSelect\r\n                                    data={locationData}\r\n                                    placeholder={t(\"placeholders.selectLocation\")}\r\n                                    value={candidate.location || \"\"}\r\n                                    handleChange={(selectedOption) => handleFormData(selectedOption, \"location\")}\r\n                                    name=\"location\"\r\n                                />\r\n\r\n                                {errors.location &&\r\n                                    <CustomError\r\n                                        text={errors.location}\r\n                                    />\r\n                                }\r\n                            </div>\r\n\r\n                            <div className=\" col-md-6 form-group mb-3\">\r\n                            <Label text={t(\"labels.pinCode\")}/>\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    name=\"pincode\"\r\n                                    placeholder={t(\"placeholders.pinCode\")}\r\n                                    value={candidate.pincode || \"\"}\r\n                                    onChange={handleFormData}\r\n                                />\r\n                                {errors.pincode &&\r\n                                    <CustomError\r\n                                        text={errors.pincode}\r\n                                    />\r\n                                }\r\n\r\n                            </div>\r\n                            <div className=\"col-md-12 form-group mb-3\">\r\n                                 <Label text={t(\"labels.address\")}/>\r\n                                <textarea id=\"\" className=\"w-100 form-control\" placeholder={t(\"placeholders.address\")}\r\n                                    name=\"address\"\r\n                                    value={candidate?.address}\r\n                                    onChange={(e) => handleFormData(e)}\r\n                                ></textarea>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"offcanvas-footer\">\r\n                    <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                        <CustomButton\r\n                            text={t(\"btns.create\")}\r\n                            handleClick={() => onSubmitForm()}\r\n                            classNames={\"btn btn-primary gradientBg\"}\r\n                            isLoading={isLoadingCandidateCreate}\r\n                        />\r\n                        <CustomButton\r\n                            text={t(\"btns.reset\")}\r\n                            handleClick={() => resetFields()}\r\n                            classNames={\"btn btn-secondary\"}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CandidateCreate\r\n","import React, { useMemo } from 'react'\r\nimport CustomTable from '../reuseableComponents/customTable/CustomTable';\r\nimport { getBadgeColor } from '../../utils/common';\r\nimport Image from '../commanComponent/Image';\r\nimport { useCustomTranslation } from '../../translation';\r\nconst CandidateTable = (props) => {\r\n    const {allCandidatesData,setCurrentPage,currentPage,isLoading,onHandleAssignInterview}=props\r\n    const {t}=useCustomTranslation()\r\n\r\n    const candidateFields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'auto_id', label: 'Candidate ID' },\r\n        { key: 'name', label: 'Candidate Name' },\r\n        { key: 'mobile', label: 'Mobile No.' },\r\n        { key: 'offer_letter_status', label: 'Offer Letter Status' },\r\n        { key: 'assign_interview', label: 'Assign Interview' },\r\n    ];\r\n    const scopedSlotsCandidate = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        assign_interview:item =>(\r\n            item?.offer_letter_status!==\"accepted\" &&(<span\r\n                onClick={()=>onHandleAssignInterview(item?.id,item?.mrf_id)}\r\n                >\r\n                <Image imgSrc={\"images/add-icon3.svg\"} altText={\"\"} width={32}></Image>\r\n            </span>)\r\n        ),\r\n\r\n        offer_letter_status:item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.offer_letter_status)}`}\r\n            >\r\n                {item.offer_letter_status}\r\n            </span>\r\n        ),\r\n\r\n        \r\n    }), [allCandidatesData]);\r\n    return (\r\n        <>\r\n                <CustomTable\r\n                    data={allCandidatesData?.data}\r\n                    fields={candidateFields}\r\n                    isLoading={isLoading}\r\n                    pagination={true}\r\n                    currentPage={currentPage}\r\n                    setCurrentPage={setCurrentPage}\r\n                    totalPages={allCandidatesData?.totalPages}\r\n                    tableName={t(\"headings.hrDashboard\")}\r\n                    scopedSlots={scopedSlotsCandidate}\r\n                />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CandidateTable\r\n","import React, { useEffect, useState } from 'react'\r\nimport { CustomButton } from '../globalComponents'\r\nimport CustomSelect from '../commanComponent/CustomSelect'\r\nimport CustomError from '../globalComponents/CustomError'\r\nimport Input from '../commanComponent/Input'\r\nimport moment from 'moment'\r\nimport { useCustomTranslation } from '../../translation'\r\nimport { Label } from '../commanComponent'\r\n\r\nconst AssignInterview = (props) => {\r\n    const {t}=useCustomTranslation()\r\n    const { openModel, handleOpenClose, interviewrData, filteredDropdownData, allDepartments, allDesignations, interviewListData, handleAssignedInterviews } = props\r\n    const [errors, setErrors] = useState([]);\r\n    const [addInterviewerData, setAddInterviewerData] = useState(\r\n        [{\r\n            department: null,\r\n            designation: null,\r\n            interviewStage: null,\r\n            interviewType: null,\r\n            interviewer: null,\r\n            interviewAssignedAt: \"\",\r\n            interviewTypeValue: \"\",\r\n            disabled: false,\r\n            interviewStatus: '',\r\n            mrf_id: '',\r\n            id: ''\r\n\r\n        }]\r\n    )\r\n    useEffect(() => {\r\n        if (interviewrData && interviewrData?.length) {\r\n            const interviewrDatas = interviewrData;\r\n            if (Array.isArray(interviewrDatas) && interviewrDatas.length > 0) {\r\n                setAddInterviewerData(interviewrDatas.map(item => ({\r\n                    department: { value: item?.department, label: item?.interviewer_name } || null,\r\n                    designation: { value: item?.designation, label: item?.designation_name } || null,\r\n                    interviewStage: { value: item?.interview_stage, label: item?.interview_stage_name } || null,\r\n                    interviewType: { value: item?.interview_type, label: item?.interview_type_name } || null,\r\n                    interviewer: { value: item?.interviewer, label: item?.interviewer_name } || null,\r\n                    interviewAssignedAt: item?.interview_assigned_at,\r\n                    interviewTypeValue: item?.interview_type_value,\r\n                    disabled: item?.interview_status === \"pending\" ? false : true,\r\n                    interviewStatus: item?.interview_status,\r\n                    mrf_id: item?.mrf_id,\r\n                    id: item?._id\r\n\r\n                })));\r\n            } else {\r\n                setAddInterviewerData([{\r\n                    department: null,\r\n                    designation: null,\r\n                    interviewStage: null,\r\n                    interviewType: null,\r\n                    interviewer: null,\r\n                    interviewAssignedAt: \"\",\r\n                    interviewTypeValue: \"\",\r\n                    disabled: false,\r\n                    interviewStatus: '',\r\n                    mrf_id: '',\r\n                    id: ''\r\n                }]);\r\n            }\r\n        }\r\n    }, [interviewrData])\r\n\r\n  \r\n\r\n    const handleFormData = (input, fieldName, index) => {\r\n        const name = fieldName || input.target.name;\r\n        const value = input.target ? input.target.value : input;\r\n\r\n\r\n        // Update the specific interviewer at the given index\r\n        setAddInterviewerData((prevData) => {\r\n            const updatedData = [...prevData];\r\n            updatedData[index] = {\r\n                ...updatedData[index],\r\n                [name]: value,\r\n            };\r\n            return updatedData;\r\n        });\r\n\r\n        // Clear the error for the updated field\r\n        setErrors(prevErrors => {\r\n            const updatedErrors = [...prevErrors];\r\n            if (updatedErrors[index]) {\r\n                delete updatedErrors[index][name];\r\n            }\r\n            return updatedErrors;\r\n        });\r\n    };\r\n\r\n\r\n    const handleDepartment = (selectedOption) => {\r\n        if (selectedOption !== undefined && selectedOption !== null) {\r\n            // handleDepartmentByDesignation(selectedOption?.value)\r\n        }\r\n\r\n    }\r\n\r\n    const handleDesignation = (selectedOption) => {\r\n        if (selectedOption !== undefined && selectedOption !== null) {\r\n            // getInterviewerList(selectedOption.value)\r\n        }\r\n\r\n    }\r\n\r\n    const handleSubmitForm = async() => {\r\n\r\n        const interviewrData = getIdsOnly(addInterviewerData)\r\n        handleAssignedInterviews(interviewrData)\r\n\r\n    }\r\n\r\n    const getIdsOnly = (interviewerData) => {\r\n        return interviewerData.map(item => ({\r\n            department: item?.department?._id || item?.department?.value,\r\n            designation: item?.designation?._id || item?.designation?.value,\r\n            interview_stage: item?.interviewStage?.id || item?.interviewStage?.value,\r\n            interview_type: item?.interviewType?.id || item?.interviewType?.value,\r\n            interviewer: item?.interviewer?._id || item?.interviewer?.value,\r\n            interview_assigned_at: item?.interviewAssignedAt || '',\r\n            interview_type_value: item?.interviewTypeValue || '',\r\n            interview_status: item?.interviewStatus||'',\r\n            mrf_id: item?.mrf_id||'',\r\n            id: item?.id||'',\r\n        }));\r\n    };\r\n\r\n    const onDeleteInterview = (index) => {\r\n        const updatedInterviewers = addInterviewerData.filter((_, i) => i !== index);\r\n        setAddInterviewerData(updatedInterviewers);\r\n    };\r\n    const renderInterviewr = () => {\r\n        return addInterviewerData.map((interviewForm, index) =>\r\n        (\r\n            <div className=\"row mt-3\">\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <Label text={t(\"labels.selectDepartment\")} required ={true}/>\r\n                    <CustomSelect\r\n                        data={allDepartments || []}\r\n                        placeholder={t(\"placeholders.selectDepartment\")}\r\n                        value={interviewForm?.department || null}\r\n                        handleChange={(selectedOption) => { handleFormData(selectedOption, \"department\", index); handleDepartment(selectedOption); }}\r\n                        name=\"department\"\r\n                        isDisabled={true}\r\n                    />\r\n                    {errors[index]?.department && (\r\n                        <CustomError text={errors[index].department} />\r\n                    )}\r\n\r\n                </div>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                 <Label text={t(\"labels.selectDesignation\")} required ={true}/>\r\n                    <CustomSelect\r\n                        data={allDesignations || []}\r\n                        placeholder={t(\"placeholders.selectDesignation\")}\r\n                        value={interviewForm?.designation || null}\r\n                        handleChange={(selectedOption) => { handleFormData(selectedOption, \"designation\", index); handleDesignation(selectedOption) }}\r\n                        name=\"designation\"\r\n                        isDisabled={true}\r\n                    />\r\n\r\n                    {errors[index]?.designation && (\r\n                        <CustomError text={errors[index].designation} />\r\n                    )}\r\n\r\n                </div>\r\n\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                <Label text={t(\"labels.interviewStage\")} required ={true}/>\r\n\r\n                    <CustomSelect\r\n                        data={filteredDropdownData?.['interview_stage'] || []}\r\n                        placeholder={t(\"placeholders.selectInterviewStage\")}\r\n                        value={interviewForm?.interviewStage || null}\r\n                        handleChange={(selectedOption) => handleFormData(selectedOption, \"interviewStage\", index)}\r\n                        name=\"interviewStage\"\r\n                        isDisabled={true}\r\n                    />\r\n\r\n                    {errors[index]?.interviewStage && (\r\n                        <CustomError text={errors[index].interviewStage} />\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                <Label text={t(\"labels.interviewType\")} required ={true}/>\r\n                    <CustomSelect\r\n                        data={filteredDropdownData?.['interview_type'] || []}\r\n                        placeholder={t(\"placeholders.selectInterviewType\")}\r\n                        value={interviewForm?.interviewType || null}\r\n                        handleChange={(selectedOption) => handleFormData(selectedOption, \"interviewType\", index)}\r\n                        name=\"interviewType\"\r\n                        isDisabled={true}\r\n                    />\r\n                    {errors[index]?.interviewType && (\r\n                        <CustomError text={errors[index].interviewType} />\r\n                    )}\r\n                </div>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                <Label text={t(\"labels.Interviewer\")} required ={true}/>\r\n                    <CustomSelect\r\n                        data={interviewListData || []}\r\n                        placeholder={t(\"placeholders.selectInterviewer\")}\r\n                        value={interviewForm?.interviewer || null}\r\n                        handleChange={(selectedOption) => handleFormData(selectedOption, \"interviewer\", index)}\r\n                        name=\"interviewer\"\r\n                        isDisabled={true}\r\n                    />\r\n\r\n\r\n                    {errors[index]?.interviewer && (\r\n                        <CustomError text={errors[index].interviewer} />\r\n                    )}\r\n                </div>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                <Label text={t(\"labels.InterviewerAssign\")} required ={true}/>\r\n                    <Input\r\n                        type=\"datetime-local\"\r\n                        placeholder={t(\"placeholders.selectInterviewerAssign\")}\r\n                        value={moment(interviewForm?.interviewAssignedAt).format(\"YYYY-MM-DDTHH:mm\") || null}\r\n                        onChange={(e) => handleFormData(e, \"interviewAssignedAt\", index)}\r\n                        name=\"interviewAssignedAt\"\r\n                        isDisabled={interviewForm?.disabled}\r\n\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                <Label text={t(\"labels.InterviewerType\")} required ={true}/>\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder={t(\"placeholders.InterviewerType\")}\r\n                        value={interviewForm?.interviewTypeValue || null}\r\n                        onChange={(e) => handleFormData(e, \"interviewTypeValue\", index)}\r\n                        name=\"interviewTypeValue\"\r\n\r\n                    />\r\n                </div>               \r\n                {addInterviewerData.length - 1 !== index && <div>\r\n                    <hr />\r\n                </div>}\r\n            </div>)\r\n\r\n\r\n        )\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n                    tabIndex={-1}\r\n                    style={{\r\n                        visibility: openModel ? 'visible' : 'hidden',\r\n                        width: \"800px\"\r\n                    }}\r\n                    id=\"interviewDetail\"\r\n                >\r\n                    <div className=\"offcanvas-header\">\r\n                        <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{t(\"headings.assignInterview\")}</h5>\r\n                        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                            onClick={() => handleOpenClose()}\r\n                        />\r\n                    </div>\r\n                    {<div className=\"offcanvas-body\" >{renderInterviewr()}</div>}\r\n\r\n                    <div className=\"offcanvas-footer\">\r\n                        <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                            <CustomButton\r\n                                text={t(\"btns.assign\")}\r\n                                handleClick={() => handleSubmitForm()}\r\n                                classNames={\"btn btn-primary gradientBg\"}\r\n                            // isLoading={isLoadingCandidateCreate}\r\n                            />\r\n                            {/* <CustomButton\r\n                                text={\"Reset\"}\r\n                                // handleClick={() => resetFields()}\r\n                                classNames={\"btn btn-secondary\"}\r\n                            /> */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AssignInterview\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { candidateActions, dropdownMasterActions, locationActions, mrfActions, mrfInterviewAction } from '../../core/resource/actions'\r\nimport { CustomButton } from '../globalComponents'\r\nimport CandidateCreate from './CandidateCreate'\r\nimport CandidateTable from './CandidateTable'\r\nimport AssignInterview from './AssignInterview'\r\nimport { useCustomTranslation } from '../../translation'\r\n\r\n\r\nconst HrDashboard = () => {\r\n    const dispatch = useDispatch()\r\n    const {t} =useCustomTranslation()\r\n\r\n    const {\r\n        getAllLocationsRes,\r\n        getAllLocationsPending,\r\n        getAllLocationsError,\r\n    } = useSelector(state => state.location)\r\n\r\n    const {\r\n        getFilteredDropdownDataError,\r\n        getFilteredDropdownDataRes,\r\n        getFilteredDropdownDataPending\r\n    } = useSelector(state => state.dropdownMaster)\r\n\r\n    const {\r\n        getAllUserMrfPending,\r\n        getAllUserMrfRes,\r\n        getAllUserMrfError,\r\n    } = useSelector(state => state.mrf)\r\n\r\n    const {\r\n        assignedInterviewPending,\r\n        assignedInterviewRes,\r\n        assignedInterviewError,\r\n\r\n        getInterviewrPending,\r\n        getInterviewrRes,\r\n        getInterviewrError,\r\n\r\n    } = useSelector(state => state.mrfInterview)\r\n\r\n    const {\r\n        createCandidatePending,\r\n        createCandidateRes,\r\n        createCandidateError,\r\n\r\n        getAllCandidatePending,\r\n        getAllCandidateRes,\r\n        getAllCandidateError,\r\n\r\n    } = useSelector(state => state.candidate)\r\n\r\n\r\n    const [openCandidate, setOpenCandidate] = useState()\r\n    const [filteredDropdownData, setFilteredDropdownData] = useState()\r\n    const [allLocationsData, setAllLocationsData] = useState()\r\n    const [mrfIdsData, setMrfIdsData] = useState('')\r\n    const [allCandidatesData, setAllCandidatesData] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [openAssignInterview, setOpenAssignInterview] = useState(false)\r\n    const [interviewrData, setInterviewrData] = useState('')\r\n    const [candidateId, setCandidateId] = useState('')\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        getAllLocations()\r\n        getDropdownFilteredData()\r\n        getAllUserMrfData()\r\n        handleGetAllCandidate()\r\n    }, [])\r\n\r\n    /* Dropdown Master Filter */ \r\n    const getDropdownFilteredData = () => {\r\n        const categorys = ['year_of_experience', \"skills\", \"source\", ]\r\n        let params = { category: '' }\r\n        categorys.forEach((item) => {\r\n            params.category = item\r\n            dispatch(dropdownMasterActions.getFilteredDropdownDataRequest(params))\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getFilteredDropdownDataPending) {\r\n            if (getFilteredDropdownDataError) {\r\n                return;\r\n            }\r\n            if (getFilteredDropdownDataRes) {\r\n                if (getFilteredDropdownDataRes?.ode === 200) {\r\n                    const dropdownFilterData = getFilteredDropdownDataRes?.data\r\n                    let categoryName = dropdownFilterData?.category\r\n                    setFilteredDropdownData(prevState => ({\r\n                        ...prevState,\r\n                        [categoryName]: dropdownFilterData?.data || []\r\n                    }));\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getFilteredDropdownDataRes,\r\n        getFilteredDropdownDataError,\r\n        getFilteredDropdownDataPending\r\n    ]);\r\n\r\n    /* Get All Locations */\r\n    const getAllLocations = () => {\r\n        dispatch(locationActions.getAllLocationsRequest())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllLocationsPending) {\r\n            if (getAllLocationsError) {\r\n                return;\r\n            }\r\n            if (getAllLocationsRes) {\r\n                if (getAllLocationsRes?.code === 200) {\r\n                    const LocationsData = getAllLocationsRes?.data\r\n                    setAllLocationsData(LocationsData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllLocationsError,\r\n        getAllLocationsPending,\r\n        getAllLocationsRes\r\n    ]);\r\n    /* get All User Mrf Data */\r\n    const getAllUserMrfData = (subType) => {\r\n        const params = {\r\n            query_type: \"user\",\r\n            type: subType,\r\n            // page: currentPage,\r\n            limit: 50,\r\n        }\r\n        dispatch(mrfActions.getAllUserMrfRequest(params))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllUserMrfPending) {\r\n            if (getAllUserMrfError) {\r\n                return;\r\n            }\r\n            if (getAllUserMrfRes) {\r\n                if (getAllUserMrfRes?.code === 200) {\r\n                    const getAllUserMrfData = getAllUserMrfRes?.data\r\n                    // setAllMrfListData(getAllUserMrfData)\r\n                    const data = getAllUserMrfData?.data\r\n                    const tempAllUserData = []\r\n                    data?.map(data => {\r\n                        tempAllUserData.push({ label: data?.auto_id, value: data?._id });\r\n                    });\r\n                    setMrfIdsData(tempAllUserData)\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllUserMrfRes,\r\n        getAllUserMrfError,\r\n        getAllUserMrfPending\r\n    ]);\r\n\r\n    /* Create Candidate */ \r\n    const handleCreateCandidate = (params) => {\r\n\r\n        dispatch(candidateActions.createCandidateRequest(params))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!createCandidatePending) {\r\n            if (createCandidateError) {\r\n                return;\r\n            }\r\n            if (createCandidateRes) {\r\n                if (createCandidateRes?.code === 200) {\r\n                    dispatch(candidateActions.handleClearCandidateStore(\"HANDLE_CLEAR_CREATE_CANDIDATE_STORE\"))\r\n                    setOpenCandidate(!openCandidate)\r\n                    handleGetAllCandidate()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        createCandidateRes,\r\n        createCandidateError,\r\n        createCandidatePending\r\n    ]);\r\n\r\n    /* Get All Candidate  */\r\n    const handleGetAllCandidate = (params) => {\r\n\r\n        dispatch(candidateActions.getAllCandidateRequest(params))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllCandidatePending) {\r\n            if (getAllCandidateError) {\r\n                return;\r\n            }\r\n            if (getAllCandidateRes) {\r\n                if (getAllCandidateRes?.code === 200) {\r\n                    const getAllCandidateDate = getAllCandidateRes?.data\r\n                    setAllCandidatesData(getAllCandidateDate)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllCandidateRes,\r\n        getAllCandidateError,\r\n        getAllCandidatePending\r\n    ]);\r\n\r\n    /* Assigned Interviews */\r\n    const handleAssignedInterviews = (data) => {\r\n        const params = {\r\n            candidate_id: candidateId,\r\n            interview_details: data\r\n        }\r\n\r\n        dispatch(mrfInterviewAction?.assignedInterviewRequest(params))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!assignedInterviewPending) {\r\n            if (assignedInterviewError) {\r\n                return;\r\n            }\r\n            if (assignedInterviewRes) {\r\n                if (assignedInterviewRes?.code === 200) {\r\n                    setCandidateId('')\r\n                    setOpenAssignInterview(!openAssignInterview)\r\n                    dispatch(mrfInterviewAction.handelClearMrfInterviewStore(\"HANDLE_CLEAR_ASSIGNED_INTERVIEW_STORE\"))\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        assignedInterviewRes,\r\n        assignedInterviewError,\r\n        assignedInterviewPending\r\n    ]);\r\n\r\n    /* Interviewr data */\r\n    const handleGetInterviewr = (candidateId, mrfId) => {\r\n        const params = {\r\n            candidate_id: candidateId || '',\r\n            mrf_id: mrfId || ''\r\n        }\r\n        dispatch(mrfInterviewAction.getInterviewrRequest(params))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getInterviewrPending) {\r\n            if (getInterviewrError) {\r\n                return;\r\n            }\r\n            if (getInterviewrRes) {\r\n                if (getInterviewrRes?.code === 200) {\r\n                    const getInterviewrData = getInterviewrRes?.data\r\n                    if (getInterviewrData?.length > 0) {\r\n                        setInterviewrData(getInterviewrData)\r\n                    } else {\r\n                        setInterviewrData('')\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getInterviewrPending,\r\n        getInterviewrError,\r\n        getInterviewrRes\r\n    ]);\r\n\r\n    const onHandleCandidateCreate = () => {\r\n        setOpenCandidate(!openCandidate)\r\n    }\r\n\r\n    const onHandleAssignInterview = (candidateId, mrfId) => {\r\n        if (candidateId || mrfId) {\r\n            handleGetInterviewr(candidateId, mrfId)\r\n            setCandidateId(candidateId)\r\n            \r\n        } else {\r\n            setInterviewrData('')\r\n            dispatch(mrfInterviewAction.handelClearMrfInterviewStore(\"HANDLE_CLEAR_GET_INTERVIEWR_STORE\"))\r\n        }\r\n        setOpenAssignInterview(!openAssignInterview)\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex  justify-content-end \">\r\n                <CustomButton\r\n                    classNames={\"btn btn-primary gradientBg me-2\"}\r\n                    text={t(\"btns.createCandidate\")}\r\n                    handleClick={onHandleCandidateCreate}\r\n                />\r\n            </div>\r\n            \r\n            <CandidateCreate\r\n                openModel={openCandidate}\r\n                handleOpenClose={onHandleCandidateCreate}\r\n                filteredDropdownData={filteredDropdownData}\r\n                allLocationsData={allLocationsData}\r\n                mrfIdsData={mrfIdsData}\r\n                handleCreateCandidate={handleCreateCandidate}\r\n                isLoadingCandidateCreate={createCandidatePending}\r\n            />\r\n            <CandidateTable\r\n                allCandidatesData={allCandidatesData}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                isLoading={getAllCandidatePending}\r\n                onHandleAssignInterview={onHandleAssignInterview}\r\n            />\r\n            {openAssignInterview && <AssignInterview\r\n                openModel={openAssignInterview}\r\n                handleOpenClose={onHandleAssignInterview}\r\n                interviewrData={interviewrData}\r\n                filteredDropdownData={filteredDropdownData}\r\n                handleAssignedInterviews={handleAssignedInterviews}\r\n            />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HrDashboard\r\n"],"names":["props","t","useCustomTranslation","handleOpenClose","openModel","filteredDropdownData","allLocationsData","mrfIdsData","handleCreateCandidate","isLoadingCandidateCreate","errors","setErrors","useState","candidate","setCandidate","experienceData","setExperienceData","skillsData","setSkillsData","sourceData","setSourceData","locationData","setLocationData","useEffect","yearOfExperience","skills","source","resetFields","handleFormData","async","input","fieldName","name","target","value","prevErrors","undefined","prevState","_jsx","children","_jsxs","className","tabIndex","style","visibility","width","id","type","onClick","Label","text","CustomSelect","data","placeholder","mrf_id","handleChange","selectedOption","required","Input","employeeName","onChange","e","CustomError","employeeEmail","employeeMobile","experience","isMulti","location","pincode","address","CustomButton","handleClick","validationResponse","validateSchema","candidateSchema","isValid","_candidate$mrf_id","_candidate$location","_candidate$source","_candidate$experience","skillIds","filter","skill","is_active","map","params","email","mobile","year_of_experience","onSubmitForm","classNames","isLoading","allCandidatesData","setCurrentPage","currentPage","onHandleAssignInterview","scopedSlotsCandidate","useMemo","sn","_","index","assign_interview","item","offer_letter_status","Image","imgSrc","altText","getBadgeColor","_Fragment","CustomTable","fields","key","label","pagination","totalPages","tableName","scopedSlots","interviewrData","allDepartments","allDesignations","interviewListData","handleAssignedInterviews","addInterviewerData","setAddInterviewerData","department","designation","interviewStage","interviewType","interviewer","interviewAssignedAt","interviewTypeValue","disabled","interviewStatus","length","interviewrDatas","Array","isArray","interviewer_name","designation_name","interview_stage","interview_stage_name","interview_type","interview_type_name","interview_assigned_at","interview_type_value","interview_status","_id","prevData","updatedData","updatedErrors","getIdsOnly","interviewerData","_item$department","_item$department2","_item$designation","_item$designation2","_item$interviewStage","_item$interviewStage2","_item$interviewType","_item$interviewType2","_item$interviewer","_item$interviewer2","interviewForm","_errors$index","_errors$index2","_errors$index3","_errors$index4","_errors$index5","isDisabled","moment","format","handleSubmitForm","HrDashboard","dispatch","useDispatch","getAllLocationsRes","getAllLocationsPending","getAllLocationsError","useSelector","state","getFilteredDropdownDataError","getFilteredDropdownDataRes","getFilteredDropdownDataPending","dropdownMaster","getAllUserMrfPending","getAllUserMrfRes","getAllUserMrfError","mrf","assignedInterviewPending","assignedInterviewRes","assignedInterviewError","getInterviewrPending","getInterviewrRes","getInterviewrError","mrfInterview","createCandidatePending","createCandidateRes","createCandidateError","getAllCandidatePending","getAllCandidateRes","getAllCandidateError","openCandidate","setOpenCandidate","setFilteredDropdownData","setAllLocationsData","setMrfIdsData","setAllCandidatesData","openAssignInterview","setOpenAssignInterview","setInterviewrData","candidateId","setCandidateId","getAllLocations","getDropdownFilteredData","getAllUserMrfData","handleGetAllCandidate","category","forEach","dropdownMasterActions","getFilteredDropdownDataRequest","ode","dropdownFilterData","categoryName","locationActions","getAllLocationsRequest","code","LocationsData","subType","query_type","limit","mrfActions","getAllUserMrfRequest","tempAllUserData","push","auto_id","candidateActions","handleClearCandidateStore","getAllCandidateRequest","getAllCandidateDate","mrfInterviewAction","handelClearMrfInterviewStore","getInterviewrData","onHandleCandidateCreate","mrfId","handleGetInterviewr","candidate_id","getInterviewrRequest","CandidateCreate","createCandidateRequest","CandidateTable","AssignInterview","interview_details","assignedInterviewRequest"],"sourceRoot":""}