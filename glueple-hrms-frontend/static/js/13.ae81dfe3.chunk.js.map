{"version":3,"file":"static/js/13.ae81dfe3.chunk.js","mappings":"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","sources":["components/globalComponents/CustomError.js","components/commanComponent/CustomSelect.js","components/hiring/mrf/MrfForms/CreateMrf.js","components/hiring/mrf/MrfForms/JobDescription.js","components/hiring/mrf/MrfForms/AddInterviewer.js","components/hiring/mrf/MrfForms/ReviewAndSubmit.js","components/hiring/mrf/MrfProcessSteps.js","utils/ValidattionTranslation.js","utils/ValidationHelper.js","utils/ValidationSchema.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst CustomError = ({text,style}) => {\r\n  return (\r\n    <>\r\n      <small \r\n      className=\"p-error text-danger\" \r\n      style={style ||{}}\r\n      >\r\n        {text}\r\n    </small>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CustomError\r\n","import React from 'react'\r\nimport Select from 'react-select';\r\n\r\nconst CustomSelect = (props) => {\r\n  const {\r\n    data,\r\n    className,\r\n    placeholder,\r\n    defaultValue,\r\n    isDisabled,\r\n    isLoading,\r\n    isClearable,\r\n    isSearchable,\r\n    handleChange,\r\n    value,\r\n    name\r\n  } = props\r\n\r\n\r\n\r\n  return (\r\n    <Select\r\n      className={className || \"basic-single text-capitalize \"}\r\n      classNamePrefix=\"select\"\r\n      defaultValue={defaultValue || {value:'', label :'Select...'}}\r\n      value={value||''}\r\n      isDisabled={isDisabled || false}\r\n      isLoading={isLoading || false}\r\n      isClearable={isClearable || true}\r\n      isSearchable={isSearchable || true}\r\n      name={name || 'select'}\r\n      placeholder={placeholder || \"Select...\"}\r\n      options={data ||[]}\r\n      onChange={handleChange}\r\n    />\r\n      \r\n  )\r\n}\r\n\r\nexport default CustomSelect\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport * as yup from \"yup\";\r\nimport Button from '../../../commanComponent/Button'\r\nimport { MrfCreateSchema, MrfReplacementSchema } from '../../../../utils/ValidationSchema'\r\nimport { validateSchema } from '../../../../utils/ValidationHelper';\r\nimport CustomError from '../../../globalComponents/CustomError';\r\nimport CustomSelect from '../../../commanComponent/CustomSelect';\r\nimport { CustomButton } from '../../../globalComponents';\r\nimport Input from '../../../commanComponent/Input';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst CreateMrf = (props) => {\r\n    const {\r\n        onClickActive,\r\n        isLoadingBtn,\r\n        allDepartments,\r\n        allDesignations,\r\n        allPosition,\r\n        allQualification,\r\n        filteredDropdownData,\r\n        allLocationsData,\r\n        createUpdateMrf,\r\n        handleDepartmentByDesignation,\r\n        handlegetPositionByDepartmentDesignation,\r\n        mrfData,\r\n        mrfType,\r\n        employeesForReportingManager\r\n    } = props\r\n    const [errors, setErrors] = useState({});\r\n    \r\n\r\n    const [mrfFromData, setMrfFromData] = useState(\r\n        {\r\n            department: '',\r\n            designation: '',\r\n            position: '',\r\n            priority: '',\r\n            minQualififcation: '',\r\n            preferredQualification: \"\",\r\n            businessImpact: \"\",\r\n            location: \"\",\r\n            vacantPosition: '',\r\n            learningDevelopmentCost: '',\r\n            minCost: '',\r\n            maxCost: '',\r\n            appointmentType: \"\",\r\n            appointmentDuration: '',\r\n            mrfJustification: \"\",\r\n            yearOfExperience: '',\r\n            empId:\"\"\r\n        }\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (mrfData) {\r\n            const allMrfData = mrfData?.data[0]\r\n            setMrfFromData({\r\n                \"department\": { value: allMrfData?.department_id, label: allMrfData?.department_name } || '',\r\n                \"designation\": { value: allMrfData?.designation_id, label: allMrfData?.designation_name } || '',\r\n                \"position\": { value: allMrfData?.position_id, label: allMrfData?.position_name } || '',\r\n                \"priority\": { value: allMrfData?.priority, label: allMrfData?.priority_name } || '',\r\n                \"minQualififcation\": { value: allMrfData?.min_qualififcation, label: allMrfData?.min_qualififcation_name } || '',\r\n                \"preferredQualification\": {\r\n                    value: allMrfData?.preferred_qualification\r\n                    , label: allMrfData?.preferred_qualification_name\r\n                } || '',\r\n\r\n                \"businessImpact\": { value: allMrfData?.business_impact, label: allMrfData?.business_impact_name } || '',\r\n                \"location\": { value: allMrfData?.hiring_for, label: allMrfData?.hiring_for_name } || '',\r\n                \"vacantPosition\": allMrfData?.vacant_position || '',\r\n                \"learningDevelopmentCost\": { value: allMrfData?.learning_development_cost?.is_cost, label: allMrfData?.learning_development_cost?.is_cost } || '',\r\n                \"minCost\": allMrfData?.learning_development_cost?.min_cost,\r\n                \"maxCost\": allMrfData?.learning_development_cost?.max_cost,\r\n                \"appointmentType\": { value: allMrfData?.type_of_appointment.type, label: allMrfData?.type_of_appointment.type },\r\n                \"appointmentDuration\": allMrfData?.type_of_appointment.duration,\r\n                \"mrfJustification\": allMrfData?.mrf_justification,\r\n                \"yearOfExperience\": { value: allMrfData?.year_of_experience, label: allMrfData?.year_of_experience_name },\r\n                 \"empId\":{ value: allMrfData?.emp_id, label: allMrfData?.emp_id_name }\r\n\r\n            });\r\n\r\n        }\r\n    }, [mrfData])\r\n\r\n    const onSubmitMrfForm = async () => {\r\n        let validationResponse = ''\r\n        let payload={}\r\n        if (mrfType === \"vacancy\") {\r\n            payload = {\r\n                \"query_type\": \"mrf_form\",\r\n                \"type\": mrfType,\r\n                \"step\": 1,\r\n                \"department_id\": mrfFromData?.department?.value || '',\r\n                \"designation_id\": mrfFromData?.designation?.value || '',\r\n                \"position_id\": mrfFromData?.position?.value || '',\r\n                \"priority\": mrfFromData?.priority.value || '',\r\n                \"min_qualififcation\": mrfFromData?.minQualififcation?.value || '',\r\n                \"preferred_qualification\": mrfFromData?.preferredQualification?.value || '',\r\n                \"business_impact\": mrfFromData?.businessImpact?.value || '',\r\n                \"hiring_for\": mrfFromData?.location.value || '',\r\n                \"vacant_position\": mrfFromData?.vacantPosition || '',\r\n                \"learning_development_cost\": { is_cost: mrfFromData?.learningDevelopmentCost?.label || '', min_cost: mrfFromData?.minCost, max_cost: mrfFromData?.maxCost },\r\n                \"type_of_appointment\": { type: mrfFromData?.appointmentType?.label || '', duration: mrfFromData?.appointmentDuration },\r\n                \"year_of_experience\": mrfFromData?.yearOfExperience?.value || '',\r\n                \"mrf_justification\": mrfFromData?.mrfJustification || ''\r\n            }\r\n            validationResponse = await validateSchema(MrfCreateSchema, payload);\r\n        }\r\n        if (mrfType === \"replacement\") {    \r\n            payload={\r\n            \"query_type\": \"mrf_form\",\r\n            \"type\": mrfType,\r\n            \"step\": 1,\r\n            \"department_id\": mrfFromData?.department?.value || '',\r\n            \"designation_id\": mrfFromData?.designation?.value || '',\r\n            \"position_id\": mrfFromData?.position?.value || '',\r\n            \"priority\": mrfFromData?.priority.value || '',\r\n            \"emp_id\":mrfFromData?.empId.value,\r\n            }\r\n            validationResponse = await validateSchema(MrfReplacementSchema, payload);\r\n        }\r\n        if (validationResponse.isValid) {\r\n            createUpdateMrf(payload, 2)\r\n            setErrors({});\r\n\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    const handleInputChange = async (input, fieldName) => {\r\n        const name = fieldName || input.target.name;\r\n        const value = input.target ? input.target.value : input;\r\n        errors && setErrors({})\r\n\r\n        setMrfFromData((prevState) => ({\r\n            ...prevState,\r\n            [name]: value,\r\n        }));\r\n    }\r\n\r\n    const handleDepartment = (selectedOption) => {\r\n        if (selectedOption !== undefined && selectedOption !== null) {\r\n            handleDepartmentByDesignation(selectedOption?.value)\r\n        }\r\n\r\n    }\r\n\r\n    const handleDesignation = (selectedOption) => {\r\n        if (selectedOption !== undefined && selectedOption !== null) {\r\n            handlegetPositionByDepartmentDesignation(selectedOption.value)\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3><img src=\"images/kpi-guidline.svg\" alt=\"\" width=\"40\" className=\"me-2\" /> Create MRF</h3>\r\n            <div className=\"row mt-3\">\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label>Select Department <span className='text-danger'>*</span></label>\r\n                    <CustomSelect\r\n                        data={allDepartments || []}\r\n                        placeholder=\"Select Department\"\r\n                        value={mrfFromData?.department || ''}\r\n                        handleChange={(selectedOption) => {\r\n                            handleInputChange(selectedOption, 'department');\r\n                            handleDepartment(selectedOption)\r\n                        }}\r\n                        name=\"department\"\r\n                    />\r\n                    {errors?.department_id &&\r\n                        <CustomError\r\n                            text={errors.department_id}\r\n                        />\r\n                    }\r\n\r\n                </div>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label>Select Designation <span className='text-danger'>*</span></label>\r\n                    <CustomSelect\r\n                        data={allDesignations || []}\r\n                        placeholder=\"Select Designation\"\r\n                        isDisabled={!mrfFromData?.department}\r\n                        value={mrfFromData?.designation || ''}\r\n                        handleChange={(selectedOption) => {\r\n                            handleInputChange(selectedOption, 'designation');\r\n                            handleDesignation(selectedOption)\r\n                        }}\r\n                        name=\"designation\"\r\n\r\n                    />\r\n                    {errors.designation_id &&\r\n                        <CustomError\r\n                            text={errors.designation_id}\r\n                        />\r\n                    }\r\n                </div>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label>Position <span className='text-danger'>*</span></label>\r\n                    <CustomSelect\r\n                        data={allPosition || []}\r\n                        placeholder=\"Select Position\"\r\n                        isDisabled={!mrfFromData?.department || !mrfFromData?.designation}\r\n                        value={mrfFromData?.position || ''}\r\n                        handleChange={(selectedOption) => handleInputChange(selectedOption, 'position')}\r\n                        name=\"position\"\r\n                    />\r\n                    {errors.position_id &&\r\n                        <CustomError\r\n                            text={errors.position_id}\r\n                        />\r\n                    }\r\n                </div>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label>Priority <span className='text-danger'>*</span></label>\r\n                    <CustomSelect\r\n                        data={filteredDropdownData[\"priority\"] || []}\r\n                        placeholder=\"Select Priority\"\r\n                        value={mrfFromData?.priority || ''}\r\n                        handleChange={(selectedOption) => handleInputChange(selectedOption, 'priority')}\r\n                        name=\"priority\"\r\n                    />\r\n                    {errors.priority &&\r\n                        <CustomError\r\n                            text={errors.priority}\r\n                        />\r\n                    }\r\n                </div>\r\n               {mrfType === \"replacement\" ? <div className=\"col-md-6 form-group mb-3\">\r\n                    <label>Emp ID <span className='text-danger'>*</span></label>\r\n                    \r\n                    <CustomSelect\r\n                        data={employeesForReportingManager}\r\n                        placeholder=\"Select Priority\"\r\n                        value={mrfFromData?.empId || ''}\r\n                        handleChange={(selectedOption) => handleInputChange(selectedOption, 'empId')}\r\n                        name=\"empId\"\r\n                    />\r\n\r\n                    \r\n\r\n                </div>:<>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label>Min Qualification <span className='text-danger'>*</span></label>\r\n                    <CustomSelect\r\n                        data={allQualification || []}\r\n                        placeholder=\"Select Min Qualification\"\r\n                        value={mrfFromData?.minQualififcation || ''}\r\n                        handleChange={(selectedOption) => handleInputChange(selectedOption, 'minQualififcation')}\r\n                        name=\"minQualififcation\"\r\n                    />\r\n                    {errors.min_qualififcation && <CustomError\r\n                        text={errors.min_qualififcation}\r\n                    />}\r\n\r\n                </div>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label>Business Impact <span className='text-danger'>*</span></label>\r\n                    <CustomSelect\r\n                        data={filteredDropdownData[\"business-impact\"] || []}\r\n                        placeholder=\"Select Priority\"\r\n                        value={mrfFromData?.businessImpact || ''}\r\n                        handleChange={(selectedOption) => handleInputChange(selectedOption, 'businessImpact')}\r\n                        name=\"businessImpact\"\r\n                    />\r\n                    {errors.business_impact && <CustomError\r\n                        text={errors.business_impact}\r\n                    />}\r\n                </div>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label>Total Vacant Position <span className='text-danger'>*</span></label>\r\n\r\n                    <Input\r\n                        type={\"number\"}\r\n                        name='vacantPosition'\r\n                        placeholder='Select Min Qualification level...'\r\n                        value={mrfFromData?.vacantPosition}\r\n                        id=\"vacantPosition\"\r\n                        onChange={(e) => handleInputChange(e)}\r\n                    />\r\n                    {errors.vacant_position && <CustomError\r\n                        text={errors.vacant_position}\r\n                    />}\r\n                </div>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label> Year Of Experience <span className='text-danger'>*</span></label>\r\n                    <CustomSelect\r\n                        data={filteredDropdownData[\"year-of-experience\"] || []}\r\n                        placeholder=\"Select Year Of Experience \"\r\n                        value={mrfFromData?.yearOfExperience || ''}\r\n                        handleChange={(selectedOption) => handleInputChange(selectedOption, 'yearOfExperience')}\r\n                        name=\"yearOfExperience\"\r\n                    />\r\n                    {errors.year_of_experience && <CustomError\r\n                        text={errors.year_of_experience}\r\n                    />}\r\n                </div>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label>Learning & Development Cost</label>\r\n                    <CustomSelect\r\n                        data={filteredDropdownData[\"learning-development-cost\"] || []}\r\n                        placeholder=\"Select Learning & Development Cost\"\r\n                        value={mrfFromData?.learningDevelopmentCost || ''}\r\n                        handleChange={(selectedOption) => handleInputChange(selectedOption, 'learningDevelopmentCost')}\r\n                        name=\"learningDevelopmentCost\"\r\n                    />\r\n                </div>\r\n                {mrfFromData?.learningDevelopmentCost.label === \"Yes\" && <>\r\n                    <div className=\"col-md-6 form-group mb-3\">\r\n                        <label>Min Learning & Development Cost</label>\r\n                        <Input\r\n                            type={\"number\"}\r\n                            name='minCost'\r\n                            placeholder='Select Min Learning & Development Cost...'\r\n                            value={mrfFromData?.minCost}\r\n                            id=\"minCost\"\r\n                            onChange={(e) => handleInputChange(e)}\r\n                        />\r\n\r\n                    </div>\r\n                    <div className=\"col-md-6 form-group mb-3\">\r\n                        <label>Max Learning & Development Cost</label>\r\n                        <Input\r\n                            type={\"number\"}\r\n                            name='maxCost'\r\n                            placeholder='Select Man Learning & Development Cost...'\r\n                            value={mrfFromData?.maxCost}\r\n                            id=\"minCost\"\r\n                            onChange={(e) => handleInputChange(e)}\r\n                        />\r\n\r\n                    </div>\r\n                </>}\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label>Type Of Appointment</label>\r\n                    <CustomSelect\r\n                        data={filteredDropdownData[\"type-of-appointment\"] || []}\r\n                        placeholder=\"Select Type Of Appointment\"\r\n                        value={mrfFromData?.appointmentType || ''}\r\n                        handleChange={(selectedOption) => handleInputChange(selectedOption, 'appointmentType')}\r\n                        name=\"appointmentType\"\r\n                    />\r\n\r\n                </div>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label>Appointment Duration</label>\r\n                    <Input\r\n                        type={\"number\"}\r\n                        name='appointmentDuration'\r\n                        placeholder='Enter Appointment Duration...'\r\n                        value={mrfFromData?.appointmentDuration}\r\n                        id=\"appointmentDuration\"\r\n                        onChange={(e) => handleInputChange(e)}\r\n                    />\r\n\r\n                </div>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label>Office Location <span className='text-danger'>*</span></label>\r\n                    <CustomSelect\r\n                        data={allLocationsData || []}\r\n                        placeholder=\"Select Type Of Appointment\"\r\n                        value={mrfFromData?.location || ''}\r\n                        handleChange={(selectedOption) => handleInputChange(selectedOption, 'location')}\r\n                        name=\"location\"\r\n                    />\r\n\r\n                    {errors.hiring_for && <CustomError\r\n                        text={errors.hiring_for}\r\n                    />}\r\n                </div>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label> Preferred Qualification <span className='text-danger'>*</span></label>\r\n                    <CustomSelect\r\n                        data={allQualification || []}\r\n                        placeholder=\"Select Qualification\"\r\n                        value={mrfFromData?.preferredQualification || ''}\r\n                        handleChange={(selectedOption) => handleInputChange(selectedOption, 'preferredQualification')}\r\n                        name=\"qualification\"\r\n                    />\r\n                    {errors.preferred_qualification &&\r\n                        <CustomError\r\n                            text={errors.preferred_qualification}\r\n                        />\r\n                    }\r\n                </div>\r\n                <div className=\"col-md-12 form-group mb-3\">\r\n                    <label>Mrf justification <span className='text-danger'>*</span></label>\r\n                    <textarea id=\"\" className=\"w-100 form-control\" placeholder=\"Enter the Mrf justification...\"\r\n                        name=\"mrfJustification\"\r\n                        value={mrfFromData?.mrfJustification}\r\n                        onChange={(e) => handleInputChange(e)}\r\n                    ></textarea>\r\n                    {errors.mrf_justification && <CustomError\r\n                        text={errors.mrf_justification}\r\n                    />}\r\n                </div>\r\n                </>}\r\n                <div style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n                    <>\r\n                        {<>\r\n                            <CustomButton\r\n                                text=\"Save & Next\"\r\n                                classNames=\"btn btn-primary gradientBg me-2\"\r\n                                isLoading={isLoadingBtn}\r\n                                handleClick={() => {\r\n                                    onSubmitMrfForm(\"save\")\r\n                                }}\r\n                            />\r\n                            {mrfData && <CustomButton\r\n                                text=\"Skip\"\r\n                                classNames=\"btn btn-success gradientBg me-2\"\r\n                                handleClick={() => {\r\n                                    onClickActive(2)\r\n                                }}\r\n                            />}\r\n                        </>}\r\n                    </>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateMrf\r\n","import React, { useEffect, useState } from 'react'\r\nimport Button from '../../../commanComponent/Button'\r\nimport { MrfJobDescSchema } from '../../../../utils/ValidationSchema'\r\nimport { validateSchema } from '../../../../utils/ValidationHelper'\r\nimport CustomError from '../../../globalComponents/CustomError'\r\nimport CustomSelect from '../../../commanComponent/CustomSelect'\r\nimport Input from '../../../commanComponent/Input'\r\nimport { CustomButton } from '../../../globalComponents'\r\n\r\nconst JobDescription = (props) => {\r\n    const {\r\n        setActiveValues,\r\n        onClickActive,\r\n        jobDescriptionFormData,\r\n        setJobDescriptionFromData,\r\n        allTrainingCertificates,\r\n        createUpdateMrf,\r\n        mrfId,\r\n        mrfData,\r\n        activeBack,\r\n\r\n\r\n    } = props\r\n    const [errors, setErrors] = useState({});\r\n    // const [trainingCertificate, setTrainingCertificate] = useState('')\r\n    const [mrfFieldDisable, setMrfFieldDisable] = useState(false)\r\n    const [btnType, setBtnType] = useState('edit')\r\n    const [jobDescriptionData, setJobDescriptionData] = useState(\r\n        {\r\n            responsiblities: '',\r\n            domain_knowledge: '',\r\n            training_certificates: '',\r\n            other_skills: '',\r\n            role_summary: '',\r\n        }\r\n    )\r\n    useEffect(() => {\r\n        if (mrfData) {\r\n            const allMrfData = mrfData?.data[0]\r\n            setMrfFieldDisable(true)\r\n            setJobDescriptionData({\r\n                responsiblities: allMrfData?.responsiblities || '',\r\n                domain_knowledge: allMrfData?.domain_knowledge || '',\r\n                training_certificates: { value: allMrfData?.training_certificates, label: allMrfData?.training_certificates_name } || '',\r\n                other_skills: allMrfData?.other_skills || '',\r\n                role_summary: allMrfData?.role_summary || '',\r\n            })\r\n        }\r\n    }, [mrfData])\r\n\r\n    // const handleFormData = async (e) => {\r\n    //     errors && setErrors({});\r\n    //     const { name, value } = e.target\r\n    //     setJobDescriptionData({ ...jobDescriptionData, [name]: value })\r\n    // }\r\n    const handleFormData = async (input, fieldName) => {\r\n        const name = fieldName || input.target.name;\r\n        const value = input.target ? input.target.value : input;\r\n\r\n        // Remove errors for the field being modified\r\n        setErrors((prevErrors) => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n\r\n        // Update form state\r\n        setJobDescriptionData((prevState) => ({\r\n            ...prevState,\r\n            [name]: value,\r\n        }));\r\n    }\r\n    const onSubmitJobDescription = async () => {\r\n\r\n        const payload = {\r\n            _id: mrfId,\r\n            query_type: 'jd',\r\n            step: '2',\r\n            role_summary: jobDescriptionData?.role_summary,\r\n            responsiblities: jobDescriptionData?.responsiblities,\r\n            domain_knowledge: jobDescriptionData?.domain_knowledge,\r\n            training_certificates: jobDescriptionData?.training_certificates?.value,\r\n            other_skills: jobDescriptionData?.other_skills\r\n\r\n        }\r\n\r\n        const validationResponse = await validateSchema(MrfJobDescSchema, payload);\r\n        if (validationResponse.isValid) {\r\n            createUpdateMrf(payload, 3)\r\n            setErrors({});\r\n\r\n\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <h3><img src=\"images/kpi-guidline.svg\" alt=\"\" width=\"40\" className=\"me-2\" /> Job Description</h3>\r\n            <div className=\"row mt-3\">\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label>Responsiblities <span className='text-danger'>*</span></label>\r\n                    <Input\r\n                        type={\"text\"}\r\n                        name='responsiblities'\r\n                        placeholder='Enter Responsiblities...'\r\n                        value={jobDescriptionData?.responsiblities}\r\n                        id=\"responsiblities\"\r\n                        onChange={(e) => handleFormData(e)}\r\n                    // isDisabled={mrfFieldDisable}\r\n                    />\r\n                    {errors.responsiblities &&\r\n                        <CustomError\r\n                            text={errors.responsiblities}\r\n                        />\r\n                    }\r\n\r\n                </div>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label>Domain Knowledge <span className='text-danger'>*</span></label>\r\n                    <Input\r\n                        type={\"text\"}\r\n                        name='domain_knowledge'\r\n                        placeholder='Enter Domain Knowledge...'\r\n                        value={jobDescriptionData?.domain_knowledge}\r\n                        id=\"domainKnowledge\"\r\n                        onChange={(e) => handleFormData(e)}\r\n                    // isDisabled={mrfFieldDisable}\r\n                    />\r\n                    {errors.domain_knowledge &&\r\n                        <CustomError\r\n                            text={errors.domain_knowledge}\r\n                        />\r\n                    }\r\n                </div>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label>Training Certificates</label>\r\n                    <CustomSelect\r\n                        data={allTrainingCertificates || []}\r\n                        placeholder=\"Select Training Certificates \"\r\n                        value={jobDescriptionData?.training_certificates || ''}\r\n                        handleChange={(selectedOption) => handleFormData(selectedOption, \"training_certificates\")}\r\n                        name=\"training_certificates\"\r\n                    // isDisabled={mrfFieldDisable}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6 form-group mb-3\">\r\n                    <label>Other Skills</label>\r\n                    <Input\r\n                        type={\"text\"}\r\n                        name='other_skills'\r\n                        placeholder='Enter other skills...'\r\n                        value={jobDescriptionData?.other_skills}\r\n                        id=\"other_skills\"\r\n                        onChange={(e) => handleFormData(e)}\r\n                        // isDisabled={mrfFieldDisable}\r\n                    />\r\n\r\n                </div>\r\n                <div className=\"col-md-12 form-group mb-3\">\r\n                    <label>Role Summary <span className='text-danger'>*</span></label>\r\n                    <textarea type=\"text\" className=\"form-control\"\r\n                        name='role_summary'\r\n                        value={jobDescriptionData?.role_summary}\r\n                        onChange={(e) => handleFormData(e)}\r\n                    // disabled={mrfFieldDisable}\r\n                    />\r\n                    {errors.role_summary &&\r\n                        <CustomError\r\n                            text={errors.role_summary}\r\n                        />\r\n                    }\r\n                </div>\r\n\r\n                <div style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n                    {\r\n                        <>\r\n                            <CustomButton\r\n                                text=\"Save & Next\"\r\n                                classNames=\"btn btn-primary gradientBg me-2\"\r\n                                handleClick={() => {\r\n                                    onSubmitJobDescription(\"save\")\r\n                                }}\r\n                            />\r\n                            <CustomButton\r\n                                text=\"Back\"\r\n                                classNames=\"btn btn-primary me-2\"\r\n                                // isLoading={isLoadingBtn}                \r\n                                handleClick={() => {\r\n                                    onClickActive(1, 1)\r\n                                }}\r\n                            />\r\n\r\n                              {mrfData && <CustomButton\r\n                                text=\"Skip\"\r\n                                classNames=\"btn btn-success gradientBg me-2\"\r\n                                handleClick={() => {\r\n                                    onClickActive(3)\r\n                                }}\r\n                            />}\r\n                        </>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default JobDescription\r\n","import React, { useEffect, useState } from 'react'\r\nimport Button from '../../../commanComponent/Button'\r\nimport CustomError from '../../../globalComponents/CustomError'\r\nimport { MrfInterviewSchema } from '../../../../utils/ValidationSchema'\r\nimport { validateSchema } from '../../../../utils/ValidationHelper'\r\nimport CustomSelect from '../../../commanComponent/CustomSelect'\r\nimport { CustomButton } from '../../../globalComponents'\r\nconst AddInterviewer = (props) => {\r\n  const {\r\n    onClickActive,\r\n    setInterviewData,\r\n    allDepartments,\r\n    allDesignations,\r\n    interviewListData,\r\n    filteredDropdownData,\r\n    getInterviewerList,\r\n    handleDepartmentByDesignation,\r\n    mrfId,\r\n    createUpdateMrf,\r\n    mrfData,\r\n  } = props\r\n  const [errors, setErrors] = useState([]);\r\n  const [addInterviewerData, setAddInterviewerData] = useState(\r\n    [{\r\n      department: null,\r\n      designation: null,\r\n      interviewStage: null,\r\n      interviewType: null,\r\n      interviewer: null,\r\n    }]\r\n  )\r\n  useEffect(() => {\r\n    if (mrfData?.data?.length) {\r\n      const allMrfData = mrfData.data[0].interview_data;\r\n      if (Array.isArray(allMrfData) && allMrfData.length > 0) {\r\n        setAddInterviewerData(allMrfData.map(item => ({\r\n          department: { value: item?.department, label: item?.department_name } || null,\r\n          designation: { value: item?.designation, label: item?.designation_name } || null,\r\n          interviewStage: { value: item?.interview_stage, label: item?.interview_stage_name } || null,\r\n          interviewType: { value: item?.interview_type_value, label: item?.interview_type_name } || null,\r\n          interviewer: { value: item?.interviewer, label: item?.interviewer_name } || null,\r\n        })));\r\n      } else {\r\n        setAddInterviewerData([{\r\n          department: null,\r\n          designation: null,\r\n          interviewStage: null,\r\n          interviewType: null,\r\n          interviewer: null,\r\n        }]);\r\n      }\r\n    }\r\n  }, [mrfData])\r\n\r\n  // const toggleEditMode = (index) => {\r\n  //   const updatedInterviewerData = addInterviewerData.map((form, i) => \r\n  //     i === index ? { ...form, isEditMode: !form.isEditMode } : form\r\n  //   );\r\n  //   setAddInterviewerData(updatedInterviewerData);\r\n  // };\r\n\r\n\r\n\r\n  const handleFormData = (input, fieldName, index) => {\r\n    const name = fieldName || input.target.name;\r\n    const value = input.target ? input.target.value : input;\r\n\r\n\r\n    // Update the specific interviewer at the given index\r\n    setAddInterviewerData((prevData) => {\r\n      const updatedData = [...prevData];\r\n      updatedData[index] = {\r\n        ...updatedData[index],\r\n        [name]: value,\r\n      };\r\n      return updatedData;\r\n    });\r\n\r\n    // Clear the error for the updated field\r\n    setErrors(prevErrors => {\r\n      const updatedErrors = [...prevErrors];\r\n      if (updatedErrors[index]) {\r\n        delete updatedErrors[index][name];\r\n      }\r\n      return updatedErrors;\r\n    });\r\n  };\r\n\r\n\r\n  const handleDepartment = (selectedOption) => {\r\n    if (selectedOption !== undefined && selectedOption !== null) {\r\n      handleDepartmentByDesignation(selectedOption?.value)\r\n    }\r\n\r\n  }\r\n\r\n  const handleDesignation = (selectedOption) => {\r\n    if (selectedOption !== undefined && selectedOption !== null) {\r\n      getInterviewerList(selectedOption.value)\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const onAddInterviewrsform = async (item, index, type) => {\r\n      // Validate the current item\r\n      const validationResponse = await validateSchema(MrfInterviewSchema, item);\r\n\r\n      // Track validation errors outside of setErrors\r\n      const updatedErrors = Array.isArray(errors) ? [...errors] : [];\r\n      let errorOccurred = false;\r\n  \r\n      if (validationResponse.isValid) {\r\n          // Clear errors for the current index if validation passes\r\n          updatedErrors[index] = {};\r\n      } else {\r\n          // Set validation errors for the current index and mark as error occurred\r\n          updatedErrors[index] = validationResponse.errors;\r\n          errorOccurred = true;\r\n      }\r\n  \r\n      // Update the state with new errors\r\n      setErrors(updatedErrors);\r\n\r\n    // Update the errors array if validation fails\r\n\r\n\r\n    if (errorOccurred) return;\r\n    if (type == \"add\") {\r\n      setAddInterviewerData((prevData) => [\r\n        ...prevData,\r\n        {\r\n          department: null,\r\n          designation: null,\r\n          interviewStage: null,\r\n          interviewType: null,\r\n          interviewer: null,\r\n          isEditMode: true,\r\n        },\r\n      ]);\r\n    }\r\n  \r\n    if (type == \"submit\") {\r\n      const interviewrData = getIdsOnly(addInterviewerData)\r\n      const payload = {\r\n        query_type: \"interviewer\",\r\n        mrf_id: mrfId,\r\n        step: 3,\r\n        interview_details: interviewrData\r\n\r\n      }\r\n      createUpdateMrf(payload, 4)\r\n      setErrors({});\r\n      // onClickActive(4)\r\n      setInterviewData(addInterviewerData)\r\n    }\r\n\r\n  };\r\n\r\n\r\n  const getIdsOnly = (interviewerData) => {\r\n    return interviewerData.map(item => ({\r\n      department: item?.department?._id || item?.department?.value,\r\n      designation: item?.designation?._id || item?.designation?.value,\r\n      interview_stage: item?.interviewStage?.id || item?.interviewStage?.value,\r\n      interview_type: item?.interviewType?.id || item?.interviewType?.value,\r\n      interviewer: item?.interviewer?._id ||item?.interviewer?.value,\r\n    }));\r\n  };\r\n\r\n  const onDeleteInterview = (index) => {\r\n    const updatedInterviewers = addInterviewerData.filter((_, i) => i !== index);\r\n    setAddInterviewerData(updatedInterviewers);\r\n  };\r\n  const renderInterviewr = () => {\r\n    return addInterviewerData.map((interviewForm, index) =>\r\n    (<div className=\"row mt-3\">\r\n      <div className=\"col-md-6 form-group mb-3\">\r\n        <label>Select Department <span className='text-danger'>*</span> </label>\r\n        <CustomSelect\r\n          data={allDepartments || []}\r\n          placeholder=\"Select Department\"\r\n          value={interviewForm?.department || null}\r\n          handleChange={(selectedOption) => { handleFormData(selectedOption, \"department\", index); handleDepartment(selectedOption); }}\r\n          name=\"department\"\r\n        />\r\n        {errors[index]?.department && (\r\n          <CustomError text={errors[index].department} />\r\n        )}\r\n\r\n      </div>\r\n      <div className=\"col-md-6 form-group mb-3\">\r\n        <label>Select Designation <span className='text-danger'>*</span> </label>\r\n        <CustomSelect\r\n          data={allDesignations || []}\r\n          placeholder=\"Select Designation\"\r\n          value={interviewForm?.designation || null}\r\n          handleChange={(selectedOption) => { handleFormData(selectedOption, \"designation\", index); handleDesignation(selectedOption) }}\r\n          name=\"designation\"\r\n        />\r\n\r\n        {errors[index]?.designation && (\r\n          <CustomError text={errors[index].designation} />\r\n        )}\r\n\r\n      </div>\r\n\r\n      <div className=\"col-md-6 form-group mb-3\">\r\n        <label>Interview stage <span className='text-danger'>*</span> </label>\r\n\r\n        <CustomSelect\r\n          data={filteredDropdownData['interview-stage'] || []}\r\n          placeholder=\"Select Interview stage \"\r\n          value={interviewForm?.interviewStage || null}\r\n          handleChange={(selectedOption) => handleFormData(selectedOption, \"interviewStage\", index)}\r\n          name=\"interviewStage\"\r\n        />\r\n\r\n        {errors[index]?.interviewStage && (\r\n          <CustomError text={errors[index].interviewStage} />\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"col-md-6 form-group mb-3\">\r\n        <label>Interview Type <span className='text-danger'>*</span> </label>\r\n\r\n        <CustomSelect\r\n          data={filteredDropdownData['interview-type'] || []}\r\n          placeholder=\"Select Interview Type \"\r\n          value={interviewForm?.interviewType || null}\r\n          handleChange={(selectedOption) => handleFormData(selectedOption, \"interviewType\", index)}\r\n          name=\"interviewType\"\r\n        />\r\n        {errors[index]?.interviewType && (\r\n          <CustomError text={errors[index].interviewType} />\r\n        )}\r\n      </div>\r\n      <div className=\"col-md-6 form-group mb-3\">\r\n        <label>Interviewer <span className='text-danger'>*</span> </label>\r\n        <CustomSelect\r\n          data={interviewListData || []}\r\n          placeholder=\"Select Interviewer \"\r\n          value={interviewForm?.interviewer || null}\r\n          handleChange={(selectedOption) => handleFormData(selectedOption, \"interviewer\", index)}\r\n          name=\"interviewer\"\r\n        />\r\n\r\n\r\n        {errors[index]?.interviewer && (\r\n          <CustomError text={errors[index].interviewer} />\r\n        )}\r\n      </div>\r\n      <div className=\"d-flex\">\r\n        {addInterviewerData.length - 1 == index &&\r\n          <CustomButton\r\n            text=\"Add Interviewer\"\r\n            classNames=\"btn btn-primary me-2\"\r\n            // isLoading={isLoadingBtn}                \r\n            handleClick={() => onAddInterviewrsform(interviewForm, index, \"add\")}\r\n          />\r\n        }\r\n        {addInterviewerData.length > 1 && <Button\r\n          btnClassName=\"btn btn-danger me-2\"\r\n          onClickFun={() => onDeleteInterview(index)}\r\n        >\r\n          Delete\r\n        </Button>}\r\n      </div>\r\n      {\r\n        <>\r\n          {addInterviewerData.length - 1 == index && <div style={{ display: \"flex\", justifyContent: \"end\" }}>\r\n            <CustomButton\r\n              text={\" Save & Next\"}\r\n              classNames=\"btn btn-primary gradientBg me-2\"\r\n              handleClick={() => onAddInterviewrsform(interviewForm, index, \"submit\")}\r\n            />\r\n\r\n            <CustomButton\r\n              text={\"Back\"}\r\n              classNames=\"btn btn-primary gradientBg me-2\"\r\n              handleClick={() => onClickActive(2, 2)}\r\n            />\r\n\r\n                   {mrfData && <CustomButton\r\n                                text=\"Skip\"\r\n                                classNames=\"btn btn-success gradientBg me-2\"\r\n                                handleClick={() => {\r\n                                    onClickActive(4)\r\n                                }}\r\n                            />}\r\n\r\n          </div>}</>}\r\n      {addInterviewerData.length - 1 !== index && <div>\r\n        <hr />\r\n      </div>}\r\n\r\n\r\n    </div>)\r\n\r\n\r\n    )\r\n\r\n  }\r\n  return (\r\n    <>\r\n      <h3><img src=\"images/kpi-guidline.svg\" alt=\"\" width=\"40\" className=\"me-2\" /> Add Interviewers</h3>\r\n      {<>{renderInterviewr()}</>}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AddInterviewer\r\n","import React, { useEffect, useState } from 'react'\r\nimport CreateMrf from './CreateMrf'\r\nimport JobDescription from './JobDescription'\r\nimport AddInterviewer from './AddInterviewer'\r\nimport CustomError from '../../../globalComponents/CustomError'\r\nimport CustomSelect from '../../../commanComponent/CustomSelect'\r\nimport Input from '../../../commanComponent/Input'\r\nimport { validateSchema } from '../../../../utils/ValidationHelper'\r\nimport { MrfCreateSchema, MrfInterviewSchema, MrfJobDescSchema } from '../../../../utils/ValidationSchema'\r\nimport { CustomButton } from '../../../globalComponents'\r\nimport Button from '../../../commanComponent/Button'\r\nimport { transformKey } from '../../../../utils/common'\r\n\r\nconst ReviewAndSubmit = (props) => {\r\n  const {\r\n    onClickActive,\r\n    mrfData,\r\n    submitDraftMrf,\r\n    isLoadingType,\r\n    isLoadingSubmitDraft\r\n  } = props\r\n  const [allMrfData, setMrfData] = useState('')\r\n  const [interviewrData, setInterviewerData] = useState([])\r\n\r\n  useEffect(() => {\r\n    if (mrfData) {\r\n      const allMrfData = mrfData?.data[0]\r\n      setMrfData(allMrfData)\r\n\r\n      if (Array.isArray(allMrfData?.interview_data) && allMrfData?.interview_data?.length > 0) {\r\n        setInterviewerData(allMrfData?.interview_data.map(item => ({\r\n          \"Department\": item?.department_name,\r\n          \"Designation\": item?.designation_name || null,\r\n          \"Interview Stage\": item?.interview_stage_name || null,\r\n          \"Interview Type\": item?.interview_type_name || null,\r\n          \"Interviewer\": item?.interviewer_name || null,\r\n        })));\r\n      }\r\n    }\r\n  }, [mrfData])\r\n\r\n  const interviewData = () => {\r\n    return (\r\n      interviewrData.map((item, index) => (<>\r\n        <div className=\"row mt-2\" key={index}>\r\n          {Object.entries(item).map(([key, value]) => (\r\n            <div className=\"col-md-4\" key={`${index}-${key}`}>\r\n              <div className=\"form-group row mrfViewOnly\">\r\n                <label htmlFor={`staticEmail_${index}_${key}`} className=\"col-md-6 col-form-label\">\r\n                  {transformKey(key)}:\r\n                </label>\r\n                <div className=\"col-md-6\">\r\n                  <strong className=\"form-control-plaintext\">\r\n                    {value || 'N/A'}\r\n                  </strong>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n        {interviewrData.length - 1 !== index && <hr />}\r\n      </>\r\n      )))\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className='d-flex justify-content-between'>\r\n        <h3><img src=\"images/kpi-guidline.svg\" alt=\"\" width=\"40\" className=\"me-2\" /> MRF Detail</h3>\r\n        {<CustomButton\r\n          classNames=\"btn btn-info  me-2\"\r\n          icon={<i className=\"fa fa-edit\" aria-hidden=\"true\"></i> }\r\n          styles={{minWidth: \"50px\"}}\r\n        // isLoading={isLoadingType === \"submit\" && isLoadingSubmitDraft}\r\n        handleClick={() => onClickActive(1)}\r\n        />}\r\n      </div>\r\n      <div className=\"row mt-2\">\r\n        <div className=\"row mt-2\">\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Department:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.department_name}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Designation:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.designation_name}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Position:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.position_name}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Priority :</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.priority_name}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {allMrfData?.type === \"replacement\" ? \r\n          <div className=\"col-md-4 \">\r\n          <div className=\"form-group row mrfViewOnly\">\r\n            <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Emp ID:</label>\r\n            <div className=\"col-md-6\">\r\n              <strong className=\"form-control-plaintext\" >{allMrfData?.emp_id}</strong>\r\n            </div>\r\n          </div>\r\n        </div>\r\n          \r\n          :<>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Min Qualification:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.min_qualififcation_name}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Business Impact:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.business_impact_name}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Total Vacant Position:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.type_of_appointment?.type}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Year Of Experience:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.year_of_experience_name}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Learning & Development Cost:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.learning_development_cost?.is_cost}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Min Learning & Development Cost:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.learning_development_cost?.min_cost}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Max Learning & Development Cost:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.learning_development_cost?.max_cost}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Type Of Appointment:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.type_of_appointment?.type}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Appointment Duration:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.type_of_appointment?.duration}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Office Location:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.hiring_for_name}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Preferred Qualification :</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.preferred_qualification_name}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Mrf justification:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.mrf_justification}</strong>\r\n              </div>\r\n            </div>\r\n          </div></>}\r\n        </div> \r\n      </div>\r\n      <hr />\r\n\r\n\r\n      <div className='d-flex justify-content-between'>\r\n      <h3><img src=\"images/kpi-guidline.svg\" alt=\"\" width=\"40\" className=\"me-2\" /> Job Description</h3>\r\n        <CustomButton\r\n          classNames=\"btn btn-info  me-2\"\r\n          icon={<i className=\"fa fa-edit\" aria-hidden=\"true\"></i> }\r\n          styles={{minWidth: \"50px\"}}\r\n        // isLoading={isLoadingType === \"submit\" && isLoadingSubmitDraft}\r\n        handleClick={() => onClickActive(2)}\r\n        />\r\n      </div>\r\n     \r\n      <div className=\"row mt-2\">\r\n        <div className=\"row mt-2\">\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Responsiblities:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.responsiblities}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Training Certificate:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.training_certificate_name}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Domain Knowledge:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.domain_knowledge}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Other Skills:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.other_skills}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-md-4 \">\r\n            <div className=\"form-group row mrfViewOnly\">\r\n              <label htmlFor=\"staticEmail\" className=\"col-md-6 col-form-label\" >Role Summary:</label>\r\n              <div className=\"col-md-6\">\r\n                <strong className=\"form-control-plaintext\" >{allMrfData?.role_summary}</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <hr />\r\n\r\n      <div className='d-flex justify-content-between'>\r\n      <h3><img src=\"images/kpi-guidline.svg\" alt=\"\" width=\"40\" className=\"me-2\" /> Add Interviewers</h3>\r\n        <CustomButton\r\n          classNames=\"btn btn-info  me-2\"\r\n          icon={<i className=\"fa fa-edit\" aria-hidden=\"true\"></i> }\r\n          styles={{minWidth: \"50px\"}}\r\n        // isLoading={isLoadingType === \"submit\" && isLoadingSubmitDraft}\r\n        handleClick={() => onClickActive(3)}\r\n        />\r\n      </div>\r\n\r\n      <>{interviewData()}</>\r\n\r\n      <hr />\r\n      <div className='d-flex justify-content-end mt-4'>\r\n        <CustomButton\r\n          text={\"Send for Approval\"}\r\n          classNames=\"btn btn-primary gradientBg me-2\"\r\n          isLoading={isLoadingType === \"submit\" && isLoadingSubmitDraft}\r\n          handleClick={() => submitDraftMrf(\"submit\")}\r\n        />\r\n\r\n        {/* <CustomButton\r\n          text={\"Draft\"}\r\n          classNames=\"btn btn-success me-2\"\r\n          isLoading={isLoadingType === \"draft\" && isLoadingSubmitDraft}\r\n          handleClick={() => submitDraftMrf(\"draft\")}\r\n        /> */}\r\n        {/* {mrfData && <CustomButton\r\n                                text=\"Next\"\r\n                                classNames=\"btn btn-success gradientBg me-2\"\r\n                                handleClick={() => {\r\n                                    onClickActive(4)\r\n                                }}\r\n                            />} */}\r\n\r\n      </div>\r\n\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ReviewAndSubmit\r\n","import React, { useEffect, useState } from 'react'\r\nimport CreateMrf from './MrfForms/CreateMrf'\r\nimport JobDescription from './MrfForms/JobDescription'\r\nimport AddInterviewer from './MrfForms/AddInterviewer'\r\nimport ReviewAndSubmit from './MrfForms/ReviewAndSubmit'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport {\r\n    departmentAction,\r\n    designationAction,\r\n    dropdownMasterActions,\r\n    locationActions,\r\n    mrfActions,\r\n    positionActions,\r\n    qualificationActions,\r\n    trainingCertificatesActions,\r\n    employeeActions,\r\n} from '../../../core/resource/actions'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nconst MrfProcessSteps = () => {\r\n    const dispatch = useDispatch()\r\n    const { mrfType,id } = useParams();\r\n    const {\r\n        getDepartmentListRes,\r\n        getDepartmentListError,\r\n        getDepartmentListPending\r\n    } = useSelector(state => state.department)\r\n    const {\r\n        getDesignationsByDepartmentRes,\r\n        getDesignationsByDepartmentPending,\r\n        getDesignationsByDepartmentError\r\n    } = useSelector(state => state.designation)\r\n    const {\r\n        getPositionsByDepartmentDesignationError,\r\n        getPositionsByDepartmentDesignationPending,\r\n        getPositionsByDepartmentDesignationRes\r\n    } = useSelector(state => state.position)\r\n    const {\r\n        getFilteredDropdownDataError,\r\n        getFilteredDropdownDataRes,\r\n        getFilteredDropdownDataPending\r\n    } = useSelector(state => state.dropdownMaster)\r\n\r\n    const {\r\n        getAllQualificationRes,\r\n        getAllQualificationPending,\r\n        getAllQualificationError\r\n    } = useSelector(state => state.qualification)\r\n\r\n    const {\r\n        getTrainingCertificatesRes,\r\n        getTrainingCertificatesPending,\r\n        getTrainingCertificatesError\r\n    } = useSelector(state => state.trainingCertificate)\r\n\r\n    const {\r\n        createUpdateMrfRes,\r\n        createUpdateMrfPending,\r\n        createUpdateMrfError,\r\n\r\n        getInterviewerListPending,\r\n        getInterviewerListRes,\r\n        getInterviewerListError,\r\n\r\n        getMrfDataByIdError,\r\n        getMrfDataByIdRes,\r\n        getMrfDataByIdPending,\r\n\r\n        submitDraftMrfPending,\r\n        submitDraftMrfRes,\r\n        submitDraftMrfError,\r\n\r\n    } = useSelector(state => state.mrf)\r\n\r\n    const {\r\n        getAllLocationsRes,\r\n        getAllLocationsPending,\r\n        getAllLocationsError,\r\n    } = useSelector(state => state.location)\r\n\r\n    const {\r\n        getEmployeeForReportingManagerPending,\r\n        getEmployeeForReportingManagerRes,\r\n        getEmployeeForReportingManagerError,\r\n    }=useSelector(state => state.employee)\r\n\r\n    const [isActive, setIsActive] = useState(1)\r\n    const [activeValues, setActiveValues] = useState([])\r\n    const [createMrfData, setCreateMrfData] = useState('')\r\n    const [jobDescriptionFormData, setJobDescriptionFromData] = useState('')\r\n    const [interviewData, setInterviewData] = useState([])\r\n    const [allDepartments, setAllDepartments] = useState([])\r\n    const [allDesignations, setAllDesignations] = useState([])\r\n    const [allPosition, setAllPosition] = useState([])\r\n    const [allTrainingCertificates, setAllTrainingCertificates] = useState([])\r\n    const [departmentId, setDepartmentId] = useState('')\r\n    const [allQualification, setAllQualification] = useState('')\r\n    const [filteredDropdownData, setFilteredDropdownData] = useState({})\r\n    const [allLocationsData, setAllLocationsData] = useState('')\r\n    const [activeTab, setActiveTab] = useState(1)\r\n    const [mrfId, setMrfId] = useState('')\r\n    const [interviewListData, setInterviewListData] = useState()\r\n    const [mrfData, setMrfData] = useState('')\r\n    const [activeBack, setActiveBack] = useState('')\r\n    const [isLoadingType, setIsLoadingType] = useState('')\r\n    const [employeesForReportingManager,setEmployeesForReportingManager ] = useState('')\r\n    const Navigate = useNavigate()\r\n\r\n    //Department api call\r\n    useEffect(() => {\r\n        getAllDepartments()\r\n        getDropdownFilteredData()\r\n        getAllQualificationData()\r\n        getTrainingCertificates()\r\n        getAllLocations()\r\n        getEmployeeForReportingManager()\r\n        dispatch(mrfActions.handleClearMrfStore('HANDLE_CLEAR_GET_MRF_DATA_BY_ID_STORE'))\r\n\r\n    }, [])\r\n    useEffect(()=>{\r\n        dispatch(mrfActions.handleClearMrfStore('HANDLE_CLEAR_GET_MRF_DATA_BY_ID_STORE'))\r\n        dispatch(mrfActions.handleClearMrfStore('HANDLE_CLEAR_CREATE_UPDATE_MRF_STORE'))\r\n    },[mrfType])\r\n\r\n    const getAllDepartments = () => {\r\n        if (!getDepartmentListRes || getDepartmentListRes === null || getDepartmentListRes === undefined) {\r\n            dispatch(departmentAction.getDepartmentListRequest());\r\n        } else {\r\n            const departmentResposnse = getDepartmentListRes?.data?.data?.data\r\n            setAllDepartments(departmentResposnse)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getDepartmentListPending) {\r\n            if (getDepartmentListError) {\r\n                return;\r\n            }\r\n            if (getDepartmentListRes) {\r\n                if (getDepartmentListRes?.data?.code === 200) {\r\n                    const departmentResposnse = getDepartmentListRes?.data?.data?.data\r\n                    setAllDepartments(departmentResposnse)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getDepartmentListRes,\r\n        getDepartmentListError,\r\n        getDepartmentListPending\r\n    ]);\r\n\r\n    //Department by Designaion api calling\r\n    const handleDepartmentByDesignation = (id) => {\r\n        setDepartmentId(id)\r\n        const params = {\r\n            department_id: id\r\n        }\r\n        dispatch(designationAction.getDesignationsByDepartmentRequest(params))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getDesignationsByDepartmentPending) {\r\n            if (getDesignationsByDepartmentError) {\r\n                return;\r\n            }\r\n            if (getDesignationsByDepartmentRes) {\r\n                if (getDesignationsByDepartmentRes?.data?.code === 200) {\r\n                    const designationResposnse = getDesignationsByDepartmentRes?.data?.data?.data\r\n                    setAllDesignations(designationResposnse)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getDesignationsByDepartmentRes,\r\n        getDesignationsByDepartmentError,\r\n        getDesignationsByDepartmentPending\r\n    ]);\r\n\r\n    //Department by Designaion api calling\r\n    const handlegetPositionByDepartmentDesignation = (id) => {\r\n        const params = {\r\n            department_id: departmentId,\r\n            designation_id: id\r\n        }\r\n        dispatch(positionActions.getPositionsByDepartmentDesignationRequest(params))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getPositionsByDepartmentDesignationPending) {\r\n            if (getPositionsByDepartmentDesignationError) {\r\n                return;\r\n            }\r\n            if (getPositionsByDepartmentDesignationRes) {\r\n                if (getPositionsByDepartmentDesignationRes?.data?.code === 200) {\r\n                    const PositionResposnse = getPositionsByDepartmentDesignationRes?.data?.data?.data\r\n                    setAllPosition(PositionResposnse)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getPositionsByDepartmentDesignationRes,\r\n        getPositionsByDepartmentDesignationError,\r\n        getPositionsByDepartmentDesignationPending\r\n    ]);\r\n\r\n\r\n    //dropdown master filter \r\n    const getDropdownFilteredData = () => {\r\n\r\n        const categorys = ['interview-type', 'priority', 'business-impact',\r\n            'learning-development-cost', 'year-of-experience', \"type-of-appointment\",\r\n            'interview-stage', 'interview-type',\r\n        ]\r\n        let params = { category: '' }\r\n        categorys.forEach((item) => {\r\n            params.category = item\r\n            dispatch(dropdownMasterActions.getFilteredDropdownDataRequest(params))\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getFilteredDropdownDataPending) {\r\n            if (getFilteredDropdownDataError) {\r\n                return;\r\n            }\r\n            if (getFilteredDropdownDataRes) {\r\n                if (getFilteredDropdownDataRes?.data?.code === 200) {\r\n                    const dropdwonFilterData = getFilteredDropdownDataRes?.data?.data?.data\r\n                    let categoryName = dropdwonFilterData?.category\r\n                    setFilteredDropdownData(prevState => ({\r\n                        ...prevState,\r\n                        [categoryName]: dropdwonFilterData?.data || []\r\n                    }));\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getFilteredDropdownDataRes,\r\n        getFilteredDropdownDataError,\r\n        getFilteredDropdownDataPending\r\n    ]);\r\n\r\n    // qualification api call\r\n    const getAllQualificationData = () => {\r\n        dispatch(qualificationActions.getAllQualificationRequest())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllQualificationPending) {\r\n            if (getAllQualificationError) {\r\n                return;\r\n            }\r\n            if (getAllQualificationRes) {\r\n                if (getAllQualificationRes?.data?.code === 200) {\r\n                    const qualificationRes = getAllQualificationRes?.data?.data?.data\r\n                    setAllQualification(qualificationRes)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllQualificationRes,\r\n        getAllQualificationError,\r\n        getAllQualificationPending\r\n    ]);\r\n\r\n    // training Certificates api call\r\n    const getTrainingCertificates = () => {\r\n        dispatch(trainingCertificatesActions.getTrainingCertificatesRequest())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getTrainingCertificatesPending) {\r\n            if (getTrainingCertificatesError) {\r\n                return;\r\n            }\r\n            if (getTrainingCertificatesRes) {\r\n                if (getTrainingCertificatesRes?.data?.code === 200) {\r\n                    const trainingCertificateData = getTrainingCertificatesRes?.data?.data?.data\r\n                    setAllTrainingCertificates(trainingCertificateData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getTrainingCertificatesRes,\r\n        getTrainingCertificatesError,\r\n        getTrainingCertificatesPending\r\n    ]);\r\n\r\n    //create update mrf \r\n\r\n    const createUpdateMrf = (payload, activeTabVal, type) => {\r\n        dispatch(mrfActions.createUpdateMrfRequest(payload))\r\n        setActiveTab(activeTabVal)\r\n        if (activeTabVal == 4) getMrfDataById();\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!createUpdateMrfPending) {\r\n            if (createUpdateMrfError) {\r\n                return;\r\n            }\r\n            if (createUpdateMrfRes) {\r\n                if (createUpdateMrfRes?.data?.code === 200) {\r\n                    // if(activeTab !== activeValues){\r\n                    const createUpdateMrfData = createUpdateMrfRes?.data?.data?.data\r\n                    setMrfId(createUpdateMrfData?.id)\r\n\r\n                    onClickActive(activeTab)\r\n                    setActiveValues((pre) => [...pre, activeTab - 1])\r\n                    dispatch(mrfActions.handleClearMrfStore('HANDLE_CLEAR_CREATE_UPDATE_MRF_STORE'))\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        createUpdateMrfRes,\r\n        createUpdateMrfError,\r\n        createUpdateMrfPending\r\n    ]);\r\n\r\n    // get all locations \r\n    const getAllLocations = () => {\r\n        dispatch(locationActions.getAllLocationsRequest())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllLocationsPending) {\r\n            if (getAllLocationsError) {\r\n                return;\r\n            }\r\n            if (getAllLocationsRes) {\r\n                if (getAllLocationsRes?.data?.code === 200) {\r\n                    const LocationsData = getAllLocationsRes?.data?.data?.data\r\n\r\n                    setAllLocationsData(LocationsData)\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllLocationsError,\r\n        getAllLocationsPending,\r\n        getAllLocationsRes\r\n    ]);\r\n\r\n\r\n    // get Interviewrs list \r\n    const getInterviewerList = (designationId) => {\r\n        const params = {\r\n            designation_id: designationId\r\n        }\r\n        dispatch(mrfActions.getInterviewerListRequest(params))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getInterviewerListPending) {\r\n            if (getInterviewerListError) {\r\n                return;\r\n            }\r\n            if (getInterviewerListRes) {\r\n                if (getInterviewerListRes?.data?.code === 200) {\r\n                    const InterviewerListData = getInterviewerListRes?.data?.data?.data\r\n                    setInterviewListData(InterviewerListData)\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getInterviewerListPending,\r\n        getInterviewerListError,\r\n        getInterviewerListRes\r\n    ]);\r\n\r\n    // get Mrf Data By Id\r\n    useEffect(()=>{\r\n        if(id){\r\n        getMrfDataById(id)\r\n        setIsActive(1)\r\n        }else{\r\n            setMrfData('')\r\n        }\r\n        \r\n    },[id])\r\n    const getMrfDataById = (id) => {\r\n       \r\n        const params = {\r\n            _id: id ||mrfId\r\n        }\r\n        dispatch(mrfActions.getMrfDataByIdRequest(params))\r\n    }\r\n    useEffect(() => {\r\n        if (!getMrfDataByIdPending) {\r\n            if (getMrfDataByIdError) {\r\n                return;\r\n            }\r\n            if (getMrfDataByIdRes) {\r\n                if (getMrfDataByIdRes?.data?.code === 200) {\r\n                    const getMrfDataByIdData = getMrfDataByIdRes?.data?.data?.data\r\n                    setMrfData(getMrfDataByIdData)\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getMrfDataByIdPending,\r\n        getMrfDataByIdError,\r\n        getMrfDataByIdRes\r\n    ]);\r\n\r\n\r\n    // get submit and Draft \r\n    const submitDraftMrf = (type) => {\r\n        const params = {\r\n            query_type: type,\r\n            _id: mrfId\r\n        }\r\n        setIsLoadingType(type)\r\n\r\n        dispatch(mrfActions.submitDraftMrfRequest(params))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!submitDraftMrfPending) {\r\n            if (submitDraftMrfError) {\r\n                return;\r\n            }\r\n            if (submitDraftMrfRes) {\r\n                if (submitDraftMrfRes?.data?.code === 200) {\r\n                    dispatch(mrfActions.handleClearMrfStore('HANDLE_CLEAR_GET_MRF_DATA_BY_ID_STORE'))\r\n                    dispatch(mrfActions.handleClearMrfStore('HANDLE_CLEAR_SUBMIT_DRAFT_MRF_STORE'))\r\n                    setMrfId('')\r\n                    Navigate('/mrf')\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        submitDraftMrfPending,\r\n        submitDraftMrfError,\r\n        submitDraftMrfRes\r\n    ]);\r\n\r\n\r\n       // get submit and Draft \r\n       const getEmployeeForReportingManager = () => {\r\n       \r\n        dispatch(employeeActions.getEmployeeForReportingManagerRequest())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getEmployeeForReportingManagerPending) {\r\n            if (getEmployeeForReportingManagerError) {\r\n                return;\r\n            }\r\n            if (getEmployeeForReportingManagerRes) {\r\n                if (getEmployeeForReportingManagerRes?.data?.code === 200) {\r\n                    const getEmployeeForReportingManagerData = getEmployeeForReportingManagerRes?.data?.data?.data\r\n                    setEmployeesForReportingManager(getEmployeeForReportingManagerData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getEmployeeForReportingManagerPending,\r\n        getEmployeeForReportingManagerError,\r\n        getEmployeeForReportingManagerRes\r\n    ]);\r\n\r\n\r\n\r\n\r\n\r\n    const onClickActive = (val, backValue) => {\r\n        setIsActive(val)\r\n        if (backValue) {\r\n            setActiveBack(backValue)\r\n            getMrfDataById()\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <div class=\"col-md-12 ps-md-0\">\r\n                <div class=\"cardBox h-100 newMrfProcess\">\r\n                    <div class=\"cardHead\">\r\n                        {/* <h3>New <span>MRF Process</span></h3> */}\r\n                        <ul class=\"tackList  mt-5 pt-2 pe-4\">\r\n                            <li onClick={() => onClickActive(1)} className={activeValues.includes(1) ? 'active' : ''}>Create MRF</li>\r\n                            <li onClick={() => onClickActive(2)} className={activeValues.includes(2) ? 'active' : ''}>Add Job Description</li>\r\n                            <li onClick={() => onClickActive(3)} className={activeValues.includes(3) ? 'active' : ''}>Add Interviewer</li>\r\n                            <li onClick={() => onClickActive(4)} className={activeValues.includes(4) ? 'active' : ''}>Review & Submit</li>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"cardBox mb-3 mt-3\">\r\n                <div class=\"cardHead\">\r\n\r\n                    {/* create mrf */}\r\n                    {isActive == 1 &&\r\n                        <CreateMrf\r\n                            onClickActive={onClickActive}\r\n                            createMrfData={createMrfData}\r\n                            isLoadingBtn={createUpdateMrfPending}\r\n                            setCreateMrfData={setCreateMrfData}\r\n                            allDepartments={allDepartments}\r\n                            allDesignations={allDesignations}\r\n                            allPosition={allPosition}\r\n                            allQualification={allQualification}\r\n                            filteredDropdownData={filteredDropdownData}\r\n                            allLocationsData={allLocationsData}\r\n                            activeBack={activeBack}\r\n                            createUpdateMrf={createUpdateMrf}\r\n                            getMrfDataById={getMrfDataById}\r\n                            handleDepartmentByDesignation={handleDepartmentByDesignation}\r\n                            handlegetPositionByDepartmentDesignation={handlegetPositionByDepartmentDesignation}\r\n                            mrfData={mrfData}\r\n                            mrfType={mrfType}\r\n                            employeesForReportingManager={employeesForReportingManager}\r\n                        />}\r\n                    {/*  Job Description */}\r\n                    {isActive == 2 && <JobDescription\r\n                        onClickActive={onClickActive}\r\n                        setActiveValues={setActiveValues}\r\n                        createUpdateMrf={createUpdateMrf}\r\n                        mrfId={mrfId}\r\n                        mrfData={mrfData}\r\n                        activeBack={activeBack}\r\n                        getMrfDataById={getMrfDataById}\r\n                        jobDescriptionFormData={jobDescriptionFormData}\r\n                        setJobDescriptionFromData={setJobDescriptionFromData}\r\n                        allTrainingCertificates={allTrainingCertificates}\r\n                        mrfType={mrfType}\r\n                    />}\r\n\r\n                    {/* Add Interviwers */}\r\n                    {isActive == 3 && <AddInterviewer\r\n                        onClickActive={onClickActive}\r\n                        setActiveValues={setActiveValues}\r\n                        interviewData={interviewData}\r\n                        setInterviewData={setInterviewData}\r\n                        allDepartments={allDepartments}\r\n                        allDesignations={allDesignations}\r\n                        filteredDropdownData={filteredDropdownData}\r\n                        handleDepartmentByDesignation={handleDepartmentByDesignation}\r\n                        interviewListData={interviewListData}\r\n                        getInterviewerList={getInterviewerList}\r\n                        createUpdateMrf={createUpdateMrf}\r\n                        getMrfDataById={getMrfDataById}\r\n                        mrfId={mrfId}\r\n                        mrfData={mrfData}\r\n                        activeBack={activeBack}\r\n                    />}\r\n\r\n                    {isActive == 4 && <ReviewAndSubmit\r\n                        onClickActive={onClickActive}\r\n                        mrfData={mrfData}\r\n                        submitDraftMrf={submitDraftMrf}\r\n                        isLoadingType={isLoadingType}\r\n                        isLoadingSubmitDraft={getMrfDataByIdPending}\r\n\r\n\r\n\r\n                    />}\r\n\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MrfProcessSteps\r\n","\r\nconst ValidattionTranslation = {\r\n    \"validations.fieldReq\": \"$FIELD is required.\",\r\n    \"minLength\": \"Minimum length is $1 characters.\",\r\n    \"maxLength\": \"Maximum length is $1 characters.\",\r\n    \"emailInvalid\": \"The email address is invalid.\",\r\n    \"mobileNum\": \"Mobile Number\",\r\n    \"emailAddress\": \"Email Address\",\r\n    \"allFieldReq\": \"All $FIELD are required.\",\r\n    \"onlyDigit\":\"Mobile Number is only Digit\",\r\n    \"reqField\":\"$REQUIREDFIELD is required.\",\r\n    \"shiftName\":\"Only alphabets are allowed\",\r\n\r\n    //mrf validation \r\n    \"department\": \"Department is required.\",\r\n    \"designation\": \"Designation is required.\",\r\n    \"position\": \"Position is required.\",\r\n    \"priority\": \"Priority is required.\",\r\n    \"minQualififcation\": \"Minimum qualification is required.\",\r\n    \"preferredQualification\": \"Preferred qualification is required.\",\r\n    \"businessImpact\": \"Business impact is required.\",\r\n    \"hiringFor\": \"Hiring for is required.\",\r\n    \"vacantPosition\": \"Vacant position is required.\",\r\n    \"yearOfExperience\": \"Years of experience is required.\",\r\n    \"mrfJustification\": \"Mrf justification is required.\",\r\n\r\n    // job description \r\n    \"responsiblities\": \"Responsiblities is required.\",\r\n    \"domainKnowledge\": \"Domain Knowledge is required.\",\r\n    \"roleSummary\": \"Role Summary is required.\",\r\n\r\n    //intervewer \r\n    \"interviewStage\": \"InterviewStage is required.\",\r\n    \"interviewer\": \"Interviewer is required.\",\r\n    \"nterviewer\": \"Interview Type is required.\",\r\n\r\n    // //candidate \r\n    // \"employeeName\": \"Employee Name is required.\",\r\n    // \"employeeEmail\": \"Employee Email is required.\",\r\n    // \"employeeMobile\":\"Employee Mobile is required.\",\r\n    // \"location\":\"Employee Location is required.\",\r\n    // \"source\": \"Source is required.\",\r\n    // \"experience\":\"Experience is required.\",\r\n    // \"address\": \"Address is optional.\",\r\n    // \"pincode\": \"Pincode is optional.\",\r\n    // \"skills\": \"Skills is optional.\",\r\n\r\n};\r\nexport default ValidattionTranslation\r\n","// import {\r\n//   addOrganizationSchema,\r\n//   addOrgBranchSchema,\r\n//   organizationSettingSchema,\r\n//   addInvoiceSchema,\r\n// } from \"./ValidationSchema\";\r\n\r\nimport ValidattionTranslation from './ValidattionTranslation';\r\n\r\nconst trans = (key,replacements = {}) => {\r\nlet translation = ValidattionTranslation[key] || key;\r\nfor (const [placeholder, value] of Object.entries(replacements)) {\r\n  translation = translation.replace(new RegExp(`\\\\$${placeholder}`, 'g'), value);\r\n}\r\nreturn translation;\r\n}\r\nconst emailRegix =\r\n  /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\nconst panNumRegex = new RegExp(/^[A-Z]{5}[0-9]{4}[A-Z]{1}$/);\r\nconst onlyDigitRegix = /^\\d+$/;\r\n\r\nconst isFieldValid = (formik, name) =>\r\n  !!(formik.touched[name] && formik.errors[name]);\r\n\r\nconst getFieldErrorMsg = (formik, name) => {\r\n  return (\r\n    isFieldValid(formik, name) && (\r\n      <small className=\"p-error\">{formik.errors[name]}</small>\r\n    )\r\n  );\r\n};\r\n\r\nconst digitsOnly = (value) => {\r\n  return onlyDigitRegix.test(value);\r\n};\r\n\r\nconst validateResponse = () => {\r\n  return { status: 401, msg_code: 401, msg: \"\", isValid: false, errors: null };\r\n};\r\n\r\nconst isBlank = (value) => {\r\n  return value === \"\" || false;\r\n};\r\n\r\nconst isNull = (value) => {\r\n  return value === null || false;\r\n};\r\n\r\nconst isNun = (value) => {\r\n  return Number.isNaN(value) || false;\r\n};\r\n\r\nconst isBlankOrNull = (value) => {\r\n  return value === undefined || isBlank(value) || isNull(value) || false;\r\n};\r\n\r\nconst validateMobile = (mobile) => {\r\n  if (mobile.length === 0) {\r\n    return {\r\n      isValid: false,\r\n      msg: trans(\"validations.fieldReq\").replace(\r\n        \"$FIELD\",\r\n        trans(\"label.mobileNum\")\r\n      ),\r\n    };\r\n  }\r\n  if (mobile.length < 10) {\r\n    return {\r\n      isValid: false,\r\n      msg: trans(\"validations.minLength\").replace(\"$1\", 10),\r\n    };\r\n  }\r\n  if (mobile.length > 10) {\r\n    return {\r\n      isValid: false,\r\n      msg: trans(\"validations.maxLength\").replace(\"$1\", 10),\r\n    };\r\n  }\r\n  return { isValid: true, msg: \"\" };\r\n};\r\n\r\nconst validateEmail = (email) => {\r\n  if (email.length === 0) {\r\n    return {\r\n      isValid: false,\r\n      msg: trans(\"validations.fieldReq\").replace(\r\n        \"$FIELD\",\r\n        trans(\"label.emailAddress\")\r\n      ),\r\n    };\r\n  }\r\n  if (!emailRegix.test(email)) {\r\n    return { isValid: false, msg: trans(\"validations.emailInvalid\") };\r\n  }\r\n  return { isValid: true, msg: \"\" };\r\n};\r\n\r\nconst validateSchema = async (schema, data) => {\r\n  const validateDataRes = validateResponse();\r\n  if (!schema) {\r\n    validateDataRes.msg_code = 401;\r\n    validateDataRes.msg = trans(\"validations.allFieldReq\");\r\n    return validateDataRes;\r\n  }\r\n\r\n  const result = await schema.isValid(data);\r\n  const errorsList = {};\r\n  if (!result) {\r\n    await schema.validate(data, { abortEarly: false }).catch((err) => {\r\n      const errors = err.inner.reduce((acc, error) => {\r\n        return (errorsList[error.path] = error.message);\r\n      }, {});\r\n    });\r\n    validateDataRes.errors = errorsList;\r\n    return validateDataRes;\r\n  }\r\n  validateDataRes.msg_code = 200;\r\n  validateDataRes.status = 200;\r\n  validateDataRes.isValid = true;\r\n  return validateDataRes;\r\n};\r\n\r\nconst validateAddBranch = async (body) => {\r\n  const validateDataRes = await validateSchema(\"addOrgBranchSchema\", body);\r\n  return validateDataRes;\r\n};\r\nconst validateAddOrganization = async (body) => {\r\n  const validateDataRes = await validateSchema(\"addOrganizationSchema\", body);\r\n  return validateDataRes;\r\n};\r\n\r\nconst validateOrgSettings = async (body) => {\r\n  const validateDataRes = await validateSchema(\"organizationSettingSchema\", body);\r\n  return validateDataRes;\r\n};\r\n\r\nconst validateAddInvoice = async (body) => {\r\n  const validateDataRes = await validateSchema(\"addInvoiceSchema\", body);\r\n  return validateDataRes;\r\n};\r\nconst regex = /^[A-Za-z0-9 ' ']+$/;\r\nconst validateField = (value, type, minLength = 3) => {\r\n  if (type === \"mobile\") {\r\n    if (value.length < 10) {\r\n      return trans(\"minLength\").replace(\"$1\", 10);\r\n    }\r\n    if (value.length > 10) {\r\n      return trans(\"maxLength\").replace(\"$1\", 10);\r\n    }\r\n    if(!onlyDigitRegix.test(value)){\r\n      return trans(\"onlyDigit\")\r\n    }\r\n    \r\n  } else if (type === \"email\") {\r\n    if (!emailRegix.test(value)) {\r\n      return trans(\"emailInvalid\");\r\n    }\r\n  } else if (type === \"string\") {\r\n    if (value.length < minLength) {\r\n      return trans(\"minLength\").replace(\"$1\", minLength);\r\n    }else if(!regex.test(value)){\r\n      return trans(\"shiftName\");\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport {\r\n  trans,\r\n  digitsOnly,\r\n  isFieldValid,\r\n  getFieldErrorMsg,\r\n  validateAddBranch,\r\n  validateMobile,\r\n  validateAddOrganization,\r\n  validateOrgSettings,\r\n  validateAddInvoice,\r\n  validateSchema,\r\n  validateField,\r\n};\r\n","import * as yup from \"yup\";\r\nimport { digitsOnly, trans, validateField } from './ValidationHelper';\r\n\r\n// // Extend Yup with the combined custom validation method\r\nyup.addMethod(yup.string, \"validateField\", function (type, minLength = 3) {\r\n  return this.test(\"validate-field\", trans(\"invalid input\"), function (value) {\r\n    const { path, createError } = this;\r\n    const validationResponse = validateField(value, type, minLength);\r\n    return validationResponse === true || createError({ path, message: validationResponse });\r\n  });\r\n});\r\n\r\nconst employeeLoginSchema = yup.object().shape({\r\n  username: yup\r\n    .string()\r\n    .required(trans(\"validations.emailReq\"))\r\n    .email(trans(\"validations.invalidEmail\"))\r\n    .min(3, trans(\"validations.minLength\").replace(\"$1\", 3))\r\n    .max(50, trans(\"validations.maxLength\").replace(\"$1\", 50)),\r\n  password: yup\r\n    .string()\r\n    .required(trans(\"validations.passwordReq\"))\r\n    .min(8, trans(\"validations.minLength\").replace(\"$1\", 8))\r\n    .max(20, trans(\"validations.maxLength\").replace(\"$1\", 20)),\r\n\r\n});\r\nconst addEmployeeSchema = yup.object().shape({\r\n  first_name: yup\r\n    .string()\r\n    .required(trans(\"validations.firstnameReq\"))\r\n    .min(2, trans(\"validations.minLength\").replace(\"$1\", 2))\r\n    .max(20, trans(\"validations.maxLength\").replace(\"$1\", 20)),\r\n  last_name: yup\r\n    .string()\r\n    .required(trans(\"validations.lastnameReq\"))\r\n    .min(2, trans(\"validations.minLength\").replace(\"$1\", 2))\r\n    .max(20, trans(\"validations.maxLength\").replace(\"$1\", 20)),\r\n  email_id: yup\r\n    .string()\r\n    .required(trans(\"validations.emailReq\"))\r\n    .email(trans(\"validations.invalidEmail\"))\r\n    .min(2, trans(\"validations.minLength\").replace(\"$1\", 2))\r\n    .max(50, trans(\"validations.maxLength\").replace(\"$1\", 50)),\r\n  contact_number: yup\r\n    .string()\r\n    .required(trans(\"validations.contactNumberReq\"))\r\n    .min(10, trans(\"validations.minLength\").replace(\"$1\", 10))\r\n    .max(10, trans(\"validations.maxLength\").replace(\"$1\", 10)),\r\n  pan: yup\r\n    .string()\r\n    .required(trans(\"validations.panReq\"))\r\n    .min(5, trans(\"validations.minLength\").replace(\"$1\", 5))\r\n    .max(10, trans(\"validations.maxLength\").replace(\"$1\", 10)),\r\n  currency: yup\r\n    .string()\r\n    .required(trans(\"validations.currencyReq\")),\r\n  address_line_1: yup\r\n    .string()\r\n    .required(trans(\"validations.addressLine1Req\"))\r\n    .min(2, trans(\"validations.minLength\").replace(\"$1\", 2))\r\n    .max(50, trans(\"validations.maxLength\").replace(\"$1\", 50)),\r\n  address_line_2: yup\r\n    .string()\r\n    .required(trans(\"validations.addressLine2Req\"))\r\n    .min(2, trans(\"validations.minLength\").replace(\"$1\", 2))\r\n    .max(50, trans(\"validations.maxLength\").replace(\"$1\", 50)),\r\n  city: yup\r\n    .string()\r\n    .required(trans(\"validations.cityReq\"))\r\n    .min(4, trans(\"validations.minLength\").replace(\"$1\", 4))\r\n    .max(20, trans(\"validations.maxLength\").replace(\"$1\", 20)),\r\n  state: yup\r\n    .string().required(trans(\"validations.stateReq\"))\r\n    .max(50, trans(\"validations.maxLength\").replace(\"$1\", 50)),\r\n  country: yup\r\n    .string().required(trans(\"validations.countryReq\")),\r\n  postal_code: yup\r\n    .number()\r\n    .typeError(trans(\"validations.numberReq\"))\r\n    .required(trans(\"validations.postalCodeReq\"))\r\n    .min(100000, trans(\"validations.minPostalCodeLength\"))\r\n    .max(999999, trans(\"validations.maxPostalCodeLength\")),\r\n});\r\nconst addCountry = yup.object().shape({\r\n  country_name: yup.string().required(trans(\"validations.country_name\")),\r\n  country_code: yup\r\n    .string()\r\n    .required(trans(\"validations.country_code\"))\r\n    .max(3, trans(\"validations.maxLength\").replace(\"$1\", 3)),\r\n});\r\n\r\nconst addDepartmentSchema = yup.object().shape({\r\n  depName: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Department Name\" })),\r\n\r\n  shortName: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Short Name\" }))\r\n});\r\n\r\n// Designation Schema\r\nconst addDesignationSchema = yup.object().shape({\r\n\r\n  departmentId: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Department Name\" })),\r\n\r\n  designationName: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Designation Name\" })),\r\n\r\n  shortName: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Short Name\" }))\r\n});\r\n// mrf form schema\r\n\r\nconst MrfCreateSchema = yup.object().shape({\r\n  department_id: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Department \" })),\r\n  designation_id: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Designation \" })),\r\n\r\n  position_id: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Position \" })),\r\n  priority: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Priority\" })),\r\n  min_qualififcation: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Min Qualififcation \" })),\r\n\r\n  preferred_qualification: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Preferred Qualification \" })),\r\n\r\n  business_impact: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Business Impact \" })),\r\n  hiring_for: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Location \" })),\r\n  vacant_position: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Vacant Position \" })),\r\n  year_of_experience: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Year Of Experience \" })),\r\n  mrf_justification: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Mrf Justification \" })),\r\n});\r\n\r\nconst MrfReplacementSchema = yup.object().shape({\r\n  department_id: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Department \" })),\r\n  designation_id: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Designation \" })),\r\n\r\n  position_id: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Position \" })),\r\n  priority: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Priority\" })),\r\n  emp_id: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Priority\" })),\r\n});\r\n\r\nconst MrfJobDescSchema = yup.object().shape({\r\n  responsiblities: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Responsiblities\" })),\r\n    domain_knowledge: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Domain Knowledge\" })),\r\n\r\n    role_summary: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Role Summary\" })),\r\n\r\n  otherSkills: yup\r\n    .string()\r\n    .optional(),\r\n  trainingCertificates: yup\r\n    .string()\r\n    .optional(),\r\n});\r\nconst MrfInterviewSchema = yup.object().shape({\r\n  department: yup\r\n    .object().nullable()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Department\" })),\r\n  designation: yup\r\n    .object().nullable()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Designation\" })),\r\n\r\n  interviewStage: yup\r\n    .object().nullable()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Interview Stage\" })),\r\n\r\n  interviewer: yup\r\n    .object().nullable()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Interviewer\" })),\r\n  interviewType: yup\r\n    .object().nullable()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Interview Type\" })),\r\n\r\n});\r\n\r\n\r\n// candidate form \r\nconst candidateSchema = yup.object().shape({\r\n  employeeName: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Employee Name\" })),\r\n\r\n  employeeEmail: yup.\r\n    string()\r\n    .validateField(\"email\")\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Employee Email\" })),\r\n\r\n  employeeMobile: yup\r\n    .string()\r\n    .validateField(\"mobile\")\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Employee Mobile\" })),\r\n\r\n  location: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Location\" })),\r\n\r\n  source: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Source\" })),\r\n\r\n  experience: yup\r\n    .string()\r\n    .required(trans(\"reqField\", { REQUIREDFIELD: \"Experience\" })),\r\n\r\n  address: yup\r\n    .string()\r\n    .optional(),\r\n\r\n  pincode: yup\r\n    .string()\r\n    .optional(),\r\n\r\n  skills: yup\r\n    .string()\r\n    .optional(),\r\n\r\n});\r\n\r\nconst addEmailTypeSchema = yup.object().shape({\r\n  name: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Name Email Type\"})),\r\n  \r\n  is_active: yup\r\n  .boolean()\r\n  .optional()\r\n});\r\n\r\nconst addEmailTemplatechema = yup.object().shape({\r\n  template_name: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Template Name\"})),\r\n  \r\n  email_type: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Template Type\"})),\r\n\r\n  email_title: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Template Title\"})),\r\n\r\n  body: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Body\"})),\r\n\r\n  is_active: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Status\"}))\r\n  \r\n}); \r\n\r\n\r\nconst addActionSchema = yup.object().shape({\r\n  action_name: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Action Name\"})),\r\n  \r\n  action_type: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Action Type\"})),\r\n\r\n  template_id: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Template ID\"})),\r\n  \r\n}); \r\n\r\nconst addShiftSchema = yup.object().shape({\r\n  shift_name: yup\r\n  .string()\r\n  .validateField(\"string\")\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Shift Name\"})),\r\n  \r\n  shift_code: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Short Name\"})),\r\n\r\n  color: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"color\"})),\r\n\r\n  is_active: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Is Active\"})),\r\n\r\n  shift_start_time: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Shift Start Time\"})),\r\n\r\n  shift_end_time: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"SHift End Time\"})),\r\n\r\n  break_start_time: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Break Start Time\"})),\r\n\r\n  break_end_time: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Break End_Time\"})),\r\n\r\n  early_arrival_tolerance: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Early Coming Time\"})),\r\n\r\n  late_departure_tolerance: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"let Going Time\"})),\r\n\r\n  grace_start_time:yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Grace Start Time\"})),\r\n\r\n  grace_end_time:yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Grace End Time\"})),\r\n\r\n  half_day_policy_time: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Half Day Policy Time\"})),\r\n\r\n  full_day_policy_time: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Full Day Policy Time\"})),\r\n\r\n  shift_type: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Shift Type\"})),\r\n\r\n  \r\n});\r\n\r\nconst addCalendarchema =yup.object().shape({\r\n  title: yup\r\n  .string()\r\n  .validateField(\"string\")\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Title\"})),\r\n  \r\n  working_days: yup\r\n  .string()\r\n  .required(trans(\"reqField\",{REQUIREDFIELD:\"Working Day\"})),\r\n  \r\n})\r\nexport {\r\n  employeeLoginSchema,\r\n  addEmployeeSchema,\r\n  addCountry,\r\n  addDepartmentSchema,\r\n  MrfCreateSchema,\r\n  MrfJobDescSchema,\r\n  MrfInterviewSchema,\r\n  candidateSchema,\r\n  addDesignationSchema,\r\n  addEmailTypeSchema,\r\n  addEmailTemplatechema,\r\n  addActionSchema,\r\n  addShiftSchema,\r\n  addCalendarchema,\r\n  MrfReplacementSchema\r\n};\r\n"],"names":["_ref","text","style","_jsx","_Fragment","children","className","props","data","placeholder","defaultValue","isDisabled","isLoading","isClearable","isSearchable","handleChange","value","name","Select","classNamePrefix","label","options","onChange","onClickActive","isLoadingBtn","allDepartments","allDesignations","allPosition","allQualification","filteredDropdownData","allLocationsData","createUpdateMrf","handleDepartmentByDesignation","handlegetPositionByDepartmentDesignation","mrfData","mrfType","employeesForReportingManager","errors","setErrors","useState","mrfFromData","setMrfFromData","department","designation","position","priority","minQualififcation","preferredQualification","businessImpact","location","vacantPosition","learningDevelopmentCost","minCost","maxCost","appointmentType","appointmentDuration","mrfJustification","yearOfExperience","empId","useEffect","_allMrfData$learning_","_allMrfData$learning_2","_allMrfData$learning_3","_allMrfData$learning_4","allMrfData","department_id","department_name","designation_id","designation_name","position_id","position_name","priority_name","min_qualififcation","min_qualififcation_name","preferred_qualification","preferred_qualification_name","business_impact","business_impact_name","hiring_for","hiring_for_name","vacant_position","learning_development_cost","is_cost","min_cost","max_cost","type_of_appointment","type","duration","mrf_justification","year_of_experience","year_of_experience_name","emp_id","emp_id_name","handleInputChange","async","input","fieldName","target","prevState","_jsxs","src","alt","width","CustomSelect","selectedOption","undefined","handleDepartment","CustomError","handleDesignation","Input","id","e","display","justifyContent","CustomButton","classNames","handleClick","validationResponse","payload","_mrfFromData$departme","_mrfFromData$designat","_mrfFromData$position","_mrfFromData$minQuali","_mrfFromData$preferre","_mrfFromData$business","_mrfFromData$learning","_mrfFromData$appointm","_mrfFromData$yearOfEx","_mrfFromData$departme2","_mrfFromData$designat2","_mrfFromData$position2","validateSchema","MrfCreateSchema","MrfReplacementSchema","isValid","onSubmitMrfForm","setActiveValues","jobDescriptionFormData","setJobDescriptionFromData","allTrainingCertificates","mrfId","activeBack","mrfFieldDisable","setMrfFieldDisable","btnType","setBtnType","jobDescriptionData","setJobDescriptionData","responsiblities","domain_knowledge","training_certificates","other_skills","role_summary","training_certificates_name","handleFormData","prevErrors","_jobDescriptionData$t","_id","query_type","step","MrfJobDescSchema","onSubmitJobDescription","setInterviewData","interviewListData","getInterviewerList","addInterviewerData","setAddInterviewerData","interviewStage","interviewType","interviewer","_mrfData$data","length","interview_data","Array","isArray","map","item","interview_stage","interview_stage_name","interview_type_value","interview_type_name","interviewer_name","index","prevData","updatedData","updatedErrors","onAddInterviewrsform","MrfInterviewSchema","errorOccurred","isEditMode","interviewrData","getIdsOnly","mrf_id","interview_details","interviewerData","_item$department","_item$department2","_item$designation","_item$designation2","_item$interviewStage","_item$interviewStage2","_item$interviewType","_item$interviewType2","_item$interviewer","_item$interviewer2","interview_type","interviewForm","_errors$index","_errors$index2","_errors$index3","_errors$index4","_errors$index5","Button","btnClassName","onClickFun","updatedInterviewers","filter","_","i","onDeleteInterview","_allMrfData$type_of_a","_allMrfData$type_of_a2","_allMrfData$type_of_a3","submitDraftMrf","isLoadingType","isLoadingSubmitDraft","setMrfData","setInterviewerData","_allMrfData$interview","icon","styles","minWidth","htmlFor","training_certificate_name","Object","entries","key","transformKey","MrfProcessSteps","dispatch","useDispatch","useParams","getDepartmentListRes","getDepartmentListError","getDepartmentListPending","useSelector","state","getDesignationsByDepartmentRes","getDesignationsByDepartmentPending","getDesignationsByDepartmentError","getPositionsByDepartmentDesignationError","getPositionsByDepartmentDesignationPending","getPositionsByDepartmentDesignationRes","getFilteredDropdownDataError","getFilteredDropdownDataRes","getFilteredDropdownDataPending","dropdownMaster","getAllQualificationRes","getAllQualificationPending","getAllQualificationError","qualification","getTrainingCertificatesRes","getTrainingCertificatesPending","getTrainingCertificatesError","trainingCertificate","createUpdateMrfRes","createUpdateMrfPending","createUpdateMrfError","getInterviewerListPending","getInterviewerListRes","getInterviewerListError","getMrfDataByIdError","getMrfDataByIdRes","getMrfDataByIdPending","submitDraftMrfPending","submitDraftMrfRes","submitDraftMrfError","mrf","getAllLocationsRes","getAllLocationsPending","getAllLocationsError","getEmployeeForReportingManagerPending","getEmployeeForReportingManagerRes","getEmployeeForReportingManagerError","employee","isActive","setIsActive","activeValues","createMrfData","setCreateMrfData","interviewData","setAllDepartments","setAllDesignations","setAllPosition","setAllTrainingCertificates","departmentId","setDepartmentId","setAllQualification","setFilteredDropdownData","setAllLocationsData","activeTab","setActiveTab","setMrfId","setInterviewListData","setActiveBack","setIsLoadingType","setEmployeesForReportingManager","Navigate","useNavigate","getAllDepartments","getDropdownFilteredData","getAllQualificationData","getTrainingCertificates","getAllLocations","getEmployeeForReportingManager","mrfActions","handleClearMrfStore","_getDepartmentListRes","_getDepartmentListRes2","departmentResposnse","departmentAction","getDepartmentListRequest","_getDepartmentListRes3","code","_getDepartmentListRes4","_getDepartmentListRes5","params","designationAction","getDesignationsByDepartmentRequest","_getDesignationsByDep","_getDesignationsByDep2","_getDesignationsByDep3","designationResposnse","_getPositionsByDepart","_getPositionsByDepart2","_getPositionsByDepart3","PositionResposnse","category","forEach","dropdownMasterActions","getFilteredDropdownDataRequest","_getFilteredDropdownD","_getFilteredDropdownD2","_getFilteredDropdownD3","dropdwonFilterData","categoryName","qualificationActions","getAllQualificationRequest","_getAllQualificationR","_getAllQualificationR2","_getAllQualificationR3","qualificationRes","trainingCertificatesActions","getTrainingCertificatesRequest","_getTrainingCertifica","_getTrainingCertifica2","_getTrainingCertifica3","trainingCertificateData","activeTabVal","createUpdateMrfRequest","getMrfDataById","_createUpdateMrfRes$d","_createUpdateMrfRes$d2","_createUpdateMrfRes$d3","createUpdateMrfData","pre","locationActions","getAllLocationsRequest","_getAllLocationsRes$d","_getAllLocationsRes$d2","_getAllLocationsRes$d3","LocationsData","_getInterviewerListRe","_getInterviewerListRe2","_getInterviewerListRe3","InterviewerListData","getMrfDataByIdRequest","_getMrfDataByIdRes$da","_getMrfDataByIdRes$da2","_getMrfDataByIdRes$da3","getMrfDataByIdData","_submitDraftMrfRes$da","employeeActions","getEmployeeForReportingManagerRequest","_getEmployeeForReport","_getEmployeeForReport2","_getEmployeeForReport3","getEmployeeForReportingManagerData","val","backValue","class","onClick","includes","CreateMrf","positionActions","getPositionsByDepartmentDesignationRequest","JobDescription","AddInterviewer","designationId","getInterviewerListRequest","ReviewAndSubmit","submitDraftMrfRequest","trans","replacements","arguments","translation","ValidattionTranslation","replace","RegExp","emailRegix","onlyDigitRegix","schema","validateDataRes","status","msg_code","msg","result","errorsList","validate","abortEarly","catch","err","inner","reduce","acc","error","path","message","regex","validateField","minLength","test","yup","this","createError","shape","username","required","email","min","max","password","first_name","last_name","email_id","contact_number","pan","currency","address_line_1","address_line_2","city","country","postal_code","typeError","country_name","country_code","addDepartmentSchema","depName","REQUIREDFIELD","shortName","addDesignationSchema","designationName","otherSkills","optional","trainingCertificates","nullable","candidateSchema","employeeName","employeeEmail","employeeMobile","source","experience","address","pincode","skills","addEmailTemplatechema","is_active","template_name","email_type","email_title","body","addActionSchema","action_name","action_type","template_id","addShiftSchema","shift_name","shift_code","color","shift_start_time","shift_end_time","break_start_time","break_end_time","early_arrival_tolerance","late_departure_tolerance","grace_start_time","grace_end_time","half_day_policy_time","full_day_policy_time","shift_type","addCalendarchema","title","working_days"],"sourceRoot":""}