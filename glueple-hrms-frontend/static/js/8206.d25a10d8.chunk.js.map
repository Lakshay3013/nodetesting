{"version":3,"file":"static/js/8206.d25a10d8.chunk.js","mappings":"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","sources":["components/payrollAdmin/employee/Employees.js","components/payrollAdmin/employee/EmpInvestmentFilters.js","components/payrollAdmin/employee/EmployeeInvestments.js"],"sourcesContent":["import React, { useMemo } from 'react'\r\nimport { CustomTable } from '../../reuseableComponents';\r\nimport { getBadgeColor } from '../../../utils/common';\r\nimport { Link } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { payrollActions } from '../../../core/resource/actions';\r\n\r\nconst Employees = (props) => {\r\n    const dispatch = useDispatch()\r\n    const { currentPage, setCurrentPage, allEmployees, isLoading } = props\r\n    const employeeField = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'emp_id', label: 'Emp Id' },\r\n        { key: 'name', label: 'Full Name' },\r\n        { key: \"salary_status\", label: 'Salary Status' },\r\n        { key: 'account_status', label: 'Account Status' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n    const setSelectedEmpData = (data) => {\r\n        dispatch(payrollActions.selectedEmployeeData(data))\r\n    }\r\n\r\n    const employeeScopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        salary_status: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.salary_status ? \"active\" : \"inactive\")}`}\r\n            >\r\n                {item.salary_status ? \"active\" : \"inactive\"}\r\n            </span>\r\n        ),\r\n\r\n        account_status: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.account_status)}`}\r\n            >\r\n                {item.account_status}\r\n            </span>\r\n        ),\r\n\r\n        action: item => (\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    <li>\r\n                        <Link className=\"dropdown-item\" to={`investments/${item?.id}`}\r\n                            onClick={() => setSelectedEmpData(item)}\r\n                        >\r\n                            Add Investment</Link>\r\n                    </li>\r\n                    <li>\r\n                        <Link className=\"dropdown-item\" to={`add-employee-salary`}\r\n                            onClick={() => setSelectedEmpData(item)}\r\n                        >\r\n                            Add Salary</Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }), [allEmployees, currentPage]);\r\n    return (\r\n        <>\r\n            <CustomTable\r\n                data={allEmployees?.data}\r\n                fields={employeeField}\r\n                isLoading={isLoading}\r\n                pagination={true}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                totalPages={allEmployees?.totalPages}\r\n                // tableName={\"\"}\r\n                // onSearch={handleSearch}\r\n                isHeader={false}\r\n                tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n                scopedSlots={employeeScopedSlots}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Employees","\r\nimport React, { useState } from 'react'\r\nimport { useCustomTranslation } from '../../../translation'\r\nimport { Icon ,Label} from '../../commanComponent'\r\nimport CustomSelect from '../../commanComponent/CustomSelect'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment'\r\nimport { employeeIDs } from '../../../utils/common'\r\n\r\nconst EmpInvestmentFilters = (props) => {\r\n    const {\r\n        allEmployeeList,\r\n        allDepartments,\r\n        allDesignations,\r\n        handleDepartmentByDesignation,\r\n    } = props\r\n    const { t } = useCustomTranslation()\r\n    const [filterFormData, setFilterFormData] = useState({\r\n        department: null,\r\n        designation: null,\r\n        employees:'',\r\n    })\r\n\r\n    const handleFilterFormData = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e.target : { value: e };\r\n\r\n\r\n        if (name === \"department\") {\r\n            value && value?.value && handleDepartmentByDesignation(value?.value)\r\n            setFilterFormData(prevState => ({\r\n                ...prevState,\r\n                [\"designation\"]: null,\r\n            })\r\n            );\r\n        }\r\n        setFilterFormData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n            return updatedState;\r\n        });\r\n    }\r\n    const handleFilterEmployees =()=>{\r\n        const filterFields={};\r\n\r\n        if(filterFormData?.department?.value)  filterFields[\"department_id\"] = filterFormData?.department?.value;\r\n        if(filterFormData?.designation?.value)  filterFields[\"designation_id\"] = filterFormData?.designation?.value;\r\n        if(filterFormData?.employees?.length>0) filterFields[\"employee_ids\"]=employeeIDs(filterFormData?.employees)\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"formPanel cardBox\">\r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"form-group mb-2\">\r\n                            <Label text={t(\"labels.department\")} />\r\n                            <CustomSelect\r\n                                data={allDepartments}\r\n                                placeholder={t(\"placeholders.selectDepartment\")}\r\n                                value={filterFormData?.department || ''}\r\n                                handleChange={(selectedOption) => handleFilterFormData(selectedOption, \"department\")}\r\n                                name=\"department\"\r\n                            />\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"form-group mb-2\">\r\n                            <Label text={t(\"labels.designation\")} />\r\n                            <CustomSelect\r\n                                data={allDesignations}\r\n                                placeholder={t(\"placeholders.selectDesignation\")}\r\n                                value={filterFormData?.designation || ''}\r\n                                handleChange={(selectedOption) => handleFilterFormData(selectedOption, \"designation\")}\r\n                                name=\"designation\"\r\n                                isDisabled={!(filterFormData?.department) ? true : false}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"form-group mb-2\">\r\n                            <Label text={t(\"labels.employees\")} />\r\n                            <CustomSelect\r\n                                data={allEmployeeList}\r\n                                placeholder={t(\"placeholders.employees\")}\r\n                                value={filterFormData?.employees || ''}\r\n                                handleChange={(selectedOption) => handleFilterFormData(selectedOption, \"employees\")}\r\n                                name=\"employees\"\r\n                                isMulti={true}\r\n                                selectAllText={t(\"labels.selectAll\")}\r\n                            />\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className='d-flex justify-content-end'>\r\n\r\n                    <CustomButton\r\n                        classNames={\"btn btn-primary gradientBg\"}\r\n                        handleClick={() => handleFilterEmployees()}\r\n                        text={t(\"btns.filter\")}\r\n                        icon={<Icon className={\"fa fa-search\"}/>}\r\n                    />\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EmpInvestmentFilters\r\n","import React, { useEffect, useState } from 'react'\r\nimport Employees from './Employees'\r\nimport EmpInvestmentFilters from './EmpInvestmentFilters'\r\nimport { pagination } from '../../../utils/Constants.config'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { employeeActions, payrollActions } from '../../../core/resource/actions'\r\n\r\nconst EmployeeInvestments = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const {\r\n        getAllEmployeeAssignStatusPending,\r\n        getAllEmployeeAssignStatusRes,\r\n        getAllEmployeeAssignStatusError,\r\n    } = useSelector(state => state.payroll)\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [allEmployeesData, setAllEmployeesData] = useState('')\r\n\r\n    useEffect(() => {\r\n        getAllEmployeesList()\r\n    }, [currentPage])\r\n\r\n    const getAllEmployeesList = () => {\r\n        const params = {\r\n            page: currentPage,\r\n            limit: pagination.limit,\r\n        }\r\n        dispatch(payrollActions.getAllEmployeeAssignStatusRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllEmployeeAssignStatusPending) {\r\n            if (getAllEmployeeAssignStatusError) {\r\n                return;\r\n            }\r\n            if (getAllEmployeeAssignStatusRes) {\r\n                if (getAllEmployeeAssignStatusRes?.code == 200) {\r\n                    const employeeListResponse = getAllEmployeeAssignStatusRes?.data\r\n                    setAllEmployeesData(employeeListResponse)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllEmployeeAssignStatusRes,\r\n        getAllEmployeeAssignStatusError,\r\n        getAllEmployeeAssignStatusPending\r\n    ]);\r\n\r\n    return (\r\n        <>\r\n            <EmpInvestmentFilters />\r\n            <div className='cardBox mt-3'>\r\n                <div className=''>\r\n                    <div className=\"d-flex justify-content-between align-items-center mb-2\">\r\n                        <h3 className='underlineHead ' style={{ fontSize: \"18px\" }}> Employees</h3>\r\n                    </div>\r\n                    <Employees\r\n                        allEmployees={allEmployeesData} \r\n                        setCurrentPage={setCurrentPage}\r\n                        currentPage={currentPage}\r\n                        isLoading={getAllEmployeeAssignStatusPending}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EmployeeInvestments\r\n\r\n"],"names":["props","dispatch","useDispatch","currentPage","setCurrentPage","allEmployees","isLoading","setSelectedEmpData","data","payrollActions","selectedEmployeeData","employeeScopedSlots","useMemo","sn","_","index","_jsx","children","salary_status","item","className","getBadgeColor","account_status","action","_jsxs","type","Link","to","id","onClick","_Fragment","CustomTable","fields","key","label","pagination","totalPages","isHeader","tableStyle","padding","boxShadow","scopedSlots","allEmployeeList","allDepartments","allDesignations","handleDepartmentByDesignation","t","useCustomTranslation","filterFormData","setFilterFormData","useState","department","designation","employees","handleFilterFormData","e","fieldName","_e$target","name","target","value","checked","prevState","Label","text","CustomSelect","placeholder","handleChange","selectedOption","isDisabled","isMulti","selectAllText","CustomButton","classNames","handleClick","handleFilterEmployees","_filterFormData$depar","_filterFormData$depar2","_filterFormData$desig","_filterFormData$desig2","_filterFormData$emplo","filterFields","length","employeeIDs","icon","Icon","EmployeeInvestments","getAllEmployeeAssignStatusPending","getAllEmployeeAssignStatusRes","getAllEmployeeAssignStatusError","useSelector","state","payroll","allEmployeesData","setAllEmployeesData","useEffect","getAllEmployeesList","params","page","limit","getAllEmployeeAssignStatusRequest","code","employeeListResponse","EmpInvestmentFilters","style","fontSize","Employees"],"sourceRoot":""}