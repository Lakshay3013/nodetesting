{"version":3,"file":"static/js/4471.87123e74.chunk.js","mappings":"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","sources":["components/admin/policies/CreateUpdatePolicyCategory.js","components/admin/policies/CreateUpdatePolicy.js","components/modal/admin/policies/ViewPolicyFileModal.js","components/admin/policies/PolicyBanner.js","components/admin/policies/PolicyTable.js","components/admin/policies/PolicyCategoryTable.js","components/admin/policies/Policies.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { validateSchema } from '../../../utils/ValidationHelper'\r\nimport { addUpdatePolicyCategorySchema } from '../../../utils/ValidationSchema'\r\nimport { CustCheckbox, Input, Label } from '../../commanComponent'\r\nimport { CustomButton, CustomError } from '../../globalComponents'\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst CreateUpdatePolicyCategory = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const { createPolicyCategoryPending, updatePolicyCategoryPending } = useSelector(state => state?.qualification)\r\n    const {\r\n        selectedPolicyCategoryData,\r\n        openModel,\r\n        handleOpenClose,\r\n        handleCreateUpdatePolicyCategory,\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [createUpdatePolicyCategoryFormData, setCreateUpdatePolicyCategoryFormData] = useState({\r\n        name: '',\r\n        sort_order: '',\r\n        is_active: true\r\n    })\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e.target : { value: e };\r\n\r\n        setCreateUpdatePolicyCategoryFormData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n\r\n            return updatedState;\r\n        });\r\n\r\n        // Reset error for this field\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitCreateUpdatePolicy = async () => {\r\n        const validationResponse = await validateSchema(addUpdatePolicyCategorySchema, createUpdatePolicyCategoryFormData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n                is_active,\r\n                name,\r\n                sort_order,\r\n            } = createUpdatePolicyCategoryFormData\r\n            const params = {\r\n                name,\r\n                sort_order,\r\n                is_active,\r\n            }\r\n            setErrors({})\r\n            handleCreateUpdatePolicyCategory(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (selectedPolicyCategoryData) {\r\n            setCreateUpdatePolicyCategoryFormData({\r\n                is_active: selectedPolicyCategoryData?.is_active,\r\n                name: selectedPolicyCategoryData?.name,\r\n                sort_order: selectedPolicyCategoryData?.sort_order,\r\n            })\r\n        }\r\n    }, [selectedPolicyCategoryData])\r\n\r\n    const resetForm = () => {\r\n        setCreateUpdatePolicyCategoryFormData({\r\n            is_active: true,\r\n            name: '',\r\n            sort_order: '',\r\n        })\r\n        setErrors({})\r\n    }\r\n    return (\r\n        <>\r\n        <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n            tabIndex={-1}\r\n            style={{\r\n                visibility: openModel ? 'visible' : 'hidden',\r\n                width: \"800px\"\r\n            }}\r\n            id=\"interviewDetail\"\r\n        >\r\n            <div className=\"offcanvas-header\">\r\n                <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{selectedPolicyCategoryData ? t(\"headings.addPolicyCategory\") : t(\"headings.updatePolicyCategory\")}</h5>\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                    onClick={() => handleOpenClose()}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"offcanvas-body myRequest \">\r\n                <div className=\"formPanel\">\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.policyCategoryName\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    placeholder={t(\"placeholders.policyCategoryName\")}\r\n                                    value={createUpdatePolicyCategoryFormData?.name}\r\n                                    name=\"name\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                                {errors?.name && (\r\n                                    <CustomError text={errors.name} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.sortOrder\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    placeholder={t(\"placeholders.sortOrder\")}\r\n                                    value={createUpdatePolicyCategoryFormData?.sort_order}\r\n                                    name=\"sort_order\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n\r\n                                {errors?.sort_order && (\r\n                                    <CustomError text={errors.sort_order} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.isActive\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <CustCheckbox\r\n                                    key={\"is_active\"}\r\n                                    id={`is_active`}\r\n                                    checked={createUpdatePolicyCategoryFormData?.is_active}\r\n                                    handleChange={(e) => handleFromChange(e)}\r\n                                    name={\"is_active\"}\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"offcanvas-footer\">\r\n                <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                    <CustomButton\r\n                        text={selectedPolicyCategoryData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                        classNames={\"btn btn-org-gradient\"}\r\n                        handleClick={() => submitCreateUpdatePolicy()}\r\n                        isLoading={selectedPolicyCategoryData ? updatePolicyCategoryPending : createPolicyCategoryPending}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {openModel && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateUpdatePolicyCategory\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { validateSchema } from '../../../utils/ValidationHelper'\r\nimport { addUpdatePolicySchema } from '../../../utils/ValidationSchema'\r\nimport CustomSelect from '../../commanComponent/CustomSelect'\r\nimport { CustCheckbox, Input, Label, Textarea } from '../../commanComponent'\r\nimport { CustomButton, CustomError } from '../../globalComponents'\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst CreateUpdatePolicy = (props) => {\r\n    const {t}=useCustomTranslation()\r\n    const { createPolicyPending, updatePolicyPending } = useSelector(state => state?.qualification)\r\n    const {\r\n        selectedPolicy,\r\n        openModel,\r\n        handleOpenClose,\r\n        handleCreateUpdatePolicy,\r\n        allPolicyCategoryListData\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [policyFile, setPolicyFile] = useState('')\r\n    const [createUpdatePolicyFormData, setCreateUpdatePolicyFormData] = useState({\r\n        category_id: null,\r\n        title: '',\r\n        description: \"\",\r\n        content: '',\r\n        is_active: true,\r\n        sort_order: '',\r\n    })\r\n        const fileInputRef = useRef(null);\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e.target : { value: e };\r\n\r\n        setCreateUpdatePolicyFormData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n\r\n            return updatedState;\r\n        });\r\n\r\n        // Reset error for this field\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitCreateUpdatePolicy = async () => {\r\n        const validationResponse = await validateSchema(addUpdatePolicySchema, createUpdatePolicyFormData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n                category_id,\r\n                title,\r\n                description,\r\n                content,\r\n                is_active,\r\n                sort_order,\r\n            } = createUpdatePolicyFormData\r\n            const formData = new FormData();\r\n            if(selectedPolicy){\r\n                formData.append(\"_id\",selectedPolicy?._id || selectedPolicy?.id );\r\n            }\r\n            formData.append(\"category_id\", category_id?.value);\r\n            formData.append(\"title\", title);\r\n            formData.append(\"description\", description);\r\n            formData.append(\"content\", content);\r\n            formData.append(\"is_active\", is_active);\r\n            formData.append(\"sort_order\", Number(sort_order));\r\n            formData.append(\"file\", policyFile);\r\n\r\n            handleCreateUpdatePolicy(formData)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (selectedPolicy) {\r\n            setCreateUpdatePolicyFormData({\r\n                category_id: { value: selectedPolicy?.category_id, label: selectedPolicy?.policy_category_name },\r\n                title: selectedPolicy?.title,\r\n                description: selectedPolicy?.description,\r\n                content: selectedPolicy?.content,\r\n                is_active: selectedPolicy?.is_active,\r\n                sort_order: selectedPolicy?.sort_order,\r\n            })\r\n        \r\n        }\r\n    }, [selectedPolicy])\r\n\r\n    const resetForm = () => {\r\n        setCreateUpdatePolicyFormData({\r\n            category_id: null,\r\n            title: '',\r\n            description: \"\",\r\n            content: '',\r\n            is_active: true,\r\n            sort_order: '',\r\n        })\r\n        setPolicyFile('')\r\n        if (fileInputRef.current) {\r\n            fileInputRef.current.value = ''; // Reset the file input\r\n        }\r\n        setErrors({})\r\n    }\r\n\r\n    const handlePolcyfile = (e) => {\r\n        const file = e.target.files[0]\r\n        setPolicyFile(file)\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n            tabIndex={-1}\r\n            style={{\r\n                visibility: openModel ? 'visible' : 'hidden',\r\n                width: \"800px\"\r\n            }}\r\n            id=\"interviewDetail\"\r\n        >\r\n            <div className=\"offcanvas-header\">\r\n                <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{selectedPolicy ? t(\"headings.addPolicy\") : t(\"headings.updatePolicy\")}</h5>\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                    onClick={() => handleOpenClose()}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"offcanvas-body myRequest \">\r\n                <div className=\"formPanel\">\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.selectCategory\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <CustomSelect\r\n                                    data={allPolicyCategoryListData}\r\n                                    placeholder={t(\"placeholders.selectCategory\")}\r\n                                    value={createUpdatePolicyFormData?.category_id || ''}\r\n                                    handleChange={(selectedOption) => handleFromChange(selectedOption, \"category_id\")}\r\n                                    name=\"category_id\"\r\n                                />\r\n                                {errors?.category_id && (\r\n                                    <CustomError text={errors.category_id} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.title\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    placeholder={t(\"placeholders.title\")}\r\n                                    value={createUpdatePolicyFormData?.title}\r\n                                    name=\"title\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                                {errors?.title && (\r\n                                    <CustomError text={errors.title} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.sortOrder\")}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    placeholder={t(\"placeholders.sortOrder\")}\r\n                                    value={createUpdatePolicyFormData?.sort_order}\r\n                                    name=\"sort_order\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n\r\n                             \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.description\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    placeholder={t(\"placeholders.description\")}\r\n                                    value={createUpdatePolicyFormData?.description}\r\n                                    name=\"description\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                                {errors?.description && (\r\n                                    <CustomError text={errors.description} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.content\")} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Textarea\r\n                                    value={createUpdatePolicyFormData?.content}\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                    name=\"content\"\r\n                                    placeholder={t(\"placeholders.content\")}\r\n                                />\r\n                               \r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.selectFile\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <input type=\"file\"\r\n                                    id=\"policyFile\"\r\n                                    name=\"poster\"\r\n                                    className={`form-control `}\r\n                                    onChange={handlePolcyfile}\r\n                                    accept=\".png, .jpeg, .doc, .docx, .pdf\" \r\n                                    ref={fileInputRef}\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.isActive\")} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <CustCheckbox\r\n                                    key={\"is_active\"}\r\n                                    id={`is_active`}\r\n                                    // label={\"Active\"}\r\n                                    checked={createUpdatePolicyFormData?.is_active}\r\n                                    handleChange={(e) => handleFromChange(e)}\r\n                                    name={\"is_active\"}\r\n                                />\r\n                        \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"offcanvas-footer\">\r\n                <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                    <CustomButton\r\n                        text={selectedPolicy ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                        classNames={\"btn btn-org-gradient\"}\r\n                        handleClick={() => submitCreateUpdatePolicy()}\r\n                        isLoading={selectedPolicy ? updatePolicyPending : createPolicyPending}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {openModel && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateUpdatePolicy\r\n","import React from 'react'\r\n\r\nconst ViewPolicyFileModal = (props) => {\r\n    const {\r\n        openModel,\r\n        handleOpenClose,\r\n    } = props\r\n    return (\r\n        <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n            tabIndex={-1}\r\n            style={{\r\n                visibility: openModel ? 'visible' : 'hidden',\r\n                width: \"800px\"\r\n            }}\r\n            id=\"interviewDetail\"\r\n        >\r\n            <div className=\"offcanvas-header\">\r\n                <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">View Policy </h5>\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                    onClick={() => handleOpenClose()}\r\n                />\r\n            </div>\r\n\r\n            <embed\r\n              src={\"https://www.antennahouse.com/hubfs/xsl-fo-sample/pdf/basic-link-1.pdf\"}\r\n              type=\"application/pdf\"\r\n              width=\"100%\"\r\n              height=\"600\"\r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewPolicyFileModal\r\n","import React from 'react'\r\n\r\nconst PolicyBanner = (props) => {\r\n    const { handleActiveTab } = props\r\n    return (\r\n        <>\r\n            <div className=\"cardBox leaveAppli h-100\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-4 selectModal position-relative z-1\">\r\n                        <div className=\"row px-md-1 \">\r\n                            <div className=\"col-md-6 px-md-2 mb-3\" onClick={() => handleActiveTab(\"policy_category\")}>\r\n                                <span\r\n                                    className=\"totalBx h-100\"\r\n                                >\r\n                                    <figure>\r\n                                        <img src=\"images/applyleavesIcon.svg\" alt=\"\" width={50} />\r\n                                    </figure>\r\n                                    <h3 className=\"fw-bolder my-0\">Policy category</h3>\r\n                                    <img\r\n                                        src=\"images/firstlineBlue.svg\"\r\n                                        className=\"cornerLine\"\r\n                                        alt=\"\"\r\n                                        width={95}\r\n                                    />\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"col-md-6 px-md-2 mb-3\" onClick={() => handleActiveTab(\"policy\")}>\r\n                                <span\r\n                                    className=\"totalBx h-100\"\r\n                                >\r\n                                    <figure>\r\n                                        <img src=\"images/attendancelogIcon.svg\" alt=\"\" width={50} />\r\n                                    </figure>\r\n                                    <h3 className=\"fw-bolder my-0\">Policy</h3>\r\n                                    <img\r\n                                        src=\"images/secondlineBlue.svg\"\r\n                                        className=\"cornerLine\"\r\n                                        alt=\"\"\r\n                                        width={80}\r\n                                    />\r\n                                </span>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PolicyBanner\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomTable } from '../../reuseableComponents'\r\nimport { getBadgeColor } from '../../../utils/common'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment'\r\nimport { Icon } from '../../commanComponent'\r\n\r\n\r\nconst PolicyTable = (props) => {\r\n  const {\r\n    allPolicyData,\r\n    isLoading,\r\n    handleCreateUpdatePolicyModal,\r\n    toggleDeletePolicyModal,\r\n    currentPage,\r\n    setCurrentPage,\r\n    handleViewPolicyModal\r\n  } = props\r\n  const [policyList, setPolicyList] = useState(allPolicyData)\r\n\r\n  const handleUpdatePosition = (data) => {\r\n    handleCreateUpdatePolicyModal(data)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setPolicyList(allPolicyData)\r\n  }, [allPolicyData])\r\n\r\n\r\n  const scopedSlots = useMemo(() => ({\r\n    sn: (_, index) => (\r\n      <span>{index + 1}</span>\r\n    ),\r\n    is_active: item => (\r\n      <span\r\n        className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n      >\r\n        {item.is_active ? \"Active\" : \"Inactive\"}\r\n      </span>\r\n    ),\r\n    created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n    action: item => (\r\n      <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleUpdatePosition(item)}\r\n                        >\r\n                            <Icon className={\"bi bi-pencil-square me-1\"} />Update</span>\r\n                    </li>\r\n                     <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => toggleDeletePolicyModal(item._id)}\r\n                        >\r\n                            <Icon className={\"bi bi-trash me-1\"} />Delete</span>\r\n                    </li>\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleViewPolicyModal(item._id)}\r\n                        >\r\n                            <Icon className={\"bi bi-eye me-1\"} />View</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n    )\r\n  }), [handleCreateUpdatePolicyModal]);\r\n  const fields = [\r\n    { key: 'sn', label: 'S.N' },\r\n    { key: 'title', label: 'Policy Name' },\r\n    { key: 'policy_category_name', label: 'Policy Category' },\r\n    { key: 'sort_order', label: 'Sort Order' },\r\n    { key: 'is_active', label: 'Status' },\r\n    { key: 'created_at', label: 'Created At' },\r\n    { key: 'action', label: 'Action' }\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <CustomTable\r\n        data={policyList?.data}\r\n        fields={fields}\r\n        isLoading={isLoading}\r\n        pagination={true}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n        totalPages={policyList?.totalPages}\r\n        tableName={\"Policy\"}\r\n        // onSearch={handleSearch}\r\n        scopedSlots={scopedSlots}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PolicyTable\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomTable } from '../../reuseableComponents'\r\nimport { getBadgeColor } from '../../../utils/common'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment'\r\nimport { useCustomTranslation } from '../../../translation'\r\nimport { Icon } from '../../commanComponent'\r\n\r\nconst PolicyCategoryTable = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        allPolicyCategoryData,\r\n        isLoading,\r\n        toggleCreateUpdatePolicyCategoryModal,\r\n        handelDeletePolicyCategory,\r\n        currentPage,\r\n        setCurrentPage\r\n    } = props\r\n    const [policyList, setPolicyList] = useState(allPolicyCategoryData)\r\n\r\n\r\n    const handleUpdatePosition = (data) => {\r\n        toggleCreateUpdatePolicyCategoryModal(data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setPolicyList(allPolicyCategoryData)\r\n    }, [allPolicyCategoryData])\r\n\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n        action: item => (\r\n\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleUpdatePosition(item)}\r\n                        >\r\n                            <Icon className={\"bi bi-pencil-square me-1\"} />Update</span>\r\n                    </li>\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handelDeletePolicyCategory(item.id)}\r\n                        >\r\n                            <Icon className={\"bi bi-trash me-1\"} />Delete</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }), [toggleCreateUpdatePolicyCategoryModal]);\r\n\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'name', label: 'Policy Category Name' },\r\n        { key: 'sort_order', label: 'Sort Order' },\r\n        { key: 'is_active', label: 'Status' },\r\n        { key: 'created_at', label: 'Created At' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n    return (\r\n        <>\r\n            <CustomTable\r\n                data={policyList?.data}\r\n                fields={fields}\r\n                isLoading={isLoading}\r\n                pagination={true}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                totalPages={policyList?.totalPages}\r\n                tableName={t(\"headings.policyCategory\")}\r\n                // onSearch={handleSearch}\r\n                scopedSlots={scopedSlots}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PolicyCategoryTable\r\n","\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { policiesActions } from '../../../core/resource/actions'\r\nimport { pagination } from '../../../utils/Constants.config'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport CreateUpdatePolicyCategory from './CreateUpdatePolicyCategory'\r\nimport ApproveRejectModal from '../../modal/ApproveRejectModal'\r\nimport CreateUpdatePolicy from './CreateUpdatePolicy'\r\nimport ViewPolicyFileModal from '../../modal/admin/policies/ViewPolicyFileModal'\r\nimport PolicyBanner from \"./PolicyBanner\"\r\nimport PolicyTable from './PolicyTable'\r\nimport PolicyCategoryTable from './PolicyCategoryTable'\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst Policies = () => {\r\n    const dispatch = useDispatch()\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        createPolicyCategoryPending,\r\n        createPolicyCategoryRes,\r\n        createPolicyCategoryError,\r\n\r\n        getAllPolicyCategorysPending,\r\n        getAllPolicyCategorysRes,\r\n        getAllPolicyCategorysError,\r\n\r\n        updatePolicyCategoryPending,\r\n        updatePolicyCategoryRes,\r\n        updatePolicyCategoryError,\r\n\r\n        deletePolicyCategoryPending,\r\n        deletePolicyCategoryRes,\r\n        deletePolicyCategoryError,\r\n\r\n        createPolicyPending,\r\n        createPolicyRes,\r\n        createPolicyError,\r\n\r\n        getAllPolicyPending,\r\n        getAllPolicyRes,\r\n        getAllPolicyError,\r\n\r\n        updatePolicyPending,\r\n        updatePolicyRes,\r\n        updatePolicyError,\r\n\r\n        deletePolicyPending,\r\n        deletePolicyRes,\r\n        deletePolicyError,\r\n\r\n        getPolicyCategoryListPending,\r\n        getPolicyCategoryListRes,\r\n        getPolicyCategoryListError,\r\n\r\n    } = useSelector(state => state.policies)\r\n    const [openCloseCreateUpdatePolicyCatModal, setOpenCloseCreateUpdatePolicyCatModal] = useState(false)\r\n    const [allPolicyCategoryData, setAllPolicyCategoryData] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [selectedPolicyCategoryData, setSelectedPolicyCategoryData] = useState('')\r\n    const [isShowDeletePolicyCategoryModal, setIsShowDeletePolicyCategoryModal] = useState(false)\r\n    const [deletePolicyCategoryId, setDeletePolicyCategoryId] = useState('')\r\n    const [activeTabType, setActiveTabType] = useState('policy_category')\r\n    const [openClosePolicyModal, setOpenClosePolicyModal] = useState(false)\r\n    const [allPolicyData, setAllPolicyData] = useState('')\r\n    const [isShowDeletePolicyModal, setIsShowDeletePolicyModal] = useState(false)\r\n    const [deletePolicyId, setDeletePolicyId] = useState()\r\n    const [selectedPolicy, setSelectedPolicy] = useState('')\r\n    const [policyId, setPolicyId] = useState('')\r\n    const [allPolicyCategoryListData, setAllPolicyCategoryListData] = useState('')\r\n    const [isShowViewPolicy, setIsShowViewPolicy] = useState(false)\r\n    const [policyFileName, setPolicyFileName] = useState('')\r\n\r\n\r\n    useEffect(() => {\r\n        getAllPolicyCategorys()\r\n        handleGetAllPolicy()\r\n    }, [currentPage])\r\n\r\n    /* Create Update Policy Category  */\r\n    const toggleCreateUpdatePolicyCategoryModal = (data) => {\r\n        if (!data) {\r\n            setSelectedPolicyCategoryData('')\r\n        } else {\r\n            setSelectedPolicyCategoryData(data)\r\n        }\r\n        setOpenCloseCreateUpdatePolicyCatModal(!openCloseCreateUpdatePolicyCatModal);\r\n    };\r\n\r\n\r\n    const handleCreateUpdatePolicyCategory = (params) => {\r\n        if (selectedPolicyCategoryData) {\r\n            params['_id'] = selectedPolicyCategoryData?.id || selectedPolicyCategoryData?._id\r\n            dispatch(policiesActions.updatePolicyCategoryRequest(params));\r\n        }\r\n        else {\r\n            dispatch(policiesActions.createPolicyCategoryRequest(params));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!createPolicyCategoryPending) {\r\n            if (createPolicyCategoryError) {\r\n                dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_CREATE_POLICY_CATEGORY_STOREE\"))\r\n                return;\r\n            }\r\n            if (createPolicyCategoryRes) {\r\n                if (createPolicyCategoryRes?.code === 200) {\r\n                    dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_CREATE_POLICY_CATEGORY_STORE\"))\r\n                    getAllPolicyCategorys()\r\n                    setOpenCloseCreateUpdatePolicyCatModal(!openCloseCreateUpdatePolicyCatModal);\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        createPolicyCategoryRes,\r\n        createPolicyCategoryError,\r\n        createPolicyCategoryPending\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (!updatePolicyCategoryPending) {\r\n            if (updatePolicyCategoryError) {\r\n                dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_UPDATE_POLICY_CATEGORY_STORE\"))\r\n                return;\r\n            }\r\n            if (updatePolicyCategoryRes) {\r\n                if (updatePolicyCategoryRes?.code === 200) {\r\n                    dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_UPDATE_POLICY_CATEGORY_STORE\"))\r\n                    getAllPolicyCategorys()\r\n                    setOpenCloseCreateUpdatePolicyCatModal(!openCloseCreateUpdatePolicyCatModal);\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updatePolicyCategoryRes,\r\n        updatePolicyCategoryError,\r\n        updatePolicyCategoryPending\r\n    ]);\r\n\r\n    /* Get All Policy Category Data  */\r\n    const getAllPolicyCategorys = () => {\r\n        const params = {\r\n            page: currentPage,\r\n            limit: pagination.limit,\r\n        }\r\n        dispatch(policiesActions.getAllPolicyCategorysRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllPolicyCategorysPending) {\r\n            if (getAllPolicyCategorysError) {\r\n                return;\r\n            }\r\n            if (getAllPolicyCategorysRes) {\r\n                if (getAllPolicyCategorysRes?.code === 200) {\r\n                    const getAllPolicyCategorysResData = getAllPolicyCategorysRes?.data\r\n                    setAllPolicyCategoryData(getAllPolicyCategorysResData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllPolicyCategorysRes,\r\n        getAllPolicyCategorysError,\r\n        getAllPolicyCategorysPending\r\n    ]);\r\n\r\n    /* Delete Policy Category */ \r\n    const handelDeletePolicyCategory = (id) => {\r\n        if(id){\r\n            setDeletePolicyCategoryId(id)\r\n        }\r\n        setIsShowDeletePolicyCategoryModal(!isShowDeletePolicyCategoryModal)\r\n    }\r\n\r\n    const deletePolicyCategory = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deletePolicyCategoryId\r\n            }\r\n            dispatch(policiesActions?.deletePolicyCategoryRequest(params))\r\n\r\n        } else {\r\n            handelDeletePolicyCategory()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!deletePolicyCategoryPending) {\r\n            if (deletePolicyCategoryError) {\r\n                dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_DELETE_POLICY_CATEGORY_STORE\"))\r\n                return;\r\n            }\r\n            if (deletePolicyCategoryRes) {\r\n                if (deletePolicyCategoryRes?.code === 200) {\r\n                    dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_DELETE_POLICY_CATEGORY_STORE\"))\r\n                    if (currentPage > 1 && allPolicyCategoryData?.data?.length === 1) {\r\n                        setCurrentPage((pre => pre -= 1))\r\n                    } else {\r\n                        getAllPolicyCategorys()\r\n                    }\r\n                    handelDeletePolicyCategory()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        deletePolicyCategoryRes,\r\n        deletePolicyCategoryError,\r\n        deletePolicyCategoryPending\r\n    ]);\r\n\r\n    const handleActiveTab = (type) => {\r\n        setActiveTabType(type)\r\n        setCurrentPage(1)\r\n        if (type === \"policy\") {\r\n            handleGetPolicyCategoryList()\r\n        }\r\n    }\r\n\r\n    // ---------------------POLICY SECTION--------------------- \r\n\r\n   /* Create Update Policy */\r\n    const handleCreateUpdatePolicyModal = (selectedData) => {\r\n        if (selectedData) {\r\n            setSelectedPolicy(selectedData)\r\n        } else {\r\n            setSelectedPolicy('')\r\n        }\r\n        setOpenClosePolicyModal(!openClosePolicyModal);\r\n    };\r\n\r\n    const handleCreateUpdatePolicy = (payload) => {\r\n        if (selectedPolicy) {\r\n            dispatch(policiesActions.updatePolicyRequest(payload));\r\n        } else {\r\n            dispatch(policiesActions.createPolicyRequest(payload));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!createPolicyPending) {\r\n            if (createPolicyError) {\r\n                dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_CREATE_POLICY_STORE\"))\r\n                return;\r\n            }\r\n            if (createPolicyRes) {\r\n                if (createPolicyRes?.code === 200) {\r\n                    setOpenClosePolicyModal(!openClosePolicyModal);\r\n                    handleGetAllPolicy()\r\n                    dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_CREATE_POLICY_STORE\"))\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        createPolicyRes,\r\n        createPolicyError,\r\n        createPolicyPending\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (!updatePolicyPending) {\r\n            if (updatePolicyError) {\r\n                dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_UPDATE_POLICY_STORE\"))\r\n                return;\r\n            }\r\n            if (updatePolicyRes) {\r\n                if (updatePolicyRes?.code === 200) {\r\n                    setOpenClosePolicyModal(!openClosePolicyModal);\r\n                    handleGetAllPolicy()\r\n                    dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_UPDATE_POLICY_STORE\"))\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updatePolicyRes,\r\n        updatePolicyError,\r\n        updatePolicyPending\r\n    ]);\r\n\r\n    /* Get all Policy */\r\n    const handleGetAllPolicy = () => {\r\n        const params = {\r\n            page: currentPage,\r\n            limit: pagination?.limit,\r\n        }\r\n        dispatch(policiesActions.getAllPolicyRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllPolicyPending) {\r\n            if (getAllPolicyError) {\r\n                return;\r\n            }\r\n            if (getAllPolicyRes) {\r\n                if (getAllPolicyRes?.code === 200) {\r\n                    const getAllPolicyResData = getAllPolicyRes?.data\r\n                    setAllPolicyData(getAllPolicyResData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllPolicyRes,\r\n        getAllPolicyError,\r\n        getAllPolicyPending\r\n    ]);\r\n\r\n    /* Delete Policy */\r\n    const toggleDeletePolicyModal = (id) => {\r\n        if(id){\r\n            setDeletePolicyId(id)\r\n        }\r\n        setIsShowDeletePolicyModal(!isShowDeletePolicyModal)\r\n    }\r\n\r\n    const handleDeletePolicy = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deletePolicyId\r\n            }\r\n            dispatch(policiesActions?.deletePolicyRequest(params))\r\n\r\n        } else {\r\n            toggleDeletePolicyModal()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!deletePolicyPending) {\r\n            if (deletePolicyError) {\r\n                dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_DELETE_POLICY_STORE\"))\r\n                return;\r\n            }\r\n            if (deletePolicyRes) {\r\n                if (deletePolicyRes?.code === 200) {\r\n                    toggleDeletePolicyModal()\r\n                    if (currentPage > 1 && allPolicyData?.data?.length === 1) {\r\n                        setCurrentPage((pre => pre -= 1))\r\n                    } else {\r\n                        handleGetAllPolicy()\r\n                    }\r\n                    dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_DELETE_POLICY_STORE\"))\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        deletePolicyRes,\r\n        deletePolicyError,\r\n        deletePolicyPending\r\n    ]);\r\n\r\n    /* Get All Policy Category List*/\r\n    const handleGetPolicyCategoryList = () => {\r\n        dispatch(policiesActions.getPolicyCategoryListRequest());\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getPolicyCategoryListPending) {\r\n            if (getPolicyCategoryListError) {\r\n                return;\r\n            }\r\n            if (getPolicyCategoryListRes) {\r\n                if (getPolicyCategoryListRes?.code === 200) {\r\n                    const getPolicyCategoryListResData = getPolicyCategoryListRes?.data\r\n                    setAllPolicyCategoryListData(getPolicyCategoryListResData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getPolicyCategoryListRes,\r\n        getPolicyCategoryListError,\r\n        getPolicyCategoryListPending\r\n    ]);\r\n\r\n    /* View Policy File*/\r\n    const handleViewPolicyModal = (fileName) => {\r\n        setIsShowViewPolicy(!isShowViewPolicy)\r\n        setPolicyFileName(fileName)\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <PolicyBanner handleActiveTab={handleActiveTab} />\r\n            {activeTabType === \"policy_category\" && <>\r\n                <div className=\"d-flex justify-content-end \">\r\n                    <CustomButton\r\n                        classNames={\"btn btn-primary gradientBg mt-3\"}\r\n                        text={t(\"btns.createPolicyCategory\")}\r\n                        handleClick={() => toggleCreateUpdatePolicyCategoryModal()}\r\n                    />\r\n                </div>\r\n                <PolicyCategoryTable\r\n                    allPolicyCategoryData={allPolicyCategoryData}\r\n                    toggleCreateUpdatePolicyCategoryModal={toggleCreateUpdatePolicyCategoryModal}\r\n                    handelDeletePolicyCategory={handelDeletePolicyCategory}\r\n                    setCurrentPage={setCurrentPage}\r\n                    currentPage={currentPage}\r\n                    isLoading={getAllPolicyCategorysPending}\r\n\r\n                />\r\n                <CreateUpdatePolicyCategory\r\n                    openModel={openCloseCreateUpdatePolicyCatModal}\r\n                    handleOpenClose={toggleCreateUpdatePolicyCategoryModal}\r\n                    handleCreateUpdatePolicyCategory={handleCreateUpdatePolicyCategory}\r\n                    selectedPolicyCategoryData={selectedPolicyCategoryData}\r\n                />\r\n                {isShowDeletePolicyCategoryModal && (\r\n                    <ApproveRejectModal\r\n                        onApproveReject={deletePolicyCategory}\r\n                        isShow={isShowDeletePolicyCategoryModal}\r\n                        desc={t(\"alerts.deletePopup.desc\").replace('$1',\"Policies\")}\r\n                        btnRightLoading={deletePolicyCategoryPending}\r\n                        btnTextRight={t(\"btns.delete\")}\r\n                        btnTextLeft={t(\"btns.cancel\")}\r\n\r\n                    />)\r\n                }\r\n            </>}\r\n\r\n            {activeTabType === \"policy\" && <>\r\n                <div className=\"d-flex  justify-content-end \">\r\n                    <CustomButton\r\n                        classNames={\"btn btn-primary gradientBg mt-3\"}\r\n                        text={t(\"btns.createPolicy\")}\r\n                        handleClick={() => handleCreateUpdatePolicyModal()}\r\n                    />\r\n                </div>\r\n\r\n                <CreateUpdatePolicy\r\n                    openModel={openClosePolicyModal}\r\n                    handleOpenClose={handleCreateUpdatePolicyModal}\r\n                    handleCreateUpdatePolicy={handleCreateUpdatePolicy}\r\n                    selectedPolicy={selectedPolicy}\r\n                    allPolicyCategoryListData={allPolicyCategoryListData}\r\n                />\r\n\r\n                <PolicyTable\r\n                    allPolicyData={allPolicyData}\r\n                    handleCreateUpdatePolicyModal={handleCreateUpdatePolicyModal}\r\n                    toggleDeletePolicyModal={toggleDeletePolicyModal}\r\n                    currentPage={currentPage}\r\n                    setCurrentPage={setCurrentPage}\r\n                    isLoading={getAllPolicyPending}\r\n                    handleViewPolicyModal={handleViewPolicyModal}\r\n\r\n                />\r\n                <ViewPolicyFileModal\r\n                    openModel={isShowViewPolicy}\r\n                    handleOpenClose={handleViewPolicyModal}\r\n                    policyFileName={policyFileName}\r\n                />\r\n\r\n                {isShowDeletePolicyModal && (\r\n                    <ApproveRejectModal\r\n                        onApproveReject={handleDeletePolicy}\r\n                        isShow={isShowDeletePolicyModal}\r\n                        desc={t(\"alerts.deletePopup.desc\").replace('$1',\"Policy\")}\r\n                        btnRightLoading={deletePolicyPending}\r\n                        btnTextRight={t(\"btns.delete\")}\r\n                        btnTextLeft={t(\"btns.cancel\")}\r\n\r\n                    />)\r\n                }\r\n\r\n            </>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Policies\r\n"],"names":["props","t","useCustomTranslation","createPolicyCategoryPending","updatePolicyCategoryPending","useSelector","state","qualification","selectedPolicyCategoryData","openModel","handleOpenClose","handleCreateUpdatePolicyCategory","errors","setErrors","useState","createUpdatePolicyCategoryFormData","setCreateUpdatePolicyCategoryFormData","name","sort_order","is_active","handleFromChange","e","fieldName","_e$target","target","value","type","checked","prevState","prevErrors","undefined","useEffect","resetForm","_jsxs","_Fragment","children","className","tabIndex","style","visibility","width","id","_jsx","onClick","Label","text","required","Input","placeholder","onChange","CustomError","CustCheckbox","handleChange","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","addUpdatePolicyCategorySchema","isValid","params","submitCreateUpdatePolicy","isLoading","createPolicyPending","updatePolicyPending","selectedPolicy","handleCreateUpdatePolicy","allPolicyCategoryListData","policyFile","setPolicyFile","createUpdatePolicyFormData","setCreateUpdatePolicyFormData","category_id","title","description","content","fileInputRef","useRef","label","policy_category_name","current","CustomSelect","data","selectedOption","Textarea","file","files","accept","ref","addUpdatePolicySchema","formData","FormData","append","_id","Number","src","height","handleActiveTab","alt","allPolicyData","handleCreateUpdatePolicyModal","toggleDeletePolicyModal","currentPage","setCurrentPage","handleViewPolicyModal","policyList","setPolicyList","scopedSlots","useMemo","sn","_","index","item","getBadgeColor","created_at","moment","format","action","Icon","CustomTable","fields","key","pagination","totalPages","tableName","allPolicyCategoryData","toggleCreateUpdatePolicyCategoryModal","handelDeletePolicyCategory","Policies","dispatch","useDispatch","createPolicyCategoryRes","createPolicyCategoryError","getAllPolicyCategorysPending","getAllPolicyCategorysRes","getAllPolicyCategorysError","updatePolicyCategoryRes","updatePolicyCategoryError","deletePolicyCategoryPending","deletePolicyCategoryRes","deletePolicyCategoryError","createPolicyRes","createPolicyError","getAllPolicyPending","getAllPolicyRes","getAllPolicyError","updatePolicyRes","updatePolicyError","deletePolicyPending","deletePolicyRes","deletePolicyError","getPolicyCategoryListPending","getPolicyCategoryListRes","getPolicyCategoryListError","policies","openCloseCreateUpdatePolicyCatModal","setOpenCloseCreateUpdatePolicyCatModal","setAllPolicyCategoryData","setSelectedPolicyCategoryData","isShowDeletePolicyCategoryModal","setIsShowDeletePolicyCategoryModal","deletePolicyCategoryId","setDeletePolicyCategoryId","activeTabType","setActiveTabType","openClosePolicyModal","setOpenClosePolicyModal","setAllPolicyData","isShowDeletePolicyModal","setIsShowDeletePolicyModal","deletePolicyId","setDeletePolicyId","setSelectedPolicy","policyId","setPolicyId","setAllPolicyCategoryListData","isShowViewPolicy","setIsShowViewPolicy","policyFileName","setPolicyFileName","getAllPolicyCategorys","handleGetAllPolicy","policiesActions","handleClearPolicyStore","code","page","limit","getAllPolicyCategorysRequest","getAllPolicyCategorysResData","_allPolicyCategoryDat","length","pre","selectedData","getAllPolicyRequest","getAllPolicyResData","_allPolicyData$data","handleGetPolicyCategoryList","getPolicyCategoryListRequest","getPolicyCategoryListResData","fileName","PolicyBanner","PolicyCategoryTable","CreateUpdatePolicyCategory","updatePolicyCategoryRequest","createPolicyCategoryRequest","ApproveRejectModal","onApproveReject","deletePolicyCategoryRequest","isShow","desc","replace","btnRightLoading","btnTextRight","btnTextLeft","CreateUpdatePolicy","payload","updatePolicyRequest","createPolicyRequest","PolicyTable","ViewPolicyFileModal","deletePolicyRequest"],"sourceRoot":""}