{"version":3,"file":"static/js/527.8d504692.chunk.js","mappings":"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","sources":["components/announcement/AnnouncementTable.js","components/announcement/CreateUpdateAnnouncement.js","components/announcement/Announcement.js"],"sourcesContent":["\r\nimport React, { useEffect, useMemo, useState } from 'react'\r\nimport { useCustomTranslation } from '../../translation'\r\nimport { CustomTable } from '../reuseableComponents'\r\nimport { Icon } from '../commanComponent'\r\n\r\n\r\nconst AnnouncementTable = (props) => {\r\n    const {t}= useCustomTranslation()\r\n    const {\r\n        isLoading,\r\n        toggleAnnouncementDeleteModal,\r\n        currentPage,\r\n        setCurrentPage,\r\n        allAnnouncements\r\n    } = props\r\n    const [announcementList, setAnnouncementList] = useState('')\r\n\r\n\r\n    useEffect(() => {\r\n        setAnnouncementList(allAnnouncements)\r\n    }, [allAnnouncements])\r\n\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        \r\n        action: item => (\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => toggleAnnouncementDeleteModal(item)}\r\n                        >\r\n                            <Icon className={\"fa fa-trash test\"} /> Delete</span>\r\n                    </li>\r\n\r\n                  \r\n                </ul>\r\n            </div>\r\n        )\r\n    }), [announcementList,toggleAnnouncementDeleteModal]);\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'type', label: 'Announcement Name' },\r\n        { key: 'start_date', label: 'Start Date' },\r\n        { key: 'end_date', label: 'End Date ' },\r\n        { key: 'description', label: 'Description ' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n  return (\r\n    <>\r\n       <CustomTable\r\n                data={announcementList}\r\n                fields={fields}\r\n                isLoading={isLoading}\r\n                pagination={true}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                totalPages={announcementList?.totalPages}\r\n                tableName={t(\"headings.announcement\")}\r\n                // onSearch={handleSearch}\r\n                scopedSlots={scopedSlots}\r\n            />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AnnouncementTable\r\n\r\n","\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { validateSchema } from '../../utils/ValidationHelper'\r\nimport { Input, Label } from '../commanComponent'\r\nimport { CustomButton, CustomError } from '../globalComponents'\r\nimport { createUpdateAnnouncementSchema } from '../../utils/ValidationSchema'\r\nimport { Textarea } from '../commanComponent'\r\nimport { useCustomTranslation } from '../../translation'\r\nimport CustomSelect from '../commanComponent/CustomSelect'\r\nconst CreateUpdateAnnouncement = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    // const { createAnnouncementPending, updateAnnouncementPending } = useSelector(description => description?.location)\r\n    const {\r\n        selectedAnnouncementData,\r\n        openModel,\r\n        handleOpenClose,\r\n        handleCreateUpdateAnnouncement,\r\n        filteredDropdownData\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [createUpdateAnnouncementFormData, setCreateUpdateAnnouncementFormData] = useState({\r\n        startDate: '',\r\n        endDate: '',\r\n        description: '',\r\n        announcement_type:null\r\n    })\r\n\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e?.target : { value: e };\r\n\r\n        setCreateUpdateAnnouncementFormData(prevState => {\r\n            let updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n\r\n            return updatedState;\r\n        });\r\n\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitCreateUpdateAnnouncement = async () => {\r\n        const validationResponse = await validateSchema(createUpdateAnnouncementSchema, createUpdateAnnouncementFormData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n                startDate,\r\n                endDate,\r\n                description,\r\n                announcement_type\r\n            } = createUpdateAnnouncementFormData\r\n\r\n            const params = {\r\n                start_date: startDate,\r\n                end_date: endDate,\r\n                description: description,\r\n                type:announcement_type?.label.toLowerCase()\r\n            }\r\n            handleCreateUpdateAnnouncement(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (selectedAnnouncementData) {\r\n            setCreateUpdateAnnouncementFormData({\r\n                startDate: selectedAnnouncementData?.start_date,\r\n                endDate: selectedAnnouncementData?.end_date,\r\n                description: selectedAnnouncementData?.description,\r\n                announcement_type:{label:selectedAnnouncementData?.announcement_type,value:selectedAnnouncementData?.announcement_type}\r\n\r\n            })\r\n        }\r\n    }, [selectedAnnouncementData])\r\n\r\n    const resetForm = () => {\r\n        setCreateUpdateAnnouncementFormData({\r\n            announcement_type:null,\r\n            startDate: '',\r\n            endDate: '',\r\n            description: '',\r\n        })\r\n        setErrors({})\r\n    }\r\n    return (\r\n        <>\r\n        <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n            tabIndex={-1}\r\n            style={{\r\n                visibility: openModel ? 'visible' : 'hidden',\r\n            }}\r\n            id=\"interviewDetail\"\r\n        >\r\n            <div className=\"offcanvas-header\">\r\n                <h5 \r\n                className=\"offcanvas-title  fs-5 fw-bold text-primary\"\r\n                >\r\n                    {selectedAnnouncementData ? \"Update\" : \"Add\"} Announcement\r\n                </h5>\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                    onClick={() => handleOpenClose()}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"offcanvas-body myRequest \">\r\n                <div className=\"formPanel\">\r\n                    <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.startDate\")} />\r\n                                <CustomSelect\r\n                                    data={filteredDropdownData?.announcement_types }\r\n                                    placeholder={\"Select Announcement Type\"}\r\n                                    value={createUpdateAnnouncementFormData?.announcement_type}\r\n                                    handleChange={(selectedOption) => handleFromChange(selectedOption, \"announcement_type\")}\r\n                                />\r\n                                {errors?.announcement_type && (\r\n                                    <CustomError text={errors.announcement_type} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.startDate\")} />\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    placeholder={t(\"placeholders.startDate\")}\r\n                                    value={createUpdateAnnouncementFormData?.startDate}\r\n                                    name=\"startDate\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                                {errors?.startDate && (\r\n                                    <CustomError text={errors.startDate} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-6\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.endDate\")} />\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    placeholder={t(\"placeholders.endDate\")}\r\n                                    value={createUpdateAnnouncementFormData?.endDate}\r\n                                    name=\"endDate\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                    min={createUpdateAnnouncementFormData?.startDate}\r\n                                />\r\n                                {errors?.endDate && (\r\n                                    <CustomError text={errors.endDate} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.description\")} />\r\n                                <Textarea\r\n                                    placeholder={\"Enter here....\"}\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                    name={\"description\"}\r\n                                    value={createUpdateAnnouncementFormData?.description}\r\n                                />\r\n                                {errors?.description && (\r\n                                    <CustomError text={errors.description} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"offcanvas-footer\">\r\n                <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                    <CustomButton\r\n                        // text={selectedAnnouncementData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                        text={t(\"btns.submit\")}\r\n                        classNames={\"btn btn-org-gradient\"}\r\n                        handleClick={() => submitCreateUpdateAnnouncement()}\r\n                    // isLoading={selectedAnnouncementData ? updateAnnouncementPending : createAnnouncementPending}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {openModel && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateUpdateAnnouncement\r\n","import React, { useEffect, useState } from 'react'\r\nimport AnnouncementTable from './AnnouncementTable'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport ApproveRejectModal from '../modal/ApproveRejectModal';\r\nimport CreateUpdateAnnouncement from './CreateUpdateAnnouncement';\r\nimport { useCustomTranslation } from '../../translation';\r\nimport { CustomButton } from '../globalComponents';\r\nimport { communityActions, dropdownMasterActions } from '../../core/resource/actions';\r\nimport { setFilterDropdownData } from '../../utils/common';\r\n\r\nconst Announcement = () => {\r\n    const {\r\n        createPostPending,\r\n        createPostRes,\r\n        createPostError,\r\n\r\n        updatePostPending,\r\n        updatePostRes,\r\n        updatePostError,\r\n\r\n        getAllPostPending,\r\n        getAllPostRes,\r\n        getAllPostError,\r\n\r\n        deletePostRes,\r\n        deletePostError,\r\n        deletePostPending\r\n    } = useSelector(state => state?.community)\r\n    const {\r\n        getFilteredDropdownDataError,\r\n        getFilteredDropdownDataRes,\r\n        getFilteredDropdownDataPending\r\n    } = useSelector(state => state.dropdownMaster)\r\n    const dispatch = useDispatch()\r\n    const { t } = useCustomTranslation()\r\n    const [allAnnouncements, setAllAnnouncement] = useState()\r\n    const [isOpenCreateUpdateAnnouncement, setIsOpenCreateUpdateAnnouncement] = useState(false)\r\n    const [selectedAnnouncementData, setSelectedAnnouncementData] = useState('')\r\n    const [isShowDeleteAnnouncementModal, setIsShowDeleteAnnouncementModal] = useState(false)\r\n    const [deleteAnnouncementId, setDeleteAnnouncementId] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [filteredDropdownData, setFilteredDropdownData] = useState({})\r\n\r\n\r\n    useEffect(()=>{\r\n        getDropdownFilteredData()\r\n    },[])\r\n    /* Create Update Announcement */\r\n    const toggleCreateUpdateAnnouncement = (data) => {\r\n        if (!data) {\r\n            setSelectedAnnouncementData('')\r\n        } else {\r\n            setSelectedAnnouncementData(data)\r\n        }\r\n        setIsOpenCreateUpdateAnnouncement(!isOpenCreateUpdateAnnouncement)\r\n    }\r\n\r\n    /* Delete Announcement */\r\n    const toggleAnnouncementDeleteModal = (id) => {\r\n        if (id) {\r\n            setDeleteAnnouncementId(id)\r\n        }\r\n        setIsShowDeleteAnnouncementModal(!isShowDeleteAnnouncementModal)\r\n    }\r\n\r\n    const handleDeleteAnnouncement = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deleteAnnouncementId\r\n            }\r\n            // dispatch(locationActions?.deleteAnnouncementRequest(params))\r\n        } else {\r\n            toggleAnnouncementDeleteModal()\r\n        }\r\n\r\n    }\r\n\r\n    /* Create Post */\r\n    const createUpdateAnnouncementData = (params) => {\r\n        dispatch(communityActions.createPostRequest(params));\r\n    }\r\n    useEffect(() => {\r\n        if (!createPostPending) {\r\n            if (createPostError) {\r\n                dispatch(communityActions.handleClearCommunityStore(\"HANDLE_CLEAR_CREATE_POST_STORE\"))\r\n                return;\r\n            }\r\n            if (createPostRes) {\r\n                if (createPostRes?.code === 200) {\r\n                    dispatch(communityActions.handleClearCommunityStore(\"HANDLE_CLEAR_CREATE_POST_STORE\"))\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        createPostRes,\r\n        createPostError,\r\n        createPostPending\r\n    ]);\r\n\r\n\r\n    /*Get Dropdown Filtered Data */\r\n    const getDropdownFilteredData = () => {\r\n        const category = ['announcement_types']\r\n        let params = { category: category }\r\n\r\n        dispatch(dropdownMasterActions.getFilteredDropdownDataRequest(params))\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getFilteredDropdownDataPending) {\r\n            if (getFilteredDropdownDataError) {\r\n                return;\r\n            }\r\n            if (getFilteredDropdownDataRes) {\r\n                if (getFilteredDropdownDataRes?.code === 200) {\r\n                    const updateData = setFilterDropdownData(getFilteredDropdownDataRes?.data?.data)\r\n                    setFilteredDropdownData(updateData);\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getFilteredDropdownDataRes,\r\n        getFilteredDropdownDataError,\r\n        getFilteredDropdownDataPending\r\n    ]);\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex  justify-content-end \">\r\n                <CustomButton\r\n                    classNames={\"btn btn-primary gradientBg\"}\r\n                    handleClick={() => toggleCreateUpdateAnnouncement()}\r\n                    text={t(\"btns.createAnnouncement\")}\r\n                    slug={\"add_announcement\"}\r\n                />\r\n            </div>\r\n            <CreateUpdateAnnouncement\r\n                handleCreateUpdateAnnouncement={createUpdateAnnouncementData}\r\n                handleOpenClose={toggleCreateUpdateAnnouncement}\r\n                openModel={isOpenCreateUpdateAnnouncement}\r\n                filteredDropdownData={filteredDropdownData}\r\n            />\r\n            <AnnouncementTable\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                allAnnouncements={allAnnouncements}\r\n                toggleAnnouncementDeleteModal={toggleAnnouncementDeleteModal}\r\n            />\r\n            {isShowDeleteAnnouncementModal && (\r\n                <ApproveRejectModal\r\n                    onApproveReject={handleDeleteAnnouncement}\r\n                    isShow={isShowDeleteAnnouncementModal}\r\n                    desc={t(\"alerts.deletePopup.desc\").replace('$1', \"Announcement\")}\r\n                    // btnRightLoading={deleteAnnouncementPending}\r\n                    btnTextRight={t(\"btns.delete\")}\r\n                    btnTextLeft={t(\"btns.cancel\")}\r\n\r\n                />)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Announcement\r\n"],"names":["props","t","useCustomTranslation","isLoading","toggleAnnouncementDeleteModal","currentPage","setCurrentPage","allAnnouncements","announcementList","setAnnouncementList","useState","useEffect","scopedSlots","useMemo","sn","_","index","_jsx","children","action","item","_jsxs","className","type","onClick","Icon","_Fragment","CustomTable","data","fields","key","label","pagination","totalPages","tableName","selectedAnnouncementData","openModel","handleOpenClose","handleCreateUpdateAnnouncement","filteredDropdownData","errors","setErrors","createUpdateAnnouncementFormData","setCreateUpdateAnnouncementFormData","startDate","endDate","description","announcement_type","handleFromChange","e","fieldName","_e$target","name","target","value","checked","prevState","prevErrors","undefined","resetForm","start_date","end_date","tabIndex","style","visibility","id","Label","text","CustomSelect","announcement_types","placeholder","handleChange","selectedOption","CustomError","Input","onChange","min","Textarea","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","createUpdateAnnouncementSchema","isValid","params","toLowerCase","submitCreateUpdateAnnouncement","Announcement","createPostPending","createPostRes","createPostError","updatePostPending","updatePostRes","updatePostError","getAllPostPending","getAllPostRes","getAllPostError","deletePostRes","deletePostError","deletePostPending","useSelector","state","community","getFilteredDropdownDataError","getFilteredDropdownDataRes","getFilteredDropdownDataPending","dropdownMaster","dispatch","useDispatch","setAllAnnouncement","isOpenCreateUpdateAnnouncement","setIsOpenCreateUpdateAnnouncement","setSelectedAnnouncementData","isShowDeleteAnnouncementModal","setIsShowDeleteAnnouncementModal","deleteAnnouncementId","setDeleteAnnouncementId","setFilteredDropdownData","getDropdownFilteredData","toggleCreateUpdateAnnouncement","communityActions","handleClearCommunityStore","code","category","dropdownMasterActions","getFilteredDropdownDataRequest","_getFilteredDropdownD","updateData","setFilterDropdownData","slug","CreateUpdateAnnouncement","createPostRequest","AnnouncementTable","ApproveRejectModal","onApproveReject","isShow","desc","replace","btnTextRight","btnTextLeft"],"sourceRoot":""}