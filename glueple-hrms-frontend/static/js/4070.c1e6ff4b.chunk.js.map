{"version":3,"file":"static/js/4070.c1e6ff4b.chunk.js","mappings":"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","sources":["components/reuseableComponents/CustomCards.js","components/payrollAdmin/payrollSetting/salaryComponent/EarningsTable.js","components/payrollAdmin/payrollSetting/salaryComponent/DeductionsTable.js","components/payrollAdmin/payrollSetting/salaryComponent/SalaryComponent.js","components/payrollAdmin/payrollSetting/salaryComponent/EarningRulesTable.js","components/payrollAdmin/payrollSetting/salaryComponent/EarningRulesFormula.js","components/commanComponent/CustomAlert.js","components/payrollAdmin/payrollSetting/salaryComponent/EarningRules.js","components/payrollAdmin/earningDeductionTypes/earningDeductionType/ViewsEarningTypes.js","components/payrollAdmin/payrollSetting/salaryComponent/AddUpdateEarnings.js","components/payrollAdmin/payrollSetting/paySchedule/PaySchedule.js","components/payrollAdmin/payrollSetting/salaryComponent/AddPostTaxDeduction.js","components/payrollAdmin/payrollSetting/salaryComponent/AddPreTaxDeduction.js","components/payrollAdmin/payrollSetting/PayrollSetting.js"],"sourcesContent":["import React from 'react'\r\n\r\n\r\nconst CustomCards = ({cardData}) => {\r\n\r\n    const renderedCards = () => {\r\n        return (\r\n            cardData && cardData?.length>0 && cardData.map((card)=>(\r\n                <div className=\"col-md-2 px-md-2 mb-3\"\r\n                key={card?.id}\r\n                onClick={()=> card?.onClickFunc(card?.id)}\r\n                >\r\n                <span\r\n                    className=\"totalBx h-100\"\r\n                >\r\n                    <figure>\r\n                        <img src={card?.imgUrl} alt=\"\" width={50} />\r\n                    </figure>\r\n                    <h3 className=\"fw-bolder my-0\">{card?.name}</h3>\r\n                    <img\r\n                        src=\"images/firstlineBlue.svg\"\r\n                        className=\"cornerLine\"\r\n                        alt=\"\"\r\n                        width={95}\r\n                    />\r\n                </span>\r\n            </div>\r\n             ) ) \r\n           \r\n        )\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"cardBox leaveAppli h-100 mb-4\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 selectModal position-relative z-1\">\r\n                        <div className=\"row px-md-1 \">\r\n                            {renderedCards()}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CustomCards\r\n","import React, { useMemo } from 'react'\r\nimport { CustomTable } from '../../../reuseableComponents'\r\nimport { getBadgeColor } from '../../../../utils/common';\r\n\r\nconst EarningsTable = (props) => {\r\n    const { currentPage, setCurrentPage, earningData,handleToggleModals } = props\r\n\r\n    const earningField = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'payslip_name', label: 'Payslip Name' },\r\n        { key: 'name', label: 'Name' },\r\n        { key: 'value', label: 'Value' },\r\n        { key: 'value_in', label: 'Calculation Type' },\r\n        { key: 'is_active', label: 'Status' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n    const earningScopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${item.is_active ? getBadgeColor(\"active\") : getBadgeColor(\"inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n\r\n\r\n        action: item => (\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                        onClick={() =>handleToggleModals(\"add_earnings\",item)}\r\n                        >Update</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }), [earningData, currentPage]);\r\n    return (\r\n        <div>\r\n            <CustomTable\r\n                data={earningData?.data}\r\n                fields={earningField}\r\n                // isLoading={}\r\n                pagination={true}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                totalPages={earningData?.totalPages}\r\n                // tableName={\"\"}\r\n                // onSearch={handleSearch}\r\n                isHeader={false}\r\n                tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n                scopedSlots={earningScopedSlots}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EarningsTable\r\n","import React, { useMemo } from 'react'\r\nimport { getBadgeColor } from '../../../../utils/common';\r\nimport { CustomTable } from '../../../reuseableComponents';\r\n\r\nconst DeductionsTable = (props) => {\r\n    const { currentPage, setCurrentPage, deductionsData,handleToggleModals } = props\r\n\r\n\r\n    const deductionField = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'payslip_name', label: 'Payslip Name' },\r\n        { key: 'name', label: 'Name' },\r\n        { key: 'value', label: 'Value' },\r\n        { key: 'value_in', label: 'Calculation Type' },\r\n        { key: 'is_active', label: 'Status' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n    const deductionScopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n\r\n        include_in_ctc: item => (\r\n            <span\r\n                className={`badge ${item.include_in_ctc ? getBadgeColor(\"active\") : getBadgeColor(\"inactive\")}`}\r\n            >\r\n                {item.include_in_ctc ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${item.is_active ? getBadgeColor(\"active\") : getBadgeColor(\"inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n\r\n\r\n        action: item => (\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                        onClick={() => handleToggleModals(\"deduction\",item)}\r\n                        >Update</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        )\r\n    }), [deductionsData, currentPage]);\r\n    return (\r\n        <>\r\n            <CustomTable\r\n                data={deductionsData?.data}\r\n                fields={deductionField}\r\n                // isLoading={}\r\n                pagination={true}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                totalPages={deductionsData?.totalPages}\r\n                // tableName={\"\"}\r\n                // onSearch={handleSearch}\r\n                isHeader={false}\r\n                tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n                scopedSlots={deductionScopedSlots}\r\n            />\r\n            {/* <div className=\"requestdata\">\r\n                <div class=\"d-flex align-items-center mb-4\">\r\n                    <span class=\"fw-bold fs-6 text-black\">Deductions</span>\r\n                    <ul class=\"nav nav-tabs leaveTabs ms-3\">\r\n                        <li class=\"nav-item\">\r\n                            <button class=\"nav-link active\" data-bs-toggle=\"tab\" data-bs-target=\"#pending\"\r\n                                // onClick={() => onHandleAppliedStatus(\"attendance_correction\", \"pending\")}\r\n                                type=\"button\">\r\n                                    Pre-Tax Deduction\r\n                              \r\n                            </button>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <button class=\"nav-link\" data-bs-toggle=\"tab\" data-bs-target=\"#pending\"\r\n                                type=\"button\"\r\n                                // onClick={() => onHandleAppliedStatus(\"attendance_correction\", \"approve\")}\r\n                            >\r\n                             Post-Tax Deduction   \r\n                            </button>\r\n                        </li>\r\n                    \r\n                    </ul>\r\n                </div>\r\n                <div className=\"tab-content\">\r\n                    <div className=\"tab-pane fade active show\" id=\"pending\">\r\n\r\n                        <CustomTable\r\n                            data={deductionsData?.data}\r\n                            fields={deductionField}\r\n                            // isLoading={}\r\n                            pagination={true}\r\n                            currentPage={currentPage}\r\n                            setCurrentPage={setCurrentPage}\r\n                            totalPages={deductionsData?.totalPages}\r\n                            // tableName={\"\"}\r\n                            // onSearch={handleSearch}\r\n                            isHeader={false}\r\n                            tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n                            scopedSlots={deductionScopedSlots}\r\n                        />\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DeductionsTable\r\n\r\n","import React from 'react'\r\nimport { CustomTabs } from '../../../reuseableComponents';\r\nimport EarningsTable from './EarningsTable';\r\nimport DeductionsTable from './DeductionsTable';\r\n\r\nconst SalaryComponent = (props) => {\r\n    const {handleToggleModals,earningData,deductionsData}=props\r\n    const tableTabsRequest = [\r\n        { name: \"Earnings\", onClickFun: (id) => getSalaryData(id), id: \"earnings\" },\r\n        { name: \"Deductions\", onClickFun: (id) => getSalaryData(id), id: \"deductions\" },\r\n    ];\r\n    const getSalaryData = (id) => {\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"cardBox myRequest mb-3 employeeHistory\">\r\n                <div className=\"cardHead  justify-content-between\">\r\n                    <div className='d-flex'>\r\n                        <img src=\"/images/myrequest-icon.svg\" alt=\"\" width=\"35\" />\r\n                        <h3 className=\"ms-2 mt-2\">Salary Component</h3>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"dropdown payrollSetting\">\r\n                            <button\r\n                                className=\"btn btn-primary\"\r\n                                type=\"button\"\r\n                                data-bs-toggle=\"dropdown\"\r\n                                aria-expanded=\"true\"\r\n                            >\r\n                                Add Component\r\n                            </button>\r\n                            <ul\r\n                                className=\"dropdown-menu dropdownLeft\"\r\n                                data-popper-placement=\"top-end\"\r\n                      \r\n                            >\r\n                                <li className=\"dropdown-item\"\r\n                                onClick={()=>handleToggleModals(\"add_earnings\")}\r\n                                >\r\n                                    <span>Add Earnings</span>\r\n                                </li>\r\n                                <li className=\"dropdown-item\"\r\n                                onClick={()=>handleToggleModals(\"deduction\")}\r\n                                >\r\n                                    <span>Deduction</span>\r\n                                </li>\r\n                                {/* <li className=\"dropdown-item\"\r\n                                onClick={()=>handleToggleModals(\"post_tax_deduction\")}\r\n                                >\r\n                                    <span>Post-Tax Deduction</span>\r\n                                </li> */}\r\n                                {/* <li className=\"dropdown-item\"\r\n                                onClick={()=>handleToggleModals(\"pre_tax_deduction\")}\r\n                                >\r\n                                    <span>Pre-Tax Deduction</span>\r\n                                </li> */}\r\n                            </ul>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <CustomTabs tabs={tableTabsRequest} type=\"employeeHistory\" />\r\n                <div className=\"tab-content mykpiMain\">\r\n                    <div className=\"tab-pane fade active show\" id=\"earnings\">\r\n                        <EarningsTable\r\n                        earningData={earningData}\r\n                        handleToggleModals={handleToggleModals}\r\n                        />\r\n                    </div>\r\n                    <div className=\"tab-pane fade\" id=\"deductions\">\r\n                        <DeductionsTable\r\n                        deductionsData={deductionsData}\r\n                        handleToggleModals={handleToggleModals}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SalaryComponent\r\n","import React, { useMemo } from 'react'\r\nimport { CustomTable } from '../../../reuseableComponents'\r\nimport { Icon } from '../../../commanComponent';\r\n\r\nconst EarningRulesTable = ({ earningRuleData, deleteEarningRule,editEarningRule, rules}) => {\r\n\r\n    const earningRuleField = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'from', label: 'From' },\r\n        { key: 'to', label: 'to' },\r\n        { key: \"amount\", label: \"Amount/Formula\" },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n    const earningRuleScopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n\r\n        action: (item, index) => (\r\n            <div >\r\n                {rules && rules.length >0 &&<span\r\n                    onClick={() => editEarningRule(item,index)}\r\n                    className='border text-white bg-primary p-2 rounded' \r\n                    \r\n                    style={{ cursor: \"pointer\" }}>\r\n\r\n                    <Icon className={\"fa fa-edit\"} />\r\n                </span>}\r\n                <span\r\n                    onClick={() => deleteEarningRule(index)}\r\n                    className='border text-white bg-danger p-2 rounded' style={{ cursor: \"pointer\" }}>\r\n\r\n                    <Icon className={\"fa fa-trash\"} />\r\n                </span>\r\n\r\n            </div>\r\n        )\r\n    }), [earningRuleData]);\r\n    return (\r\n        <div>\r\n            {/* <CustomStrong text={\"Earning Rules\"} className=\"text-primary\" /> */}\r\n            <CustomTable\r\n                data={earningRuleData}\r\n                fields={earningRuleField}\r\n                totalPages={earningRuleData?.totalPages}\r\n                isHeader={false}\r\n                tableStyle={{ padding: \"0px\", boxShadow: \"none\", border: \"1px solid #F5F5F5\" }}\r\n                scopedSlots={earningRuleScopedSlots}\r\n            />\r\n            <hr />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EarningRulesTable\r\n","import React, { useState } from 'react'\r\nimport { useCustomTranslation } from '../../../../translation'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { CustomError, Label, Textarea } from '../../../commanComponent'\r\nimport CustomSelect from '../../../commanComponent/CustomSelect'\r\nimport { CustomButton } from '../../../globalComponents'\r\n\r\nconst EarningRulesFormula = (props) => {\r\n        const dispatch = useDispatch()\r\n         const { \r\n            getAllEarningTypeRes,\r\n          } = useSelector(state => state.payroll)\r\n        const { toggleEarningRulesFormula, allLeaveConstantData, setEarningRulesData } = props\r\n        const { t } = useCustomTranslation()\r\n        const [earningRules, setEarningRules] = useState({\r\n            brackets: '',\r\n            earningType: '',\r\n            operators: ''\r\n        })\r\n        const [validDescription, setValidDescription] = useState('')\r\n        const [isFillDesc, setIsFillDesc] = useState(false)\r\n    \r\n        const handleFromChange = (e, fieldName) => {\r\n            const name = fieldName\r\n            const value = e;\r\n    \r\n            setEarningRules(prevState => {\r\n                const updatedState = {\r\n                    ...prevState,\r\n                    [name]: value,\r\n                };\r\n                return updatedState;\r\n            });\r\n            setIsFillDesc(false)\r\n        };\r\n        const onAddFormulaField = () => {\r\n            const { brackets, earningType, operators } = earningRules\r\n            let addFormulaFields =\r\n                (brackets?.value || '') +\r\n                (earningType?.value || '') +\r\n                (operators?.value || '');\r\n    \r\n            setValidDescription((prev) => prev + addFormulaFields);\r\n            setEarningRules({\r\n                brackets: '',\r\n                earningType: '',\r\n                operators: ''\r\n            })\r\n        }\r\n    \r\n        const checkEarningRulesFormula = () => {\r\n            if (validDescription) {\r\n                setIsFillDesc(false)\r\n                const payload = {\r\n                    formula: validDescription\r\n                }\r\n                // dispatch(leaveAction.checkLeaveEarningRulesRequest(payload))\r\n            } else {\r\n                setIsFillDesc(true)\r\n            }\r\n        }\r\n        const saveEarningRules = () => {\r\n            setEarningRulesData((pre) => ({\r\n                ...pre,\r\n                [\"amount\"]: validDescription\r\n            }))\r\n        }\r\n\r\n    \r\n  return (\r\n    <div className='border p-2' style={{ backgroundColor: \"#DCDCDC\" }}>\r\n            <div className='p-3' style={{ backgroundColor: \"white\" }}>\r\n                <div className=\"header ps-2 d-flex justify-content-between\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{t(\"headings.amountFormula\")}</h5>\r\n                    <button type=\"button\" className=\"btn-close\" onClick={() => toggleEarningRulesFormula()}></button>\r\n                </div>\r\n                <hr className='m-1' />\r\n                <div className=\"body mt-2\">\r\n                    <div className=\"formPanel\">\r\n                        <div className='row'>\r\n                            <div className=\"col-md-3 form-group mb-3\">\r\n                                <Label text={t(\"labels.brackets\")}\r\n                                />\r\n                                <CustomSelect\r\n                                    data={allLeaveConstantData && allLeaveConstantData?.brackets}\r\n                                    placeholder={t(\"placeholders.select\")}\r\n                                    value={earningRules?.brackets || ''}\r\n                                    handleChange={(selectedOption) => handleFromChange(selectedOption, \"brackets\")}\r\n                                    name=\"brackets\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-md-3 form-group mb-3\">\r\n                                <Label text={t(\"labels.earningType\")}\r\n                                />\r\n                                <CustomSelect\r\n                                    data={getAllEarningTypeRes && getAllEarningTypeRes?.data ||[]}\r\n                                    placeholder={t(\"placeholders.earningType\")}\r\n                                    value={earningRules?.earningType || ''}\r\n                                    handleChange={(selectedOption) => handleFromChange(selectedOption, \"earningType\")}\r\n                                    name=\"earningType\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-md-3 form-group mb-3\">\r\n                                <Label text={t(\"labels.operators\")}\r\n                                />\r\n                                <CustomSelect\r\n                                    data={allLeaveConstantData && allLeaveConstantData?.operators}\r\n                                    placeholder={t(\"placeholders.select\")}\r\n                                    value={earningRules?.operators || ''}\r\n                                    handleChange={(selectedOption) => handleFromChange(selectedOption, \"operators\")}\r\n                                    name=\"operators\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"col-md-3 form-group mb-3\">\r\n                                <CustomButton\r\n                                    text={t(\"btns.add\")}\r\n                                    classNames={\"btn btn-org-gradient  mt-4\"}\r\n                                    handleClick={() => onAddFormulaField()}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className='row'>\r\n                            <div className=\"col-md-9 form-group mb-3\">\r\n                                <Textarea\r\n                                    value={validDescription}\r\n                                    placeholder={t(\"placeholders.leaveExpression\")}\r\n                                    onChange={(e) => setValidDescription(e.target.value)}\r\n                                />\r\n                                {isFillDesc && (\r\n                                    <CustomError text={\"Place add formula to validate\"} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className='row'>\r\n                            <div className=\"col-md-9  mb-3 d-flex justify-content-end\" >\r\n                                <CustomButton\r\n                                    text={t(\"btns.validate\")}\r\n                                    classNames={\"btn btn-success gradientBg \"}\r\n                                    // handleClick={() => checkEarningRulesFormula()}\r\n                                    // isLoading={checkLeaveEarningRulesPending}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"footer\">\r\n                    <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                        <CustomButton\r\n                            text={t(\"btns.save\")}\r\n                            classNames={\"btn btn-primary mt-2\"}\r\n                            handleClick={() => saveEarningRules()}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default EarningRulesFormula\r\n","import React from 'react'\r\n\r\nconst CustomAlert = (props) => {\r\n    const {alertLabel,text,className='',style ={}}=props\r\n    return (\r\n        <div className={`alert ${className ||\"alert-warning\"}`} style={style||{}} role=\"alert\">\r\n            <strong>{alertLabel}</strong>{text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomAlert\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useCustomTranslation } from '../../../../translation'\r\nimport { CustomStrong, Input } from '../../../commanComponent'\r\nimport { CustomButton } from '../../../globalComponents'\r\nimport EarningRulesTable from './EarningRulesTable'\r\nimport EarningRulesFormula from './EarningRulesFormula'\r\nimport CustomAlert from '../../../commanComponent/CustomAlert'\r\n\r\nconst EarningRules = (props) => {\r\n    const { allLeaveConstantData, setRules, rules } = props\r\n    const { t } = useCustomTranslation()\r\n    const [errors, setErrors] = useState('')\r\n    const [isOpenERF, setIsOpenERF] = useState('')\r\n    const [earningRuleData, setEarningRuleData] = useState([])\r\n    const [selectedIndex, setSelectedIndex] = useState('')\r\n    const [earningRules, setEarningRules] = useState({\r\n        from: \"\",\r\n        to: '',\r\n        amount: \"\"\r\n    })\r\n\r\n\r\n    const handleFromChange = (e, fieldName, index) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e?.target : { value: e };\r\n\r\n        setEarningRules(prevState => {\r\n            let updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n            return updatedState;\r\n        });\r\n\r\n        // Clear error for the specific field being changed\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n\r\n    };\r\n    const deleteEarningRule = (index) => {\r\n        const earningData = earningRuleData?.filter((_, ind) => ind !== index)\r\n        setEarningRuleData(earningData)\r\n\r\n    }\r\n    const editEarningRule = (item,index) => {\r\n        setEarningRules({\r\n            from: item?.from,\r\n            to: item?.to,\r\n            amount: item?.amount\r\n        })\r\n        setSelectedIndex(index)\r\n    }\r\n    const submitEarningRules = () => {\r\n        if (selectedIndex !== '') {\r\n            const updatedRuleData = earningRuleData.map((rule, index) => {\r\n                if (index === selectedIndex) {\r\n                    return {\r\n                        ...rule,\r\n                        from: earningRules?.from,\r\n                        to: earningRules?.to,\r\n                        amount: earningRules?.amount,\r\n                    };\r\n                }\r\n                return rule;\r\n            });\r\n    \r\n            setEarningRuleData(updatedRuleData);\r\n            setRules(updatedRuleData);\r\n            setSelectedIndex('')\r\n        } else {\r\n            setEarningRuleData([...earningRuleData, earningRules])\r\n            setRules([...earningRuleData, earningRules])\r\n        }\r\n        resetEarningRulesFields()\r\n\r\n    }\r\n    const toggleEarningRulesFormula = () => {\r\n        setIsOpenERF(!isOpenERF)\r\n\r\n    }\r\n\r\n    const resetEarningRulesFields = () => {\r\n        setEarningRules({\r\n            from: \"\",\r\n            to: '',\r\n            amount: \"\"\r\n        })\r\n    }\r\n    useEffect(() => {\r\n        if (rules) {\r\n            setEarningRuleData(rules)\r\n        }\r\n    }, [rules])\r\n    return (\r\n        <>\r\n            {earningRuleData && earningRuleData.length > 0 && <EarningRulesTable\r\n                earningRuleData={earningRuleData}\r\n                deleteEarningRule={deleteEarningRule}\r\n                rules={rules}\r\n                editEarningRule={editEarningRule}\r\n            />}\r\n\r\n            <div className=\"col-md-12 row\">\r\n                <div className=\"form-group mb-2\">\r\n                    <CustomStrong\r\n                        className={\"text-primary\"}\r\n                        text={t(\"labels.rules\")}\r\n                        required={true}\r\n                    />\r\n                    <div className=\"col-md-12 mt-2\">\r\n                        <div className=\"form-group mb-2 d-flex justify-content-between gap-3\">\r\n                            <span className='rupee-sign' >&#8377;</span>\r\n\r\n                            <Input\r\n                                type=\"number\"\r\n                                placeholder={t(\"placeholders.startSalary\")}\r\n                                value={earningRules?.from}\r\n                                name=\"from\"\r\n                                onChange={(e) => handleFromChange(e)}\r\n                            />\r\n                            <span className='mt-2' style={{ fontSize: \"16px\" }} >To</span>\r\n                            <Input\r\n                                type=\"number\"\r\n                                placeholder={t(\"placeholders.endSalary\")}\r\n                                value={earningRules?.to}\r\n                                name=\"to\"\r\n                                onChange={(e) => handleFromChange(e)}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-12 row\">\r\n                <div className=\"form-group mb-2\">\r\n\r\n                    <div className=\"col-md-12 mt-2\">\r\n                        <div className=\"form-group mb-2 d-flex justify-content-start gap-3\">\r\n                            <span className='rupee-sign' >&#8377;</span>\r\n\r\n                            <Input\r\n                                type=\"text\"\r\n                                placeholder={t(\"placeholders.amountFormula\")}\r\n                                value={earningRules?.amount}\r\n                                name=\"amount\"\r\n                                onChange={(e) => handleFromChange(e)}\r\n                                style={{ width: \"43%\" }}\r\n                            />\r\n                            <CustomButton\r\n                                text={t(\"btns.createFormula\")}\r\n                                classNames={\"btn btn-primary\"}\r\n                                handleClick={() => toggleEarningRulesFormula()}\r\n                            />\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {isOpenERF && <EarningRulesFormula\r\n                allLeaveConstantData={allLeaveConstantData}\r\n                toggleEarningRulesFormula={toggleEarningRulesFormula}\r\n                setEarningRulesData={setEarningRules}\r\n\r\n            />}\r\n            <CustomAlert alertLabel={\"Note: \"} text={t(\"paragraph.addEarningRules\")} />\r\n            <hr />\r\n            <div className='d-flex justify-content-end'>\r\n                <CustomButton\r\n                    text={selectedIndex !=='' ?t(\"btns.update\"):t(\"btns.addRules\")}\r\n                    classNames={\"btn btn-success\"}\r\n                    styles={{ minWidth: \"0px\" }}\r\n                    handleClick={() => submitEarningRules()}\r\n                />\r\n\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default EarningRules\r\n","import React from 'react'\r\nimport { CustCheckbox, CustomRadio, CustomStrong, Input } from '../../../commanComponent'\r\nimport { yesNoFlexOptions, yesNoOptions } from '../../../../utils/Constants.config'\r\nimport { useCustomTranslation } from '../../../../translation'\r\n\r\nconst ViewsEarningTypes = ({earningTypeData}) => {\r\n    const {t}=useCustomTranslation()\r\n    return (\r\n        <div>\r\n            <div className=\"row reviewsComment\">\r\n                <div className=\"col-md-12\" >\r\n                    <div className=\"form-group mb-2\">\r\n                        <CustomStrong\r\n                            text={t(\"labels.earningTypeName\")}\r\n                            required={true}\r\n                        />\r\n                        <Input\r\n                            type=\"text\"\r\n                            placeholder={t(\"placeholders.earningTypeName\")}\r\n                            value={earningTypeData?.earning_type_name}\r\n                            name=\"earningTypeName\"\r\n                            isDisabled={true}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"form-group mb-2\">\r\n                        <CustomStrong\r\n                            text={t(\"labels.calculationType\")}\r\n                            required={true}\r\n                        />\r\n                        <CustomRadio\r\n                            data={yesNoOptions}\r\n                            name=\"calculationType\"\r\n                            selectedValue={earningTypeData?.calculation_type}\r\n                            isDisabled={true}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"form-group mb-2\">\r\n                        <CustomStrong\r\n                            text={\"Calculate on pro-rata basis.\"}\r\n                        />\r\n                        <p>\r\n                            ( Pay will be adjusted based on employee working days.)</p>\r\n                        <CustomRadio\r\n                            data={yesNoFlexOptions}\r\n                            name=\"isProRata\"\r\n                            selectedValue={earningTypeData?.is_pro_rata}\r\n                            isDisabled={true}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"form-group mb-2\">\r\n                        <CustomStrong\r\n                            text={\"Include this as a Flexible Benefit Plan component.\"}\r\n                        />\r\n                        <p>\r\n                            ( FBP allows your employees to personalise their salary structure by choosing how much they want to receive under each FBP component.)</p>\r\n                        <CustomRadio\r\n                            data={yesNoFlexOptions}\r\n                            name=\"canIncludeAsFbp\"\r\n                            selectedValue={earningTypeData?.can_include_as_fbp}\r\n                            isDisabled={true}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"form-group mb-2\">\r\n                        <CustomStrong\r\n                            text={\"Consider for EPF Contribution.\"}\r\n                        />\r\n                        <CustomRadio\r\n                            data={yesNoFlexOptions}\r\n                            name=\"isIncludedInEpf\"\r\n                            selectedValue={earningTypeData?.is_included_in_epf}\r\n                            isDisabled={true}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"form-group mb-2\">\r\n                        <CustomStrong\r\n                            text={\"Consider for ESI Contribution.\"}\r\n                        />\r\n                        <CustomRadio\r\n                            data={yesNoFlexOptions}\r\n                            name=\"isIncludedInEsi\"\r\n                            selectedValue={earningTypeData?.is_included_in_esi}\r\n                            isDisabled={true}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-12\">\r\n                    <div className=\"form-group mb-2\">\r\n                        <CustomStrong\r\n                            text={\"Show this component in payslip\"}\r\n                        />\r\n                        <CustomRadio\r\n                            data={yesNoFlexOptions}\r\n                            name=\"showInPayslip\"\r\n                            selectedValue={earningTypeData?.show_in_payslip}\r\n                            isDisabled={true}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-12 d-flex\">\r\n                    <div className=\"form-group mb-3\">\r\n                        <CustCheckbox\r\n                            key={\"isActive\"}\r\n                            id={`isActive`}\r\n                            checked={earningTypeData?.is_active}\r\n                            name={\"isActive\"}\r\n                        />\r\n\r\n                    </div>\r\n                    <div className=\"form-group mb-3\">\r\n                        <CustomStrong text={t(\"labels.isActive\")} className=\"text-primary\" />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewsEarningTypes\r\n","import React, { useEffect, useState } from 'react'\r\nimport { CustCheckbox, CustomRadio, CustomStrong, Icon, Input, Label } from '../../../commanComponent'\r\nimport { CustomButton, CustomError } from '../../../globalComponents'\r\nimport CustomSelect from '../../../commanComponent/CustomSelect'\r\nimport { useCustomTranslation } from '../../../../translation'\r\nimport { calculationTypeOptions } from '../../../../utils/Constants.config'\r\nimport EarningRules from './EarningRules'\r\nimport { CustomTabs } from '../../../reuseableComponents'\r\nimport ViewsEarningTypes from '../../earningDeductionTypes/earningDeductionType/ViewsEarningTypes'\r\nimport { useSelector } from 'react-redux'\r\nimport { useDispatch } from 'react-redux'\r\nimport { payrollActions } from '../../../../core/resource/actions'\r\nconst AddUpdateEarnings = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const dispatch = useDispatch()\r\n    const { getEarningTypeByIdRes,addEarningsPending,updateEarningsPending } = useSelector(state => state.payroll)\r\n    const {\r\n        earningDeductionSelectedData,\r\n        openModel,\r\n        handleOpenClose,\r\n        allEarningTypeData,\r\n        addEarnings,\r\n        allLeaveConstantData,\r\n        getEarningTypeById,\r\n        isOpenModalType,\r\n        addDeductions,\r\n        updateEarnings,\r\n        updateDeductions,\r\n        earningTypeByIdData,\r\n        allDeductionTypeData\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [createUpdateEarningsFormData, setCreateUpdateEarningsFormData] = useState({\r\n        earningType: null,\r\n        nameInPayslip: '',\r\n        calculationType: '',\r\n        calculationTypeValue: '',\r\n        // earningName: '',\r\n        variablePay: false,\r\n        includedCTC: false,\r\n        taxableComp: false,\r\n        isActive: true\r\n    })\r\n    const [rules, setRules] = useState([])\r\n\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e?.target?.name;\r\n        const { value, type, checked } = e?.target ? e?.target : { value: e };\r\n        setCreateUpdateEarningsFormData(prevState => {\r\n            let updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n            if (name === \"earningType\") {\r\n                getEarningTypeById(e?._id)\r\n            }\r\n\r\n            if (name === \"calculationType\") {\r\n                updatedState = {\r\n                    ...updatedState,\r\n                    calculationTypeValue: '', \r\n                };\r\n            }\r\n\r\n            return updatedState;\r\n        });\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitCreateUpdateEarnings = async () => {\r\n        let payload = {\r\n            payslip_name: createUpdateEarningsFormData?.nameInPayslip,\r\n            // name: createUpdateEarningsFormData?.earningName,\r\n            [isOpenModalType === \"earnings\" ? \"earning_type\" : \"deduction_type\"]:\r\n            createUpdateEarningsFormData?.earningType?._id,\r\n            value: createUpdateEarningsFormData?.calculationTypeValue,\r\n            value_in: createUpdateEarningsFormData?.calculationType,\r\n            is_optional: false,\r\n            max_allowance: createUpdateEarningsFormData?.maxAllowance,\r\n            include_in_ctc: createUpdateEarningsFormData?.includedCTC,\r\n            rules: rules,\r\n            is_variable_pay: createUpdateEarningsFormData?.variablePay,\r\n            is_taxable: createUpdateEarningsFormData?.taxableComp,\r\n            is_active: createUpdateEarningsFormData?.isActive\r\n        }\r\n        if(earningDeductionSelectedData){\r\n            payload[\"_id\"]=earningDeductionSelectedData?._id\r\n            isOpenModalType == \"earnings\" ? updateEarnings(payload) : updateDeductions(payload)\r\n        }else{\r\n            \r\n            isOpenModalType == \"earnings\" ? addEarnings(payload) : addDeductions(payload)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (earningDeductionSelectedData) {\r\n            setCreateUpdateEarningsFormData({\r\n                earningType: { label: earningDeductionSelectedData?.earning_type_name, value: earningDeductionSelectedData?.earning_type },\r\n                nameInPayslip: earningDeductionSelectedData?.payslip_name,\r\n                calculationType: earningDeductionSelectedData?.value_in,\r\n                calculationTypeValue: earningDeductionSelectedData?.value,\r\n                // earningName: earningDeductionSelectedData?.name,\r\n                variablePay: earningDeductionSelectedData?.is_variable_pay,\r\n                includedCTC: earningDeductionSelectedData?.include_in_ctc,\r\n                taxableComp: earningDeductionSelectedData?.is_taxable,\r\n                isActive: earningDeductionSelectedData?.is_active,\r\n\r\n            })\r\n            setRules(earningDeductionSelectedData?.rules)\r\n        }\r\n    }, [earningDeductionSelectedData])\r\n\r\n    const resetForm = () => {\r\n        setCreateUpdateEarningsFormData({\r\n            earningType: null,\r\n            nameInPayslip: '',\r\n            calculationType: '',\r\n            calculationTypeValue: '',\r\n            // earningName: '',\r\n            variablePay: \"\",\r\n            includedCTC: false,\r\n            taxableComp: false,\r\n            isActive: true\r\n        })\r\n        setErrors({})\r\n        dispatch(payrollActions.handleClearPayrollStore(\"HANDLE_CLEAR_EARNING_TYPE_BY_ID_STORE\"))\r\n    }\r\n\r\n    const earningTabs = [\r\n        { name: \"Earnings\", onClickFun: (id) => onTabChange(id), id: \"add_earnings\" },\r\n        { name: \"Earning Rules\", onClickFun: (id) => onTabChange(id), id: \"earning_rules\" },\r\n        { name: \"Other Configurations\", onClickFun: (id) => onTabChange(id), id: \"other_configurations\" },\r\n    ];\r\n\r\n    const deductionTabs = [\r\n        { name: \"Deduction\", onClickFun: (id) => onTabChange(id), id: \"deduction\" },\r\n        { name: \"Deduction Rules\", onClickFun: (id) => onTabChange(id), id: \"deduction_rules\" },\r\n        { name: \"Other Configurations\", onClickFun: (id) => onTabChange(id), id: \"other_configurations\" },\r\n    ];\r\n    const onTabChange = () => {\r\n\r\n    }\r\n    const checkCalculationType = () => {\r\n        switch (createUpdateEarningsFormData?.calculationType) {\r\n            case \"percentage\":\r\n                return {\r\n                    label: t(\"labels.percentage\"),\r\n                    placeholder: t(\"placeholders.percentage\")\r\n                };\r\n            default:\r\n                return {\r\n                    label: t(\"labels.amount\"),\r\n                    placeholder: t(\"placeholders.amount\")\r\n                };\r\n        }\r\n    };\r\n    return (\r\n        <>\r\n            <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n                tabIndex={-1}\r\n                style={{\r\n                    visibility: openModel ? 'visible' : 'hidden',\r\n                    width: \"800px\"\r\n                }}\r\n                id=\"interviewDetail\"\r\n            >\r\n                <div className=\"offcanvas-header\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">\r\n                        {earningDeductionSelectedData ? \"Update\" : \"Add\"} {isOpenModalType == \"earnings\" ? \"Earnings\" : \"Deduction\"}</h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                        onClick={() => handleOpenClose(\"add_earnings\")}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"offcanvas-body myRequest \">\r\n                    <CustomTabs tabs={isOpenModalType == \"earnings\" ? earningTabs : deductionTabs} type=\"earnings\" />\r\n                    <div className=\"tab-content \">\r\n                        <div className=\"tab-pane fade active show\" id={isOpenModalType == \"earnings\" ? `add_earnings` : 'deduction'}>\r\n                            <div className=\"formPanel\">\r\n                                <div className='row mb-3 pb-2' style={{ borderBottom: \"1px #C4C1BF solid\" }}>\r\n                                    <div className=\"col-md-6\" >\r\n                                        <div className=\"form-group mb-2\">\r\n                                            <Label text={isOpenModalType == \"earnings\" ?t(\"labels.earningType\"):t(\"labels.deductionType\")} required={true} />\r\n                                            <CustomSelect\r\n                                                data={isOpenModalType == \"earnings\" ?allEarningTypeData:allDeductionTypeData}\r\n                                                placeholder={isOpenModalType == \"earnings\" ?t(\"placeholders.earningType\"):t(\"placeholders.deductionType\")}\r\n                                                value={createUpdateEarningsFormData?.earningType || ''}\r\n                                                handleChange={(selectedOption) => handleFromChange(selectedOption, \"earningType\")}\r\n                                                name=\"earningType\"\r\n                                            />\r\n                                            {errors?.earningType && (\r\n                                                <CustomError text={errors.earningType} />\r\n                                            )}\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    {/* <div className=\"col-md-6\">\r\n                                        <div className=\"form-group mb-2\">\r\n                                            <Label text={t(\"labels.name\")} required={true} />\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                placeholder={t(\"placeholders.name\")}\r\n                                                value={createUpdateEarningsFormData?.earningName}\r\n                                                name=\"earningName\"\r\n                                                onChange={(e) => handleFromChange(e)}\r\n                                            />\r\n                                        </div>\r\n                                    </div> */}\r\n                                    <div className=\"col-md-6\">\r\n                                        <div className=\"form-group mb-2\">\r\n                                            <Label text={t(\"labels.nameInPayslip\")} required={true} />\r\n                                            <Input\r\n                                                type=\"text\"\r\n                                                placeholder={t(\"placeholders.nameInPayslip\")}\r\n                                                value={createUpdateEarningsFormData?.nameInPayslip}\r\n                                                name=\"nameInPayslip\"\r\n                                                onChange={(e) => handleFromChange(e)}\r\n                                            />\r\n\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-md-12\">\r\n                                        <div className=\"form-group mb-2\">\r\n                                            <Label text={t(\"labels.calculationType\")} required={true} />\r\n                                            <CustomRadio\r\n                                                data={ calculationTypeOptions}\r\n                                                name=\"calculationType\"\r\n                                                handleChange={(e) => handleFromChange(e)}\r\n                                                selectedValue={createUpdateEarningsFormData?.calculationType}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    {createUpdateEarningsFormData?.calculationType !== \"\" &&\r\n                                        createUpdateEarningsFormData?.calculationType !== \"slab_wise\"\r\n                                        && <div className=\"col-md-6\">\r\n                                            <div className=\"form-group mb-2\">\r\n                                                <Label\r\n                                                    text={checkCalculationType()?.label}\r\n                                                />\r\n                                                <Input\r\n                                                    type=\"number\"\r\n                                                    placeholder={checkCalculationType()?.placeholder}\r\n                                                    value={createUpdateEarningsFormData?.calculationTypeValue}\r\n                                                    name=\"calculationTypeValue\"\r\n                                                    onChange={(e) => handleFromChange(e)}\r\n                                                />\r\n                                            </div>\r\n                                        </div>}\r\n                                    {/* <div className=\"col-md-12 row\">\r\n                                        <div className=\"form-group mb-2\">\r\n                                            <CustomStrong\r\n                                                className={\"text-primary\"}\r\n                                                text={t(\"labels.monthlySalary\")}\r\n                                                required={true}\r\n                                            />\r\n                                            <div className=\"col-md-12 mt-2\">\r\n                                                <div className=\"form-group mb-2 d-flex justify-content-between gap-3\">\r\n                                                    <span className='rupee-sign' >&#8377;</span>\r\n\r\n                                                    <Input\r\n                                                        type=\"number\"\r\n                                                        placeholder={t(\"placeholders.startSalary\")}\r\n                                                        value={createUpdateEarningsFormData?.startSalary}\r\n                                                        name=\"startSalary\"\r\n                                                        onChange={(e) => handleFromChange(e)}\r\n                                                    />\r\n                                                    <span className='mt-2' style={{ fontSize: \"16px\" }} >To</span>\r\n                                                    <Input\r\n                                                        type=\"number\"\r\n                                                        placeholder={t(\"placeholders.endSalary\")}\r\n                                                        value={createUpdateEarningsFormData?.endSalary}\r\n                                                        name=\"endSalary\"\r\n                                                        onChange={(e) => handleFromChange(e)}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div> */}\r\n\r\n                                    <div className=\"col-md-12 row\">\r\n                                        <div className=\"form-group mb-2\">\r\n                                            <CustomStrong\r\n                                                className={\"text-primary\"}\r\n                                                text={t(\"labels.maxAllowance\")}\r\n                                                required={true}\r\n                                            />\r\n                                            <div className=\"col-md-6 mt-2\">\r\n                                                <div className=\"form-group mb-2 d-flex justify-content-between gap-3\">\r\n                                                    <span className='rupee-sign' >&#8377;</span>\r\n\r\n                                                    <Input\r\n                                                        type=\"number\"\r\n                                                        placeholder={t(\"placeholders.maxAllowance\")}\r\n                                                        value={createUpdateEarningsFormData?.maxAllowance}\r\n                                                        name=\"maxAllowance\"\r\n                                                        onChange={(e) => handleFromChange(e)}\r\n                                                    />\r\n\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                    <div className=\"col-md-12 d-flex\">\r\n                                        <div className=\"form-group \">\r\n                                            <CustCheckbox\r\n                                                key={\"includedCTC\"}\r\n                                                id={`includedCTC`}\r\n                                                checked={createUpdateEarningsFormData?.includedCTC}\r\n                                                handleChange={(e) => handleFromChange(e)}\r\n                                                name={\"includedCTC\"}\r\n                                            />\r\n\r\n                                        </div>\r\n                                        <div className=\"form-group \">\r\n                                            <CustomStrong text={t(\"labels.includedCTC\")} className=\"text-primary\" />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-md-12 d-flex\">\r\n                                        <div className=\"form-group \">\r\n                                            <CustCheckbox\r\n                                                key={\"variablePay\"}\r\n                                                id={`variablePay`}\r\n                                                checked={createUpdateEarningsFormData?.variablePay}\r\n                                                handleChange={(e) => handleFromChange(e)}\r\n                                                name={\"variablePay\"}\r\n                                            />\r\n\r\n                                        </div>\r\n                                        <div className=\"form-group \">\r\n                                            <CustomStrong text={t(\"labels.variablePay\")} className=\"text-primary\" />\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className=\"col-md-12 d-flex\">\r\n                                        <div className=\"form-group \">\r\n                                            <CustCheckbox\r\n                                                key={\"taxableComp\"}\r\n                                                id={`taxableComp`}\r\n                                                checked={createUpdateEarningsFormData?.taxableComp}\r\n                                                handleChange={(e) => handleFromChange(e)}\r\n                                                name={\"taxableComp\"}\r\n                                            />\r\n\r\n                                        </div>\r\n                                        <div className=\"form-group \">\r\n                                            <CustomStrong text={t(\"labels.taxableComp\")} className=\"text-primary\" />\r\n                                            <p className='text-secondary'>{t(\"paragraph.taxableCompDesc\")}</p>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-md-12 d-flex\">\r\n                                        <div className=\"form-group \">\r\n                                            <CustCheckbox\r\n                                                key={\"isActive\"}\r\n                                                id={`isActive`}\r\n                                                checked={createUpdateEarningsFormData?.isActive}\r\n                                                handleChange={(e) => handleFromChange(e)}\r\n                                                name={\"isActive\"}\r\n                                            />\r\n\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <CustomStrong text={t(\"labels.isActive\")} className=\"text-primary\" />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"tab-pane fade\" id={isOpenModalType == \"earnings\" ? \"earning_rules\" : \"deduction_rules\"}>\r\n                            <EarningRules\r\n                                allLeaveConstantData={allLeaveConstantData}\r\n                                setRules={setRules}\r\n                                rules={rules}\r\n                            />\r\n                        </div>\r\n                        <div className=\"tab-pane fade\" id=\"other_configurations\">\r\n                            {earningTypeByIdData &&earningTypeByIdData?.length> 0 &&  <ViewsEarningTypes\r\n                                earningTypeData={earningTypeByIdData[0]}\r\n                            />}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"offcanvas-footer\">\r\n                    <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                        <CustomButton\r\n                            text={earningDeductionSelectedData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                            classNames={\"btn btn-org-gradient\"}\r\n                            handleClick={() => submitCreateUpdateEarnings()}\r\n                        // isLoading={earningDeductionSelectedData ? updateEarningsPending : addEarningsPending}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {openModel && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddUpdateEarnings\r\n","import React, { useMemo } from 'react'\r\nimport { useCustomTranslation } from '../../../../translation';\r\nimport { CustomButton } from '../../../globalComponents';\r\nimport { CustomStrong, Icon, Label } from '../../../commanComponent';\r\nimport { CustomTable } from '../../../reuseableComponents';\r\n\r\nconst PaySchedule = (props) => {\r\n    const { toggleAddArrearsModal } = props\r\n    const { t } = useCustomTranslation()\r\n\r\n    const arrearsEmployeeFields = [\r\n        { key: 'pay_period', label: 'PAY PERIOD' },\r\n        { key: 'pay_date', label: 'PAY DATE' },\r\n    \r\n    ];\r\n    const arrearsEmployeeScopedSlots = useMemo(() => ({\r\n      \r\n\r\n\r\n    }), []);\r\n    return (\r\n        <div>\r\n\r\n            <div className=' p-3'>\r\n                <div className=\"d-flex mb-2 paySchedule\">\r\n                    <h3 className='me-1'\r\n                        style={{ fontSize: \"18px\", fontWeight: 600 }}\r\n                    >\r\n                        This Organization's payroll runs on this schedule\r\n                    </h3>\r\n                    <div style={{\r\n                            backgroundColor: \"#b7b5b5bd\",\r\n                            width: \"30px\",\r\n                            borderRadius: \"25px\",\r\n                            paddingTop: \"5px\",\r\n                            paddingLeft: \"8px\"\r\n                    }}> <Icon className ={\"bi bi-pencil text-white\"}/></div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-2\">\r\n                        <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.payFrequency\")} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"form-group mb-3\">\r\n                            <CustomStrong text={\"Every Month\"} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-2\">\r\n                        <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.workingDays\")} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"form-group mb-3\">\r\n                            <CustomStrong text={\"Tue,Wed,Thu,Fri\"} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-2\">\r\n                        <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.payDay\")} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"form-group mb-3\">\r\n                            <CustomStrong text={\"First of Every Month\"} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-2\">\r\n                        <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.firstPayPeriod\")} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"form-group mb-3\">\r\n                            <CustomStrong text={\"April 2024\"} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-2\">\r\n                        <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.firstPayPeriod\")} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"form-group mb-3\">\r\n                            <CustomStrong text={\"01/05/2024\"} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-12 form-group mb-3\">\r\n                        <h3 className='underlineHead ' style={{ fontSize: \"18px\" }}> Upcoming Payroll</h3>\r\n                        <CustomTable\r\n                            data={[]}\r\n                            fields={arrearsEmployeeFields}\r\n                            // isLoading={isLoading}\r\n                            pagination={true}\r\n                            // currentPage={currentPage}\r\n                            // setCurrentPage={setCurrentPage}\r\n                            // totalPages={depList?.totalPages}\r\n                            // tableName={\"\"}\r\n                            // onSearch={handleSearch}\r\n                            isHeader={false}\r\n                            tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n                            scopedSlots={arrearsEmployeeScopedSlots}\r\n                        />\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PaySchedule\r\n","import React, { useEffect, useState } from 'react'\r\nimport { CustCheckbox, CustomRadio, Icon, Input, Label } from '../../../commanComponent'\r\nimport { CustomButton, CustomError } from '../../../globalComponents'\r\nimport CustomSelect from '../../../commanComponent/CustomSelect'\r\nimport { useCustomTranslation } from '../../../../translation'\r\nimport { deductionFrequency } from '../../../../utils/Constants.config'\r\n\r\nconst AddPostTaxDeduction = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        openModel,\r\n        handleOpenClose,\r\n\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [postTaxDeductionFormData, setPostTaxDeductionFormData] = useState({\r\n\r\n        nameInPayslip: '',\r\n        deductionFrequency: '',\r\n        is_active: true\r\n    })\r\n\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e?.target : { value: e };\r\n\r\n        setPostTaxDeductionFormData(prevState => {\r\n            let updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n            return updatedState;\r\n        });\r\n\r\n        // Clear error for the specific field being changed\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitPostTaxDeduction = async () => {\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n\r\n\r\n    const resetForm = () => {\r\n        setPostTaxDeductionFormData({\r\n            nameInPayslip: '',\r\n            deductionFrequency: '',\r\n            is_active: true\r\n        })\r\n        setErrors({})\r\n    }\r\n\r\n    return (\r\n        <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n            tabIndex={-1}\r\n            style={{\r\n                visibility: openModel ? 'visible' : 'hidden',\r\n                width: \"600px\"\r\n            }}\r\n            id=\"interviewDetail\"\r\n        >\r\n            <div className=\"offcanvas-header\">\r\n                <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">Post Tax Deduction</h5>\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                    onClick={\r\n                        () => handleOpenClose(\"post_tax_deduction\")\r\n                    }\r\n                />\r\n            </div>\r\n\r\n            <div className=\"offcanvas-body myRequest \">\r\n                <div className=\"formPanel\">\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.nameInPayslip\")} required={true} />\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    placeholder={t(\"placeholders.nameInPayslip\")}\r\n                                    value={postTaxDeductionFormData?.nameInPayslip}\r\n                                    name=\"nameInPayslip\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.deductionFrequency\")} required={true} />\r\n                                <CustomRadio\r\n                                    data={deductionFrequency}\r\n                                    name=\"calculationType\"\r\n                                    handleChange={handleFromChange}\r\n                                    selectedValue={postTaxDeductionFormData?.deductionFrequency}\r\n                                // radioStylxe={{ display: \"flex\" }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.isActive\")} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <CustCheckbox\r\n                                    key={\"is_active\"}\r\n                                    id={`is_active`}\r\n                                    // label={\"Active\"}\r\n                                    checked={postTaxDeductionFormData?.is_active}\r\n                                    handleChange={(e) => handleFromChange(e)}\r\n                                    name={\"is_active\"}\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-12 mt-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <div class=\"alert alert-warning\" role=\"alert\">\r\n                                    <b>Note:</b>{t(\"paragraph.postTaxDeduction\")}\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"offcanvas-footer\">\r\n                <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                    <CustomButton\r\n                        text={t(\"btns.submit\")}\r\n                        classNames={\"btn btn-org-gradient\"}\r\n                        handleClick={() => submitPostTaxDeduction()}\r\n                    // isLoading={selectedDeductionData ? updateDeductionPending : createDeductionPending}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddPostTaxDeduction\r\n","\r\nimport React, { useEffect, useState } from 'react'\r\nimport { CustCheckbox, CustomRadio, CustomStrong, Icon, Input, Label } from '../../../commanComponent'\r\nimport { CustomButton, CustomError } from '../../../globalComponents'\r\nimport CustomSelect from '../../../commanComponent/CustomSelect'\r\nimport { useCustomTranslation } from '../../../../translation'\r\nimport { deductionFrequency } from '../../../../utils/Constants.config'\r\n\r\nconst AddPreTaxDeduction = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        openModel,\r\n        handleOpenClose,\r\n        deductionWithData,\r\n        deductionPlanData\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [preTaxDeductionFormData, setPreTaxDeductionFormData] = useState({\r\n\r\n        nameInPayslip: '',\r\n        deductionFrequency: '',\r\n        is_active: true\r\n    })\r\n\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e?.target : { value: e };\r\n\r\n        setPreTaxDeductionFormData(prevState => {\r\n            let updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n            return updatedState;\r\n        });\r\n\r\n        // Clear error for the specific field being changed\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitPreTaxDeduction = async () => {\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n\r\n\r\n    const resetForm = () => {\r\n        setPreTaxDeductionFormData({\r\n            nameInPayslip: '',\r\n            deductionFrequency: '',\r\n            is_active: true\r\n        })\r\n        setErrors({})\r\n    }\r\n\r\n    return (\r\n        <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n            tabIndex={-1}\r\n            style={{\r\n                visibility: openModel ? 'visible' : 'hidden',\r\n                width: \"600px\"\r\n            }}\r\n            id=\"interviewDetail\"\r\n        >\r\n            <div className=\"offcanvas-header\">\r\n                <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">Pre Tax Deduction</h5>\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                    onClick={\r\n                        () => handleOpenClose(\"pre_tax_deduction\")\r\n                    }\r\n                />\r\n            </div>\r\n\r\n            <div className=\"offcanvas-body myRequest \">\r\n                <div className=\"formPanel\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-12\" >\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.deductionPlan\")} required={true} />\r\n                                <CustomSelect\r\n                                    data={deductionPlanData}\r\n                                    placeholder={t(\"placeholders.deductionPlan\")}\r\n                                    value={preTaxDeductionFormData?.deductionPlan || ''}\r\n                                    handleChange={(selectedOption) => handleFromChange(selectedOption, \"deductionPlan\")}\r\n                                    name=\"deductionPlan\"\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-12\" >\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.deductionWith\")} required={true} />\r\n                                <CustomSelect\r\n                                    data={deductionWithData}\r\n                                    placeholder={t(\"placeholders.deductionWith\")}\r\n                                    value={preTaxDeductionFormData?.deductionWith || ''}\r\n                                    handleChange={(selectedOption) => handleFromChange(selectedOption, \"deductionWith\")}\r\n                                    name=\"deductionWith\"\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.nameInPayslip\")} required={true} />\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    placeholder={t(\"placeholders.nameInPayslip\")}\r\n                                    value={preTaxDeductionFormData?.nameInPayslip}\r\n                                    name=\"nameInPayslip\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                                {errors?.nameInPayslip && (\r\n                                    <CustomError text={errors.nameInPayslip} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-12 mt-3 d-flex\">\r\n                            <div className=\"form-group\">\r\n                                <CustCheckbox\r\n                                    key={\"employerContributionCTC\"}\r\n                                    id={`employerContributionCTC`}\r\n                                    checked={preTaxDeductionFormData?.employerContributionCTC}\r\n                                    handleChange={(e) => handleFromChange(e)}\r\n                                    name={\"employerContributionCTC\"}\r\n                                />\r\n\r\n                            </div>\r\n                            <div className=\"form-group \">\r\n                                <CustomStrong text={t(\"labels.employerContributionCTC\")} className=\"text-primary\"/>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"col-md-12 mt-3 d-flex\">\r\n                            <div className=\"form-group\">\r\n                                <CustCheckbox\r\n                                    key={\"calculateProRataBasis\"}\r\n                                    id={`calculateProRataBasis`}\r\n                                    checked={preTaxDeductionFormData?.calculateProRataBasis}\r\n                                    handleChange={(e) => handleFromChange(e)}\r\n                                    name={\"calculateProRataBasis\"}\r\n                                />\r\n\r\n                            </div>\r\n                            <div className=\"form-group \">\r\n                                <CustomStrong text={t(\"labels.calculateProRataBasis\")} className=\"text-primary\"/>\r\n                                <p className='text-secondary'>Pay will be adjusted based on employee working days.</p>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <div className=\"col-md-12 d-flex\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <CustCheckbox\r\n                                    key={\"is_active\"}\r\n                                    id={`is_active`}\r\n                                    checked={preTaxDeductionFormData?.is_active}\r\n                                    handleChange={(e) => handleFromChange(e)}\r\n                                    name={\"is_active\"}\r\n                                />\r\n\r\n                            </div>\r\n                            <div className=\"form-group mb-3\">\r\n                                <CustomStrong text={t(\"labels.isActive\")}  className=\"text-primary\"/>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"offcanvas-footer\">\r\n                <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                    <CustomButton\r\n                        text={t(\"btns.submit\")}\r\n                        classNames={\"btn btn-org-gradient\"}\r\n                        handleClick={() => submitPreTaxDeduction()}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddPreTaxDeduction\r\n","import React, { useEffect, useState } from 'react'\r\nimport CustomCards from '../../reuseableComponents/CustomCards'\r\nimport SalaryComponent from './salaryComponent/SalaryComponent'\r\nimport AddUpdateEarnings from './salaryComponent/AddUpdateEarnings'\r\nimport PaySchedule from './paySchedule/PaySchedule'\r\nimport AddPostTaxDeduction from './salaryComponent/AddPostTaxDeduction'\r\nimport AddPreTaxDeduction from './salaryComponent/AddPreTaxDeduction'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { leaveAction, payrollActions } from '../../../core/resource/actions'\r\n\r\nconst PayrollSetting = () => {\r\n  const [activeCard, setActiveCard] = useState('salary_component')\r\n  const dispatch = useDispatch()\r\n  const {\r\n    addEarningsPending,\r\n    addEarningsRes,\r\n    addEarningsError,\r\n\r\n    updateEarningsPending,\r\n    updateEarningsRes,\r\n    updateEarningsError,\r\n\r\n    getEarningsPending,\r\n    getEarningsRes,\r\n    getEarningsError,\r\n\r\n    addDeductionsPending,\r\n    addDeductionsRes,\r\n    addDeductionsError,\r\n\r\n    updateDeductionsPending,\r\n    updateDeductionsRes,\r\n    updateDeductionsError,\r\n\r\n    getDeductionsPending,\r\n    getDeductionsRes,\r\n    getDeductionsError,\r\n\r\n    addTaxSlabsPending,\r\n    addTaxSlabsRes,\r\n    addTaxSlabsError,\r\n\r\n\r\n    getAllEarningTypePending,\r\n    getAllEarningTypeRes,\r\n    getAllEarningTypeError,\r\n\r\n    getAllDeductionTypePending,\r\n    getAllDeductionTypeRes,\r\n    getAllDeductionTypeError,\r\n\r\n    getEarningTypeByIdPending,\r\n    getEarningTypeByIdRes,\r\n    getEarningTypeByIdError,\r\n  } = useSelector(state => state.payroll)\r\n  const {\r\n    getLeaveConstantDataPending,\r\n    getLeaveConstantDataRes,\r\n    getLeaveConstantDataError,\r\n  } = useSelector(state => state.leave)\r\n\r\n  const [isOpenAddUpEarningModal, setIsOpenAddUpEarningModal] = useState(false)\r\n  const [isOpenAddPostTaxDeductionModal, setIsOpenAddPostTaxDeductionModal] = useState(false)\r\n  const [isOpenAddPreTaxDeductionModal, setIsOpenAddPreTaxDeductionModal] = useState(false)\r\n  const [currentPage, setCurrentPage] = useState('')\r\n  const [allDeductionTypeData, setAllDeductionTypeData] = useState('')\r\n  const [allEarningTypeData, setAllEarningTypeData] = useState('')\r\n  const [earningTypeByIdData, setEarningTypeByIdData] = useState('')\r\n  const [allLeaveConstantData, setAllLeaveConstantData] = useState('')\r\n  const [earningData, setEarningData] = useState('')\r\n  const [isOpenModalType, setIsOpenModalType] = useState('earnings')\r\n  const [deductionsData, setDeductionsData] = useState('earnings')\r\n  const [earningDeductionSelectedData, setEarningDeductionSelectedData] = useState('')\r\n\r\n  const payrollSettingCard = [\r\n    {\r\n      name: \"Salary Component\",\r\n      imgUrl: \"images/applyleavesIcon.svg\",\r\n      onClickFunc: (id) => handleActiveTab(id),\r\n      id: \"salary_component\"\r\n    },\r\n    {\r\n      name: \"Pay Schedule\",\r\n      imgUrl: \"images/bonus-icon.svg\",\r\n      onClickFunc: (id) => handleActiveTab(id),\r\n      id: \"pay_schedule\"\r\n    },\r\n    {\r\n      name: \"IT Declaration\",\r\n      imgUrl: \"images/attendancelogIcon.svg\",\r\n      onClickFunc: (id) => handleActiveTab(id),\r\n      id: \"it_declaration\"\r\n    },\r\n  ]\r\n  const handleActiveTab = (type) => {\r\n    setActiveCard(type)\r\n  }\r\n\r\n  const handleToggleModals = (type, data) => {\r\n    if (type === \"add_earnings\") {\r\n      if (data) {\r\n        setEarningDeductionSelectedData(data)\r\n      } else {\r\n        setEarningDeductionSelectedData('')\r\n      }\r\n      setIsOpenAddUpEarningModal(!isOpenAddUpEarningModal)\r\n      setIsOpenModalType(\"earnings\")\r\n    }\r\n    else if (type === \"deduction\") {\r\n      if (data) {\r\n        setEarningDeductionSelectedData(data)\r\n      }\r\n      else {\r\n        setEarningDeductionSelectedData('')\r\n      }\r\n      setIsOpenAddUpEarningModal(!isOpenAddUpEarningModal)\r\n      setIsOpenModalType(\"deduction\")\r\n    }\r\n    else if (type === \"post_tax_deduction\") {\r\n      setIsOpenAddPostTaxDeductionModal(!isOpenAddPostTaxDeductionModal)\r\n    }\r\n    else if (type === \"pre_tax_deduction\") {\r\n      setIsOpenAddPreTaxDeductionModal(!isOpenAddPreTaxDeductionModal)\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  /* Add Earning  */\r\n  const addEarnings = (payload) => {\r\n    dispatch(payrollActions.addEarningsRequest(payload))\r\n  }\r\n  useEffect(() => {\r\n    if (!addEarningsPending) {\r\n      if (addEarningsError) {\r\n        dispatch(payrollActions.handleClearPayrollStore(\"HANDLE_CLEAR_ADD_EARNING_STORE\"))\r\n        return;\r\n      }\r\n      if (addEarningsRes) {\r\n        if (addEarningsRes?.code === 200) {\r\n          getEarnings()\r\n          handleToggleModals(\"add_earnings\")\r\n          dispatch(payrollActions.handleClearPayrollStore(\"HANDLE_CLEAR_ADD_EARNING_STORE\"))\r\n\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    addEarningsRes,\r\n    addEarningsError,\r\n    addEarningsPending\r\n  ]);\r\n\r\n  /* Update Earning  */\r\n  const updateEarnings = (payload) => {\r\n    dispatch(payrollActions.updateEarningsRequest(payload))\r\n  }\r\n  useEffect(() => {\r\n    if (!updateEarningsPending) {\r\n      if (updateEarningsError) {\r\n        dispatch(payrollActions.handleClearPayrollStore(\"HANDLE_CLEAR_UPDATE_EARNING_STORE\"))\r\n        return;\r\n      }\r\n      if (updateEarningsRes) {\r\n        if (updateEarningsRes?.code === 200) {\r\n          getEarnings()\r\n          setEarningDeductionSelectedData('')\r\n          handleToggleModals(\"add_earnings\")\r\n          dispatch(payrollActions.handleClearPayrollStore(\"HANDLE_CLEAR_UPDATE_EARNING_STORE\"))\r\n\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    updateEarningsRes,\r\n    updateEarningsError,\r\n    updateEarningsPending\r\n  ]);\r\n\r\n\r\n\r\n\r\n  /* update Deduction Types */\r\n  const updateDeductions = (payload) => {\r\n    dispatch(payrollActions.updateDeductionsRequest(payload))\r\n  }\r\n  useEffect(() => {\r\n    if (!updateDeductionsPending) {\r\n      if (updateDeductionsError) {\r\n        dispatch(payrollActions.handleClearPayrollStore(\"HANDLE_CLEAR_UPDATE_DEDUCTIONS_STORE\"))\r\n        return;\r\n      }\r\n      if (updateDeductionsRes) {\r\n        if (updateDeductionsRes?.code === 200) {\r\n          handleToggleModals(\"deduction\")\r\n          setEarningDeductionSelectedData('')\r\n          dispatch(payrollActions.handleClearPayrollStore(\"HANDLE_CLEAR_UPDATE_DEDUCTIONS_STORE\"))\r\n\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    updateDeductionsRes,\r\n    updateDeductionsError,\r\n    updateDeductionsPending\r\n  ]);\r\n\r\n  /* Add Deduction Types */\r\n  const addDeductions = (payload) => {\r\n    dispatch(payrollActions.addDeductionsRequest(payload))\r\n  }\r\n  useEffect(() => {\r\n    if (!addDeductionsPending) {\r\n      if (addDeductionsError) {\r\n        dispatch(payrollActions.handleClearPayrollStore(\"HANDLE_CLEAR_ADD_DEDUCTIONS_STORE\"))\r\n        return;\r\n      }\r\n      if (addDeductionsRes) {\r\n        if (addDeductionsRes?.code === 200) {\r\n          handleToggleModals(\"deduction\")\r\n          dispatch(payrollActions.handleClearPayrollStore(\"HANDLE_CLEAR_ADD_DEDUCTIONS_STORE\"))\r\n\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    addDeductionsRes,\r\n    addDeductionsError,\r\n    addDeductionsPending\r\n  ]);\r\n\r\n  useEffect(() => {\r\n\r\n    getLeaveConstantData()\r\n    getAllEarningType()\r\n    getEarnings()\r\n    getDeductions()\r\n    getAllDeductionType()\r\n  }, [])\r\n\r\n\r\n  /* Get Leave Constant Data */\r\n  const getLeaveConstantData = (params) => {\r\n    dispatch(leaveAction.getLeaveConstantDataRequest(params));\r\n  }\r\n  useEffect(() => {\r\n    if (!getLeaveConstantDataPending) {\r\n      if (getLeaveConstantDataError) {\r\n        return;\r\n      }\r\n      if (getLeaveConstantDataRes) {\r\n        if (getLeaveConstantDataRes?.code === 200) {\r\n          const getLeaveConstantData = getLeaveConstantDataRes?.data\r\n          setAllLeaveConstantData(getLeaveConstantData)\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    getLeaveConstantDataRes,\r\n    getLeaveConstantDataError,\r\n    getLeaveConstantDataPending\r\n  ]);\r\n\r\n  /* Get All Earning Type Data */\r\n  const getAllEarningType = () => {\r\n    dispatch(payrollActions.getAllEarningTypeRequest());\r\n  }\r\n  useEffect(() => {\r\n    if (!getAllEarningTypePending) {\r\n      if (getAllEarningTypeError) {\r\n        return;\r\n      }\r\n      if (getAllEarningTypeRes) {\r\n        if (getAllEarningTypeRes?.code === 200) {\r\n          const getAllEarningTypeResData = getAllEarningTypeRes?.data\r\n          setAllEarningTypeData(getAllEarningTypeResData)\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    getAllEarningTypeRes,\r\n    getAllEarningTypeError,\r\n    getAllEarningTypePending\r\n  ]);\r\n\r\n  /* Get All Deduction Type Data */\r\n  const getAllDeductionType = () => {\r\n    dispatch(payrollActions.getAllDeductionTypeRequest());\r\n  }\r\n  useEffect(() => {\r\n    if (!getAllDeductionTypePending) {\r\n      if (getAllDeductionTypeError) {\r\n        return;\r\n      }\r\n      if (getAllDeductionTypeRes) {\r\n        if (getAllDeductionTypeRes?.code === 200) {\r\n          const getAllDeductionTypeResData = getAllDeductionTypeRes?.data\r\n          setAllDeductionTypeData(getAllDeductionTypeResData)\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    getAllDeductionTypeRes,\r\n    getAllDeductionTypeError,\r\n    getAllDeductionTypePending\r\n  ]);\r\n\r\n\r\n  /* Get All Earning Type Data */\r\n  const getEarningTypeById = (id) => {\r\n    dispatch(payrollActions.getEarningTypeByIdRequest({\r\n      id\r\n    }));\r\n  }\r\n  useEffect(() => {\r\n    if (!getEarningTypeByIdPending) {\r\n      if (getEarningTypeByIdError) {\r\n        return;\r\n      }\r\n      if (getEarningTypeByIdRes) {\r\n        if (getEarningTypeByIdRes?.code === 200) {\r\n          const getEarningTypeByIdResData = getEarningTypeByIdRes?.data\r\n          setEarningTypeByIdData(getEarningTypeByIdResData)\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    getAllEarningTypeRes,\r\n    getEarningTypeByIdError,\r\n    getEarningTypeByIdPending\r\n  ]);\r\n\r\n\r\n  /* Get All Earning Type Data */\r\n  const getEarnings = (id) => {\r\n    dispatch(payrollActions.getEarningsRequest());\r\n  }\r\n  useEffect(() => {\r\n    if (!getEarningsPending) {\r\n      if (getEarningsError) {\r\n        return;\r\n      }\r\n      if (getEarningsRes) {\r\n        if (getEarningsRes?.code === 200) {\r\n          const getEarningsResData = getEarningsRes?.data\r\n          setEarningData(getEarningsResData)\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    getAllEarningTypeRes,\r\n    getEarningsError,\r\n    getEarningsPending\r\n  ]);\r\n\r\n\r\n  /* Get Deductions Data */\r\n  const getDeductions = (id) => {\r\n    dispatch(payrollActions.getDeductionsRequest());\r\n  }\r\n  useEffect(() => {\r\n    if (!getDeductionsPending) {\r\n      if (getDeductionsError) {\r\n        return;\r\n      }\r\n      if (getDeductionsRes) {\r\n        if (getDeductionsRes?.code === 200) {\r\n          const getDeductionsResData = getDeductionsRes?.data\r\n          setDeductionsData(getDeductionsResData)\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    getDeductionsRes,\r\n    getDeductionsError,\r\n    getDeductionsPending\r\n  ]);\r\n\r\n  return (\r\n    <>\r\n      <CustomCards cardData={payrollSettingCard} />\r\n      {activeCard === \"salary_component\" &&\r\n        <div>\r\n          <SalaryComponent\r\n            handleToggleModals={handleToggleModals}\r\n            earningData={earningData}\r\n            deductionsData={deductionsData}\r\n\r\n          />\r\n        </div>\r\n      }\r\n      {activeCard === \"pay_schedule\" &&\r\n        <div className=\"cardBox myRequest mb-3 employeeHistory\">\r\n          <PaySchedule\r\n          // toggleEarningTypeModal={toggleEarningTypeModal}\r\n          />\r\n        </div>\r\n      }\r\n\r\n      {isOpenAddUpEarningModal && <AddUpdateEarnings\r\n        openModel={isOpenAddUpEarningModal}\r\n        handleOpenClose={handleToggleModals}\r\n        addEarnings={addEarnings}\r\n        allLeaveConstantData={allLeaveConstantData}\r\n        allEarningTypeData={allEarningTypeData}\r\n        allDeductionTypeData={allDeductionTypeData}\r\n        getEarningTypeById={getEarningTypeById}\r\n        isOpenModalType={isOpenModalType}\r\n        addDeductions={addDeductions}\r\n        earningDeductionSelectedData={earningDeductionSelectedData}\r\n        updateEarnings={updateEarnings}\r\n        updateDeductions={updateDeductions}\r\n        earningTypeByIdData={earningTypeByIdData}\r\n      />}\r\n      {isOpenAddPreTaxDeductionModal && <AddPreTaxDeduction\r\n        openModel={isOpenAddPreTaxDeductionModal}\r\n        handleOpenClose={handleToggleModals}\r\n      />}\r\n      {isOpenAddPostTaxDeductionModal && <AddPostTaxDeduction\r\n        openModel={isOpenAddPostTaxDeductionModal}\r\n        handleOpenClose={handleToggleModals}\r\n      />}\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PayrollSetting\r\n"],"names":["_ref","cardData","_jsx","_Fragment","children","className","length","map","card","onClick","onClickFunc","id","_jsxs","src","imgUrl","alt","width","name","props","currentPage","setCurrentPage","earningData","handleToggleModals","earningScopedSlots","useMemo","sn","_","index","is_active","item","getBadgeColor","action","type","CustomTable","data","fields","key","label","pagination","totalPages","isHeader","tableStyle","padding","boxShadow","scopedSlots","deductionsData","deductionScopedSlots","include_in_ctc","tableTabsRequest","onClickFun","getSalaryData","CustomTabs","tabs","EarningsTable","DeductionsTable","earningRuleData","deleteEarningRule","editEarningRule","rules","earningRuleScopedSlots","style","cursor","Icon","border","useDispatch","getAllEarningTypeRes","useSelector","state","payroll","toggleEarningRulesFormula","allLeaveConstantData","setEarningRulesData","t","useCustomTranslation","earningRules","setEarningRules","useState","brackets","earningType","operators","validDescription","setValidDescription","isFillDesc","setIsFillDesc","handleFromChange","e","fieldName","value","prevState","backgroundColor","Label","text","CustomSelect","placeholder","handleChange","selectedOption","CustomButton","classNames","handleClick","onAddFormulaField","addFormulaFields","prev","Textarea","onChange","target","CustomError","pre","alertLabel","role","setRules","errors","setErrors","isOpenERF","setIsOpenERF","setEarningRuleData","selectedIndex","setSelectedIndex","from","to","amount","_e$target","checked","prevErrors","undefined","resetEarningRulesFields","useEffect","EarningRulesTable","filter","ind","CustomStrong","required","Input","fontSize","EarningRulesFormula","CustomAlert","styles","minWidth","submitEarningRules","updatedRuleData","rule","earningTypeData","earning_type_name","isDisabled","CustomRadio","yesNoOptions","selectedValue","calculation_type","yesNoFlexOptions","is_pro_rata","can_include_as_fbp","is_included_in_epf","is_included_in_esi","show_in_payslip","CustCheckbox","_checkCalculationType","_checkCalculationType2","dispatch","getEarningTypeByIdRes","addEarningsPending","updateEarningsPending","earningDeductionSelectedData","openModel","handleOpenClose","allEarningTypeData","addEarnings","getEarningTypeById","isOpenModalType","addDeductions","updateEarnings","updateDeductions","earningTypeByIdData","allDeductionTypeData","createUpdateEarningsFormData","setCreateUpdateEarningsFormData","nameInPayslip","calculationType","calculationTypeValue","variablePay","includedCTC","taxableComp","isActive","updatedState","_id","resetForm","earning_type","payslip_name","value_in","is_variable_pay","is_taxable","payrollActions","handleClearPayrollStore","earningTabs","onTabChange","deductionTabs","checkCalculationType","tabIndex","visibility","borderBottom","calculationTypeOptions","maxAllowance","EarningRules","ViewsEarningTypes","async","_createUpdateEarnings","payload","is_optional","max_allowance","submitCreateUpdateEarnings","toggleAddArrearsModal","arrearsEmployeeScopedSlots","fontWeight","borderRadius","paddingTop","paddingLeft","postTaxDeductionFormData","setPostTaxDeductionFormData","deductionFrequency","class","submitPostTaxDeduction","deductionWithData","deductionPlanData","preTaxDeductionFormData","setPreTaxDeductionFormData","deductionPlan","deductionWith","employerContributionCTC","calculateProRataBasis","submitPreTaxDeduction","PayrollSetting","activeCard","setActiveCard","addEarningsRes","addEarningsError","updateEarningsRes","updateEarningsError","getEarningsPending","getEarningsRes","getEarningsError","addDeductionsPending","addDeductionsRes","addDeductionsError","updateDeductionsPending","updateDeductionsRes","updateDeductionsError","getDeductionsPending","getDeductionsRes","getDeductionsError","addTaxSlabsPending","addTaxSlabsRes","addTaxSlabsError","getAllEarningTypePending","getAllEarningTypeError","getAllDeductionTypePending","getAllDeductionTypeRes","getAllDeductionTypeError","getEarningTypeByIdPending","getEarningTypeByIdError","getLeaveConstantDataPending","getLeaveConstantDataRes","getLeaveConstantDataError","leave","isOpenAddUpEarningModal","setIsOpenAddUpEarningModal","isOpenAddPostTaxDeductionModal","setIsOpenAddPostTaxDeductionModal","isOpenAddPreTaxDeductionModal","setIsOpenAddPreTaxDeductionModal","setAllDeductionTypeData","setAllEarningTypeData","setEarningTypeByIdData","setAllLeaveConstantData","setEarningData","setIsOpenModalType","setDeductionsData","setEarningDeductionSelectedData","payrollSettingCard","handleActiveTab","code","getEarnings","getLeaveConstantData","getAllEarningType","getDeductions","getAllDeductionType","params","leaveAction","getLeaveConstantDataRequest","getAllEarningTypeRequest","getAllEarningTypeResData","getAllDeductionTypeRequest","getAllDeductionTypeResData","getEarningTypeByIdResData","getEarningsRequest","getEarningsResData","getDeductionsRequest","getDeductionsResData","CustomCards","SalaryComponent","PaySchedule","AddUpdateEarnings","addEarningsRequest","getEarningTypeByIdRequest","addDeductionsRequest","updateEarningsRequest","updateDeductionsRequest","AddPreTaxDeduction","AddPostTaxDeduction"],"sourceRoot":""}