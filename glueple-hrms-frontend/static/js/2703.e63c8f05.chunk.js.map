{"version":3,"file":"static/js/2703.e63c8f05.chunk.js","mappings":"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","sources":["components/payrollAdmin/payRuns/regularPayroll/RegularPayRollCard.js","components/payrollAdmin/payRuns/regularPayroll/RegularPayRollTable.js","components/payrollAdmin/payRuns/regularPayroll/RegularPayRoll.js"],"sourcesContent":["import React from 'react'\r\nimport { dateFormate } from '../../../../utils/common'\r\nimport { CustomButton } from '../../../globalComponents'\r\n\r\nconst RegularPayRollCard = (props) => {\r\n    const { payRunDashboardData } = props\r\n    return (\r\n        <>\r\n            <div class=\"cardBox mypayroll mb-3\">\r\n                \r\n                <div className=\"row \">\r\n                    <div className=\"col-md-3 d-flex flex-wrap\">\r\n                        <h2 className=\"w-100\"><span>Regular</span> Payroll</h2>\r\n                        <figure className=\"rupeeImageGroup mt-auto\">\r\n                            <img src=\"images/rupeeBg.svg\" alt=\"\" width={130} />\r\n                            {/* <lottie-player src=\"images/rupee.json\" background=\"transparent\" speed={1} style={{ width: '65px', height: '65px' }} loop autoPlay /> */}\r\n                        </figure>\r\n                    </div>\r\n                    <div className=\"col-md-9\">\r\n                        <div className=\"row px-md-1\">\r\n                            <div className=\"col-md-4 px-md-2 my-2\">\r\n                                <div className=\"pyrollTxt\">\r\n                                    <div className=\"d-flex justify-content-between\">\r\n                                        <figure>\r\n                                            <img src=\"images/pay-days-icon.svg\" alt=\"\" width={35} />\r\n                                        </figure>\r\n                                        <span>Pay Month</span>\r\n                                    </div>\r\n                                    <div className>\r\n                                        <strong>{dateFormate(payRunDashboardData?.year_month, \"MMM YYYY\")}</strong>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-4 px-md-2 my-2\">\r\n                                <div className=\"pyrollTxt\">\r\n                                    <div className=\"d-flex justify-content-between\">\r\n                                        <figure><img src=\"images/present-days-icon.svg\" alt=\"\" width={35} /></figure>\r\n                                        <span>Employees</span>\r\n                                    </div>\r\n                                    <div className>\r\n                                        <strong>{payRunDashboardData?.total_employees}</strong>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-4 px-md-2 my-2\">\r\n                                <div className=\"pyrollTxt\">\r\n                                    <div className=\"d-flex justify-content-between\">\r\n                                        <figure><img src=\"images/bonus-icon.svg\" alt=\"\" width={35} /></figure>\r\n                                        <span>Employees Net Pays</span>\r\n                                    </div>\r\n                                    <div className>\r\n                                        <strong>Rs <b>\r\n                                            {payRunDashboardData?.total_net_pay}\r\n                                        </b>\r\n                                        </strong>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-4 px-md-2 my-2\">\r\n                                <div className=\"pyrollTxt\">\r\n                                    <div className=\"d-flex justify-content-between\">\r\n                                        <figure> <img src=\"images/bonus-icon.svg\" alt=\"\" width={35} /></figure>\r\n                                        <span>Payroll Cost</span>\r\n                                    </div>\r\n                                    <div className>\r\n                                        <strong>Rs <b> {payRunDashboardData?.payroll_cost}</b></strong>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-4 px-md-2 my-2\">\r\n                                <div className=\"pyrollTxt\">\r\n                                    <div className=\"d-flex justify-content-between\">\r\n                                        <figure><img src=\"images/bonus-icon.svg\" alt=\"\" width={35} /></figure>\r\n                                        <span>Hold Payroll Cost</span>\r\n                                    </div>\r\n                                    <div className=\"\">\r\n                                        {/* <button type=\"button\" className=\"viewBtn\"><i className=\"bi bi-eye\" /></button> */}\r\n                                        <strong>Rs <b>{payRunDashboardData?.hold_payroll_cost}</b></strong>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-4 px-md-2 my-2\">\r\n                                <div className=\"pyrollTxt\">\r\n                                    <div className=\"d-flex justify-content-between\">\r\n                                        <figure><img src=\"images/paymonth-icon.svg\" alt=\"\" width={35} /></figure>\r\n                                        <span>Hold Employee Net Pay</span>\r\n                                    </div>\r\n                                    <div className=\"\">\r\n                                        {/* <button type=\"button\" className=\"viewBtn\"><i className=\"bi bi-eye\" /></button> */}\r\n                                        <div>\r\n\r\n                                            <strong>Rs <b>{payRunDashboardData?.hold_net_pay}</b></strong>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RegularPayRollCard\r\n","import React, { useMemo, useState } from 'react'\r\nimport { CustomTable } from '../../../reuseableComponents';\r\nimport { CustCheckbox } from '../../../commanComponent';\r\n\r\nconst RegularPayRollTable = (props) => {\r\n    const { payRunData,currentPage,setCurrentPage ,isLoading,handleViewSalarySlip,handleUpdateEmployeeSalarySlip} = props\r\n    const payrollTableFields = [\r\n        { key: \"sn\", label: \"SN\" },\r\n        // { key: \"checkRegularPayroll\", label: \"select\" },\r\n        { key: \"employee_name\", label: \"Employee Name\" },\r\n        { key: \"emp_code\", label: \"Employee Code\" },\r\n        { key: \"paid_days\", label: \"Present Days\" },\r\n        { key: \"arrear_day\", label: \"Arrear Day\" },\r\n        { key: \"is_hold\", label: \"Is Hold\" },\r\n        { key: \"total_earnings\", label: \"Total Earning\" },\r\n        { key: \"total_deductions\", label: \"Total Deductions\" },\r\n        { key: \"net_pay\", label: \"Total pay\" },\r\n        { key: 'action', label: 'Action' }\r\n\r\n        \r\n    ];\r\n\r\n    const loanScopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        action: item => (\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleViewSalarySlip(item, 'download')}\r\n                        >\r\n                            View Salary Slip</span>\r\n                    </li>\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleViewSalarySlip(item, 'email')}\r\n                        >\r\n                            Email Salary Slip</span>\r\n                    </li>\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleUpdateEmployeeSalarySlip(item)}\r\n                        >\r\n                            Update Salary Slip</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        )\r\n        // checkRegularPayroll: () => (\r\n        //     <span>\r\n\r\n        //         <CustCheckbox\r\n        //             key={\"checkRegularPayroll\"}\r\n        //             id={`checkRegularPayroll`}\r\n        //             // checked={isActive}\r\n        //             // handleChange={(e) => setIsActive(!isActive)}\r\n        //             name={\"checkRegularPayroll\"}\r\n        //         />\r\n        //     </span>\r\n        // )\r\n\r\n\r\n\r\n    }), [payRunData])\r\n// console.log(payRunData?.data,\"payRunData---------\")\r\n    return (\r\n        <>\r\n        {/* <CustCheckbox\r\n            key={\"checkRegularPayroll\"}\r\n            id={`checkRegularPayroll`}\r\n            label={\"Select All\"}\r\n            // checked={isActive}\r\n            // handleChange={(e) => setIsActive(!isActive)}\r\n            name={\"checkRegularPayroll\"}\r\n            labelClass={\"text-primary \"}\r\n        /> */}\r\n            <CustomTable\r\n                data={payRunData &&payRunData?.data}\r\n                fields={payrollTableFields}\r\n                isLoading={isLoading}\r\n                pagination={true}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                totalPages={payRunData?.totalPages}\r\n                // tableName={\"\"}\r\n                // onSearch={handleSearch}\r\n                isHeader={false}\r\n                tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n                scopedSlots={loanScopedSlots}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RegularPayRollTable","import React, { useEffect, useState } from 'react'\r\nimport RegularPayRollCard from './RegularPayRollCard'\r\nimport { CustomTabs } from '../../../reuseableComponents';\r\nimport RegularPayRollTable from './RegularPayRollTable';\r\nimport { CustomButton, CustomSpinner } from '../../../globalComponents';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { payrollActions } from '../../../../core/resource/actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { dateFormate } from '../../../../utils/common';\r\nimport BackIcon from '../../../commanComponent/BackIcon';\r\nimport { pagination } from '../../../../utils/Constants.config';\r\nimport { ControlPosition } from '@vis.gl/react-google-maps';\r\nimport CreateUpdateSalaryTemplate from '../../salaryTemplate/CreateUpdateSalaryTemplate';\r\n\r\nconst RegularPayRoll = () => {\r\n  const { payMonth } = useParams()\r\n  const dispatch = useDispatch()\r\n  const {\r\n    getPayRunPending,\r\n    getPayRunRes,\r\n    getPayRunError,\r\n\r\n    getPayRunDashboardDataPending,\r\n    getPayRunDashboardDataRes,\r\n    getPayRunDashboardDataError,\r\n\r\n    approvePayrollPending,\r\n    approvePayrollRes,\r\n    approvePayrollError,\r\n\r\n    getEmployeeMonthlySalaryPending,\r\n    getEmployeeMonthlySalaryRes,\r\n    getEmployeeMonthlySalaryError,\r\n\r\n    generateSalarySlipPending,\r\n    generateSalarySlipRes,\r\n    generateSalarySlipError,\r\n\r\n  } = useSelector(state => state.payroll)\r\n  const [payRunData, setPayRunData] = useState('')\r\n  const [payRunDashboardData, setPayRunDashboardData] = useState('')\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [getEmployeeMonthlySalary, setEmployeeMonthlySalary] = useState()\r\n  const [openSalaryModel, setOpenSalaryModel] = useState(false)\r\n  console.log(\"hello getEmployeeMonthlySalary\", getEmployeeMonthlySalary)\r\n\r\n\r\n  useEffect(() => {\r\n    if (payMonth && currentPage) {\r\n      const payload = {\r\n        month: dateFormate(payMonth, \"YYYY-MM\"),\r\n        page: currentPage,\r\n        limit: pagination.limit\r\n      }\r\n      getPayRunData(payload)\r\n    }\r\n  }, [payMonth, currentPage])\r\n  useEffect(() => {\r\n    if (payMonth) {\r\n      const payload = {\r\n        month: dateFormate(payMonth, \"YYYY-MM\")\r\n      }\r\n      getPayRunDashboardData(payload)\r\n    }\r\n  }, [payMonth])\r\n  /* Get Pay Run Data */\r\n  const getPayRunData = (payload) => {\r\n    dispatch(payrollActions.getPayRunRequest(payload))\r\n  }\r\n  useEffect(() => {\r\n    if (!getPayRunPending) {\r\n      if (getPayRunError) {\r\n        return;\r\n      }\r\n      if (getPayRunRes) {\r\n        if (getPayRunRes?.code === 200) {\r\n          setPayRunData(getPayRunRes?.data)\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    getPayRunRes,\r\n    getPayRunError,\r\n    getPayRunPending\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (!getEmployeeMonthlySalaryPending) {\r\n      if (getEmployeeMonthlySalaryError) {\r\n        return;\r\n      }\r\n      if (getEmployeeMonthlySalaryRes) {\r\n        if (getEmployeeMonthlySalaryRes?.code === 200) {\r\n          setEmployeeMonthlySalary(getEmployeeMonthlySalaryRes?.data)\r\n          dispatch(payrollActions.handleClearPayrollStore(\"HANDLE_CLEAR_EMPLOYEE_MONTHLY_SALARY_STORE\"))\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    getEmployeeMonthlySalaryRes,\r\n    getEmployeeMonthlySalaryError,\r\n    getEmployeeMonthlySalaryPending\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (!generateSalarySlipPending) {\r\n      if (generateSalarySlipError) {\r\n        return;\r\n      }\r\n      if (generateSalarySlipRes) {\r\n        if (generateSalarySlipRes?.code === 200) {\r\n          setEmployeeMonthlySalary(generateSalarySlipRes?.data)\r\n          window.open(generateSalarySlipRes?.data?.filePath, '_blank')\r\n          dispatch(payrollActions.handleClearPayrollStore(\"HANDLE_CLEAR_GENERATE_SALARY_SLIP_STORE\"))\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    generateSalarySlipPending,\r\n    generateSalarySlipRes,\r\n    generateSalarySlipError,\r\n  ]);\r\n\r\n\r\n  /* Get Pay Run Data */\r\n  const getPayRunDashboardData = (payload) => {\r\n    dispatch(payrollActions.getPayRunDashboardDataRequest(payload))\r\n  }\r\n  useEffect(() => {\r\n    if (!getPayRunDashboardDataPending) {\r\n      if (getPayRunDashboardDataError) {\r\n        return;\r\n      }\r\n      if (getPayRunDashboardDataRes) {\r\n        if (getPayRunDashboardDataRes?.code === 200) {\r\n          setPayRunDashboardData(getPayRunDashboardDataRes?.data)\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    getPayRunDashboardDataRes,\r\n    getPayRunDashboardDataError,\r\n    getPayRunDashboardDataPending\r\n  ]);\r\n\r\n  /* Get Pay Run Data */\r\n  const approvePayroll = () => {\r\n    const {\r\n      payroll_cost,\r\n      total_net_pay,\r\n      tex,\r\n      pre_tex_deduction,\r\n      pay_date,\r\n      year_month,\r\n      total_employees,\r\n    }=payRunDashboardData\r\n    const payload ={\r\n      payroll_cost,\r\n      payroll_netPay:total_net_pay,\r\n      tex:tex||0,\r\n      pre_tex_deduction:0,\r\n      employee_no:total_employees,\r\n      pay_date:'',\r\n      pay_month:year_month,\r\n      status:true\r\n    }\r\n    dispatch(payrollActions.approvePayrollRequest(payload))\r\n  }\r\n  useEffect(() => {\r\n    if (!approvePayrollPending) {\r\n      if (approvePayrollError) {\r\n        return;\r\n      }\r\n      if (approvePayrollRes) {\r\n        if (approvePayrollRes?.code === 200) {\r\n          setPayRunDashboardData(approvePayrollRes?.data)\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    approvePayrollRes,\r\n    approvePayrollError,\r\n    approvePayrollPending\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (!approvePayrollPending) {\r\n      if (approvePayrollError) {\r\n        return;\r\n      }\r\n      if (approvePayrollRes) {\r\n        if (approvePayrollRes?.code === 200) {\r\n          setPayRunDashboardData(approvePayrollRes?.data)\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    approvePayrollRes,\r\n    approvePayrollError,\r\n    approvePayrollPending\r\n  ]);\r\n\r\n  const handleViewSalarySlip = (data,type)=>{\r\n    let payload = {\r\n      employee_id:data.employee_id,\r\n      month:data.year_mon,\r\n      type:type\r\n    }\r\n    dispatch(payrollActions.generateSalarySlipRequest(payload))\r\n  }\r\n\r\n  const handleUpdateEmployeeSalarySlip =(data)=>{\r\n    let payload = {\r\n      employee_id:data.employee_id,\r\n      month:data.year_mon\r\n    }\r\n    dispatch(payrollActions.getEmployeeMonthlySalaryRequest(payload))\r\n    setOpenSalaryModel(true)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <RegularPayRollCard\r\n        payRunDashboardData={payRunDashboardData}\r\n      />\r\n      <div className='cardBox'>\r\n        <div className=\"cardHead d-flex justify-content-between\">\r\n          <div className=\"d-flex align-items-center\">\r\n            <Link to={\"/pay-runs\"} ><BackIcon /></Link>\r\n            <div className=\"\">\r\n              <h3> Home</h3>\r\n            </div>\r\n          </div>\r\n          <div className=\"searchB me-0 \">\r\n            <CustomButton\r\n              classNames={\"btn btn-primary gradientBg\"}\r\n              // handleClick={() => toggleCreateUpdateHierarchyModal()}\r\n              text={\"Send Salary Slip To Selected\"}\r\n              icon={<i class=\"fa fa-envelope mt-1\" aria-hidden=\"true\"></i>}\r\n            />\r\n          </div>\r\n        </div>\r\n        <RegularPayRollTable\r\n          payRunData={payRunData}\r\n          currentPage={currentPage}\r\n          setCurrentPage={setCurrentPage}\r\n          isLoading={getPayRunPending}\r\n          handleViewSalarySlip={handleViewSalarySlip}\r\n          handleUpdateEmployeeSalarySlip={handleUpdateEmployeeSalarySlip}\r\n        />\r\n        <div className='d-flex justify-content-end'>\r\n            <CustomButton\r\n              isLoading={approvePayrollPending}\r\n              classNames={\"btn btn-primary gradientBg\"}\r\n              handleClick={() => approvePayroll()}\r\n              text={\"Approve Payroll\"}\r\n              icon={<i class=\"fa fa-check mt-1\" aria-hidden=\"true\"></i>}\r\n            />\r\n        </div>\r\n      </div>\r\n      {openSalaryModel && \r\n      <CreateUpdateSalaryTemplate \r\n      selectedSalaryTemplate ={getEmployeeMonthlySalary[0]}\r\n      employeeID={getEmployeeMonthlySalary[0]?.employee_id}\r\n      salaryUpdate={true}/>\r\n      }\r\n      {generateSalarySlipPending && \r\n      <CustomSpinner \r\n      isShow={generateSalarySlipPending}\r\n      size=\"lg\"\r\n      />\r\n    }\r\n      \r\n\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default RegularPayRoll\r\n"],"names":["props","payRunDashboardData","_jsx","_Fragment","children","class","_jsxs","className","src","alt","width","dateFormate","year_month","total_employees","total_net_pay","payroll_cost","hold_payroll_cost","hold_net_pay","payRunData","currentPage","setCurrentPage","isLoading","handleViewSalarySlip","handleUpdateEmployeeSalarySlip","loanScopedSlots","useMemo","sn","_","index","action","item","type","onClick","CustomTable","data","fields","key","label","pagination","totalPages","isHeader","tableStyle","padding","boxShadow","scopedSlots","RegularPayRoll","_getEmployeeMonthlySa","payMonth","useParams","dispatch","useDispatch","getPayRunPending","getPayRunRes","getPayRunError","getPayRunDashboardDataPending","getPayRunDashboardDataRes","getPayRunDashboardDataError","approvePayrollPending","approvePayrollRes","approvePayrollError","getEmployeeMonthlySalaryPending","getEmployeeMonthlySalaryRes","getEmployeeMonthlySalaryError","generateSalarySlipPending","generateSalarySlipRes","generateSalarySlipError","useSelector","state","payroll","setPayRunData","useState","setPayRunDashboardData","getEmployeeMonthlySalary","setEmployeeMonthlySalary","openSalaryModel","setOpenSalaryModel","console","log","useEffect","payload","month","page","limit","getPayRunData","getPayRunDashboardData","payrollActions","getPayRunRequest","code","handleClearPayrollStore","_generateSalarySlipRe","window","open","filePath","getPayRunDashboardDataRequest","RegularPayRollCard","Link","to","BackIcon","CustomButton","classNames","text","icon","RegularPayRollTable","employee_id","year_mon","generateSalarySlipRequest","getEmployeeMonthlySalaryRequest","handleClick","approvePayroll","tex","pre_tex_deduction","pay_date","payroll_netPay","employee_no","pay_month","status","approvePayrollRequest","CreateUpdateSalaryTemplate","selectedSalaryTemplate","employeeID","salaryUpdate","CustomSpinner","isShow","size"],"sourceRoot":""}