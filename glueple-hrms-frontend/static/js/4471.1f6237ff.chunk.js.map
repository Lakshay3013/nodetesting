{"version":3,"file":"static/js/4471.1f6237ff.chunk.js","mappings":"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","sources":["components/admin/policies/CreateUpdatePolicyCategory.js","components/admin/policies/CreateUpdatePolicy.js","components/modal/admin/policies/ViewPolicyFileModal.js","components/admin/policies/PolicyBanner.js","components/admin/policies/PolicyTable.js","components/admin/policies/PolicyCategoryTable.js","components/admin/policies/Policies.js","components/modal/ApproveRejectModal.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { validateSchema } from '../../../utils/ValidationHelper'\r\nimport { addUpdatePolicyCategorySchema } from '../../../utils/ValidationSchema'\r\nimport { CustCheckbox, Input, Label } from '../../commanComponent'\r\nimport { CustomButton, CustomError } from '../../globalComponents'\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst CreateUpdatePolicyCategory = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const { createPolicyCategoryPending, updatePolicyCategoryPending } = useSelector(state => state?.qualification)\r\n    const {\r\n        selectedPolicyCategoryData,\r\n        openModel,\r\n        handleOpenClose,\r\n        handleCreateUpdatePolicyCategory,\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [createUpdatePolicyCategoryFormData, setCreateUpdatePolicyCategoryFormData] = useState({\r\n        name: '',\r\n        sort_order: '',\r\n        is_active: true\r\n    })\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e.target : { value: e };\r\n\r\n        setCreateUpdatePolicyCategoryFormData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n\r\n            return updatedState;\r\n        });\r\n\r\n        // Reset error for this field\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitCreateUpdatePolicy = async () => {\r\n        const validationResponse = await validateSchema(addUpdatePolicyCategorySchema, createUpdatePolicyCategoryFormData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n                is_active,\r\n                name,\r\n                sort_order,\r\n            } = createUpdatePolicyCategoryFormData\r\n            const params = {\r\n                name,\r\n                sort_order,\r\n                is_active,\r\n            }\r\n            setErrors({})\r\n            handleCreateUpdatePolicyCategory(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (selectedPolicyCategoryData) {\r\n            setCreateUpdatePolicyCategoryFormData({\r\n                is_active: selectedPolicyCategoryData?.is_active,\r\n                name: selectedPolicyCategoryData?.name,\r\n                sort_order: selectedPolicyCategoryData?.sort_order,\r\n            })\r\n        }\r\n    }, [selectedPolicyCategoryData])\r\n\r\n    const resetForm = () => {\r\n        setCreateUpdatePolicyCategoryFormData({\r\n            is_active: true,\r\n            name: '',\r\n            sort_order: '',\r\n        })\r\n        setErrors({})\r\n    }\r\n    return (\r\n        <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n            tabIndex={-1}\r\n            style={{\r\n                visibility: openModel ? 'visible' : 'hidden',\r\n                width: \"800px\"\r\n            }}\r\n            id=\"interviewDetail\"\r\n        >\r\n            <div className=\"offcanvas-header\">\r\n                <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{selectedPolicyCategoryData ? t(\"headings.addPolicyCategory\") : t(\"headings.updatePolicyCategory\")}</h5>\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                    onClick={() => handleOpenClose()}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"offcanvas-body myRequest \">\r\n                <div className=\"formPanel\">\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.policyCategoryName\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    placeholder={t(\"placeholders.policyCategoryName\")}\r\n                                    value={createUpdatePolicyCategoryFormData?.name}\r\n                                    name=\"name\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                                {errors?.name && (\r\n                                    <CustomError text={errors.name} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.sortOrder\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    placeholder={t(\"placeholders.sortOrder\")}\r\n                                    value={createUpdatePolicyCategoryFormData?.sort_order}\r\n                                    name=\"sort_order\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n\r\n                                {errors?.sort_order && (\r\n                                    <CustomError text={errors.sort_order} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.isActive\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <CustCheckbox\r\n                                    key={\"is_active\"}\r\n                                    id={`is_active`}\r\n                                    checked={createUpdatePolicyCategoryFormData?.is_active}\r\n                                    handleChange={(e) => handleFromChange(e)}\r\n                                    name={\"is_active\"}\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"offcanvas-footer\">\r\n                <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                    <CustomButton\r\n                        text={selectedPolicyCategoryData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                        classNames={\"btn btn-org-gradient\"}\r\n                        handleClick={() => submitCreateUpdatePolicy()}\r\n                        isLoading={selectedPolicyCategoryData ? updatePolicyCategoryPending : createPolicyCategoryPending}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateUpdatePolicyCategory\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { validateSchema } from '../../../utils/ValidationHelper'\r\nimport { addUpdatePolicySchema } from '../../../utils/ValidationSchema'\r\nimport CustomSelect from '../../commanComponent/CustomSelect'\r\nimport { CustCheckbox, Input, Label, Textarea } from '../../commanComponent'\r\nimport { CustomButton, CustomError } from '../../globalComponents'\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst CreateUpdatePolicy = (props) => {\r\n    const {t}=useCustomTranslation()\r\n    const { createPolicyPending, updatePolicyPending } = useSelector(state => state?.qualification)\r\n    const {\r\n        selectedPolicy,\r\n        openModel,\r\n        handleOpenClose,\r\n        handleCreateUpdatePolicy,\r\n        allPolicyCategoryListData\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [policyFile, setPolicyFile] = useState('')\r\n    const [createUpdatePolicyFormData, setCreateUpdatePolicyFormData] = useState({\r\n        category_id: null,\r\n        title: '',\r\n        description: \"\",\r\n        content: '',\r\n        is_active: true,\r\n        sort_order: '',\r\n    })\r\n    const fileInputRef = useRef(null);\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e.target : { value: e };\r\n\r\n        setCreateUpdatePolicyFormData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n\r\n            return updatedState;\r\n        });\r\n\r\n        // Reset error for this field\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitCreateUpdatePolicy = async () => {\r\n        const validationResponse = await validateSchema(addUpdatePolicySchema, createUpdatePolicyFormData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n                category_id,\r\n                title,\r\n                description,\r\n                content,\r\n                is_active,\r\n                sort_order,\r\n            } = createUpdatePolicyFormData\r\n            const formData = new FormData();\r\n            if(selectedPolicy){\r\n                formData.append(\"_id\",selectedPolicy?._id || selectedPolicy?.id );\r\n            }\r\n            formData.append(\"category_id\", category_id?.value);\r\n            formData.append(\"title\", title);\r\n            formData.append(\"description\", description);\r\n            formData.append(\"content\", content);\r\n            formData.append(\"is_active\", is_active);\r\n            formData.append(\"sort_order\", Number(sort_order));\r\n            formData.append(\"file\", policyFile);\r\n\r\n            handleCreateUpdatePolicy(formData)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (selectedPolicy) {\r\n            setCreateUpdatePolicyFormData({\r\n                category_id: { value: selectedPolicy?.category_id, label: selectedPolicy?.policy_category_name },\r\n                title: selectedPolicy?.title,\r\n                description: selectedPolicy?.description,\r\n                content: selectedPolicy?.content,\r\n                is_active: selectedPolicy?.is_active,\r\n                sort_order: selectedPolicy?.sort_order,\r\n            })\r\n        \r\n        }\r\n    }, [selectedPolicy])\r\n\r\n    const resetForm = () => {\r\n        setCreateUpdatePolicyFormData({\r\n            category_id: null,\r\n            title: '',\r\n            description: \"\",\r\n            content: '',\r\n            is_active: true,\r\n            sort_order: '',\r\n        })\r\n        setPolicyFile('')\r\n        if (fileInputRef.current) {\r\n            fileInputRef.current.value = ''; // Reset the file input\r\n        }\r\n        setErrors({})\r\n    }\r\n\r\n    const handlePolcyfile = (e) => {\r\n        const file = e.target.files[0]\r\n        setPolicyFile(file)\r\n    }\r\n    return (\r\n        <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n            tabIndex={-1}\r\n            style={{\r\n                visibility: openModel ? 'visible' : 'hidden',\r\n                width: \"800px\"\r\n            }}\r\n            id=\"interviewDetail\"\r\n        >\r\n            <div className=\"offcanvas-header\">\r\n                <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{selectedPolicy ? t(\"headings.addPolicy\") : t(\"headings.updatePolicy\")}</h5>\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                    onClick={() => handleOpenClose()}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"offcanvas-body myRequest \">\r\n                <div className=\"formPanel\">\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.selectCategory\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <CustomSelect\r\n                                    data={allPolicyCategoryListData}\r\n                                    placeholder={t(\"placeholders.selectCategory\")}\r\n                                    value={createUpdatePolicyFormData?.category_id || ''}\r\n                                    handleChange={(selectedOption) => handleFromChange(selectedOption, \"category_id\")}\r\n                                    name=\"category_id\"\r\n                                />\r\n                                {errors?.category_id && (\r\n                                    <CustomError text={errors.category_id} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.title\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    placeholder={t(\"placeholders.title\")}\r\n                                    value={createUpdatePolicyFormData?.title}\r\n                                    name=\"title\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                                {errors?.title && (\r\n                                    <CustomError text={errors.title} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.sortOrder\")}/>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    placeholder={t(\"placeholders.sortOrder\")}\r\n                                    value={createUpdatePolicyFormData?.sort_order}\r\n                                    name=\"sort_order\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n\r\n                             \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.description\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    placeholder={t(\"placeholders.description\")}\r\n                                    value={createUpdatePolicyFormData?.description}\r\n                                    name=\"description\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                                {errors?.description && (\r\n                                    <CustomError text={errors.description} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.content\")} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Textarea\r\n                                    value={createUpdatePolicyFormData?.content}\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                    name=\"content\"\r\n                                    placeholder={t(\"placeholders.content\")}\r\n                                />\r\n                               \r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.selectFile\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <input type=\"file\"\r\n                                    id=\"policyFile\"\r\n                                    name=\"poster\"\r\n                                    className={`form-control `}\r\n                                    onChange={handlePolcyfile}\r\n                                    accept=\".png, .jpeg, .doc, .docx, .pdf\" \r\n                                    ref={fileInputRef}\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                            <Label text={t(\"labels.isActive\")} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <CustCheckbox\r\n                                    key={\"is_active\"}\r\n                                    id={`is_active`}\r\n                                    // label={\"Active\"}\r\n                                    checked={createUpdatePolicyFormData?.is_active}\r\n                                    handleChange={(e) => handleFromChange(e)}\r\n                                    name={\"is_active\"}\r\n                                />\r\n                        \r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"offcanvas-footer\">\r\n                <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                    <CustomButton\r\n                        text={selectedPolicy ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                        classNames={\"btn btn-org-gradient\"}\r\n                        handleClick={() => submitCreateUpdatePolicy()}\r\n                        isLoading={selectedPolicy ? updatePolicyPending : createPolicyPending}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateUpdatePolicy\r\n","import React from 'react'\r\n\r\nconst ViewPolicyFileModal = (props) => {\r\n    const {\r\n        openModel,\r\n        handleOpenClose,\r\n    } = props\r\n    return (\r\n        <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n            tabIndex={-1}\r\n            style={{\r\n                visibility: openModel ? 'visible' : 'hidden',\r\n                width: \"800px\"\r\n            }}\r\n            id=\"interviewDetail\"\r\n        >\r\n            <div className=\"offcanvas-header\">\r\n                <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">View Policy </h5>\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                    onClick={() => handleOpenClose()}\r\n                />\r\n            </div>\r\n\r\n            <embed\r\n              src={\"https://www.antennahouse.com/hubfs/xsl-fo-sample/pdf/basic-link-1.pdf\"}\r\n              type=\"application/pdf\"\r\n              width=\"100%\"\r\n              height=\"600\"\r\n            />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewPolicyFileModal\r\n","import React from 'react'\r\n\r\nconst PolicyBanner = (props) => {\r\n    const { handleActiveTab } = props\r\n    return (\r\n        <>\r\n            <div className=\"cardBox leaveAppli h-100\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-4 selectModal position-relative z-1\">\r\n                        <div className=\"row px-md-1 \">\r\n                            <div className=\"col-md-6 px-md-2 mb-3\" onClick={() => handleActiveTab(\"policy_category\")}>\r\n                                <span\r\n                                    className=\"totalBx h-100\"\r\n                                >\r\n                                    <figure>\r\n                                        <img src=\"images/applyleavesIcon.svg\" alt=\"\" width={50} />\r\n                                    </figure>\r\n                                    <h3 className=\"fw-bolder my-0\">Policy category</h3>\r\n                                    <img\r\n                                        src=\"images/firstlineBlue.svg\"\r\n                                        className=\"cornerLine\"\r\n                                        alt=\"\"\r\n                                        width={95}\r\n                                    />\r\n                                </span>\r\n                            </div>\r\n                            <div className=\"col-md-6 px-md-2 mb-3\" onClick={() => handleActiveTab(\"policy\")}>\r\n                                <span\r\n                                    className=\"totalBx h-100\"\r\n                                >\r\n                                    <figure>\r\n                                        <img src=\"images/attendancelogIcon.svg\" alt=\"\" width={50} />\r\n                                    </figure>\r\n                                    <h3 className=\"fw-bolder my-0\">Policy</h3>\r\n                                    <img\r\n                                        src=\"images/secondlineBlue.svg\"\r\n                                        className=\"cornerLine\"\r\n                                        alt=\"\"\r\n                                        width={80}\r\n                                    />\r\n                                </span>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PolicyBanner\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomTable } from '../../reuseableComponents'\r\nimport { getBadgeColor } from '../../../utils/common'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment'\r\n\r\n\r\nconst PolicyTable = (props) => {\r\n  const {\r\n    allPolicyData,\r\n    isLoading,\r\n    handleCreateUpdatePolicyModal,\r\n    toggleDeletePolicyModal,\r\n    currentPage,\r\n    setCurrentPage,\r\n    handleViewPolicyModal\r\n  } = props\r\n  const [policyList, setPolicyList] = useState(allPolicyData)\r\n\r\n  const handleUpdatePosition = (data) => {\r\n    handleCreateUpdatePolicyModal(data)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setPolicyList(allPolicyData)\r\n  }, [allPolicyData])\r\n\r\n\r\n  const scopedSlots = useMemo(() => ({\r\n    sn: (_, index) => (\r\n      <span>{index + 1}</span>\r\n    ),\r\n    is_active: item => (\r\n      <span\r\n        className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n      >\r\n        {item.is_active ? \"Active\" : \"Inactive\"}\r\n      </span>\r\n    ),\r\n    created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n    action: item => (\r\n      <div className=\"actionGroup d-flex gap-2\">\r\n        <CustomButton\r\n          text=\"Update\"\r\n          classNames=\"btn btn-primary\"\r\n          handleClick={() => {\r\n            handleUpdatePosition(item);\r\n          }}\r\n        />\r\n        <CustomButton\r\n          text=\"Delete\"\r\n          handleClick={() => toggleDeletePolicyModal(item._id)}\r\n          classNames=\"btn btn-danger\"\r\n        />\r\n        <CustomButton\r\n          text=\"View\"\r\n          handleClick={() => handleViewPolicyModal(item._id)}\r\n          classNames=\"btn btn-info\"\r\n        />\r\n      </div>\r\n    )\r\n  }), [handleCreateUpdatePolicyModal]);\r\n  const fields = [\r\n    { key: 'sn', label: 'S.N' },\r\n    { key: 'title', label: 'Policy Name' },\r\n    { key: 'policy_category_name', label: 'Policy Category' },\r\n    { key: 'sort_order', label: 'Sort Order' },\r\n    { key: 'is_active', label: 'Status' },\r\n    { key: 'created_at', label: 'Created At' },\r\n    { key: 'action', label: 'Action' }\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <CustomTable\r\n        data={policyList?.data}\r\n        fields={fields}\r\n        isLoading={isLoading}\r\n        pagination={true}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n        totalPages={policyList?.totalPages}\r\n        tableName={\"Policy\"}\r\n        // onSearch={handleSearch}\r\n        scopedSlots={scopedSlots}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PolicyTable\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomTable } from '../../reuseableComponents'\r\nimport { getBadgeColor } from '../../../utils/common'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment'\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst PolicyCategoryTable = (props) => {\r\n    const {t} =useCustomTranslation()\r\n    const {\r\n        allPolicyCategoryData,\r\n        isLoading,\r\n        toggleCreateUpdatePolicyCategoryModal,\r\n        handelDeletePolicyCategory,\r\n        currentPage,\r\n        setCurrentPage\r\n    } = props\r\n    const [policyList, setPolicyList] = useState(allPolicyCategoryData)\r\n\r\n\r\n    const handleUpdatePosition = (data) => {\r\n        toggleCreateUpdatePolicyCategoryModal(data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setPolicyList(allPolicyCategoryData)\r\n    }, [allPolicyCategoryData])\r\n\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n        action: item => (\r\n            <div className=\"actionGroup d-flex gap-2\">\r\n                <CustomButton\r\n                    text={t(\"btns.update\")}\r\n                    classNames=\"btn btn-primary\"\r\n                    handleClick={() => {\r\n                        handleUpdatePosition(item);\r\n                    }}\r\n                />\r\n                <CustomButton\r\n                    text={t(\"btns.delete\")}\r\n                    handleClick={() => handelDeletePolicyCategory(item.id)}\r\n                    classNames=\"btn btn-danger\"\r\n                />\r\n            </div>\r\n        )\r\n    }), [ toggleCreateUpdatePolicyCategoryModal]);\r\n\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'name', label: 'Policy Category Name' },\r\n        { key: 'sort_order', label: 'Sort Order' },\r\n        { key: 'is_active', label: 'Status' },\r\n        { key: 'created_at', label: 'Created At' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n  return (\r\n    <>\r\n            <CustomTable\r\n                data={policyList?.data}\r\n                fields={fields}\r\n                isLoading={isLoading}\r\n                pagination={true}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                totalPages={policyList?.totalPages}\r\n                tableName={t(\"headings.policyCategory\")}\r\n                // onSearch={handleSearch}\r\n                scopedSlots={scopedSlots}\r\n            />\r\n        </>\r\n  )\r\n}\r\n\r\nexport default PolicyCategoryTable\r\n","\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { policiesActions } from '../../../core/resource/actions'\r\nimport { pagination } from '../../../utils/Constants.config'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport CreateUpdatePolicyCategory from './CreateUpdatePolicyCategory'\r\nimport ApproveRejectModal from '../../modal/ApproveRejectModal'\r\nimport CreateUpdatePolicy from './CreateUpdatePolicy'\r\nimport ViewPolicyFileModal from '../../modal/admin/policies/ViewPolicyFileModal'\r\nimport PolicyBanner from \"./PolicyBanner\"\r\nimport PolicyTable from './PolicyTable'\r\nimport PolicyCategoryTable from './PolicyCategoryTable'\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst Policies = () => {\r\n    const dispatch = useDispatch()\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        createPolicyCategoryPending,\r\n        createPolicyCategoryRes,\r\n        createPolicyCategoryError,\r\n\r\n        getAllPolicyCategorysPending,\r\n        getAllPolicyCategorysRes,\r\n        getAllPolicyCategorysError,\r\n\r\n        updatePolicyCategoryPending,\r\n        updatePolicyCategoryRes,\r\n        updatePolicyCategoryError,\r\n\r\n        deletePolicyCategoryPending,\r\n        deletePolicyCategoryRes,\r\n        deletePolicyCategoryError,\r\n\r\n        createPolicyPending,\r\n        createPolicyRes,\r\n        createPolicyError,\r\n\r\n        getAllPolicyPending,\r\n        getAllPolicyRes,\r\n        getAllPolicyError,\r\n\r\n        updatePolicyPending,\r\n        updatePolicyRes,\r\n        updatePolicyError,\r\n\r\n        deletePolicyPending,\r\n        deletePolicyRes,\r\n        deletePolicyError,\r\n\r\n        getPolicyCategoryListPending,\r\n        getPolicyCategoryListRes,\r\n        getPolicyCategoryListError,\r\n\r\n    } = useSelector(state => state.policies)\r\n    const [openCloseCreateUpdatePolicyCatModal, setOpenCloseCreateUpdatePolicyCatModal] = useState(false)\r\n    const [allPolicyCategoryData, setAllPolicyCategoryData] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [selectedPolicyCategoryData, setSelectedPolicyCategoryData] = useState('')\r\n    const [isShowDeletePolicyCategoryModal, setIsShowDeletePolicyCategoryModal] = useState(false)\r\n    const [deletePolicyCategoryId, setDeletePolicyCategoryId] = useState('')\r\n    const [activeTabType, setActiveTabType] = useState('policy_category')\r\n    const [openClosePolicyModal, setOpenClosePolicyModal] = useState(false)\r\n    const [allPolicyData, setAllPolicyData] = useState('')\r\n    const [isShowDeletePolicyModal, setIsShowDeletePolicyModal] = useState(false)\r\n    const [deletePolicyId, setDeletePolicyId] = useState()\r\n    const [selectedPolicy, setSelectedPolicy] = useState('')\r\n    const [policyId, setPolicyId] = useState('')\r\n    const [allPolicyCategoryListData, setAllPolicyCategoryListData] = useState('')\r\n    const [isShowViewPolicy, setIsShowViewPolicy] = useState(false)\r\n    const [policyFileName, setPolicyFileName] = useState('')\r\n\r\n\r\n    useEffect(() => {\r\n        getAllPolicyCategorys()\r\n        handleGetAllPolicy()\r\n    }, [currentPage])\r\n\r\n    /* Create Update Policy Category  */\r\n    const toggleCreateUpdatePolicyCategoryModal = (data) => {\r\n        if (!data) {\r\n            setSelectedPolicyCategoryData('')\r\n        } else {\r\n            setSelectedPolicyCategoryData(data)\r\n        }\r\n        setOpenCloseCreateUpdatePolicyCatModal(!openCloseCreateUpdatePolicyCatModal);\r\n    };\r\n\r\n\r\n    const handleCreateUpdatePolicyCategory = (params) => {\r\n        if (selectedPolicyCategoryData) {\r\n            params['_id'] = selectedPolicyCategoryData?.id || selectedPolicyCategoryData?._id\r\n            dispatch(policiesActions.updatePolicyCategoryRequest(params));\r\n        }\r\n        else {\r\n            dispatch(policiesActions.createPolicyCategoryRequest(params));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!createPolicyCategoryPending) {\r\n            if (createPolicyCategoryError) {\r\n                dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_CREATE_POLICY_CATEGORY_STOREE\"))\r\n                return;\r\n            }\r\n            if (createPolicyCategoryRes) {\r\n                if (createPolicyCategoryRes?.code === 200) {\r\n                    dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_CREATE_POLICY_CATEGORY_STORE\"))\r\n                    getAllPolicyCategorys()\r\n                    setOpenCloseCreateUpdatePolicyCatModal(!openCloseCreateUpdatePolicyCatModal);\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        createPolicyCategoryRes,\r\n        createPolicyCategoryError,\r\n        createPolicyCategoryPending\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (!updatePolicyCategoryPending) {\r\n            if (updatePolicyCategoryError) {\r\n                dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_UPDATE_POLICY_CATEGORY_STORE\"))\r\n                return;\r\n            }\r\n            if (updatePolicyCategoryRes) {\r\n                if (updatePolicyCategoryRes?.code === 200) {\r\n                    dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_UPDATE_POLICY_CATEGORY_STORE\"))\r\n                    getAllPolicyCategorys()\r\n                    setOpenCloseCreateUpdatePolicyCatModal(!openCloseCreateUpdatePolicyCatModal);\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updatePolicyCategoryRes,\r\n        updatePolicyCategoryError,\r\n        updatePolicyCategoryPending\r\n    ]);\r\n\r\n    /* Get All Policy Category Data  */\r\n    const getAllPolicyCategorys = () => {\r\n        const params = {\r\n            page: currentPage,\r\n            limit: pagination.limit,\r\n        }\r\n        dispatch(policiesActions.getAllPolicyCategorysRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllPolicyCategorysPending) {\r\n            if (getAllPolicyCategorysError) {\r\n                return;\r\n            }\r\n            if (getAllPolicyCategorysRes) {\r\n                if (getAllPolicyCategorysRes?.code === 200) {\r\n                    const getAllPolicyCategorysResData = getAllPolicyCategorysRes?.data\r\n                    setAllPolicyCategoryData(getAllPolicyCategorysResData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllPolicyCategorysRes,\r\n        getAllPolicyCategorysError,\r\n        getAllPolicyCategorysPending\r\n    ]);\r\n\r\n    /* Delete Policy Category */ \r\n    const handelDeletePolicyCategory = (id) => {\r\n        if(id){\r\n            setDeletePolicyCategoryId(id)\r\n        }\r\n        setIsShowDeletePolicyCategoryModal(!isShowDeletePolicyCategoryModal)\r\n    }\r\n\r\n    const deletePolicyCategory = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deletePolicyCategoryId\r\n            }\r\n            dispatch(policiesActions?.deletePolicyCategoryRequest(params))\r\n\r\n        } else {\r\n            handelDeletePolicyCategory()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!deletePolicyCategoryPending) {\r\n            if (deletePolicyCategoryError) {\r\n                dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_DELETE_POLICY_CATEGORY_STORE\"))\r\n                return;\r\n            }\r\n            if (deletePolicyCategoryRes) {\r\n                if (deletePolicyCategoryRes?.code === 200) {\r\n                    dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_DELETE_POLICY_CATEGORY_STORE\"))\r\n                    if (currentPage > 1 && allPolicyCategoryData?.data?.length === 1) {\r\n                        setCurrentPage((pre => pre -= 1))\r\n                    } else {\r\n                        getAllPolicyCategorys()\r\n                    }\r\n                    handelDeletePolicyCategory()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        deletePolicyCategoryRes,\r\n        deletePolicyCategoryError,\r\n        deletePolicyCategoryPending\r\n    ]);\r\n\r\n    const handleActiveTab = (type) => {\r\n        setActiveTabType(type)\r\n        setCurrentPage(1)\r\n        if (type === \"policy\") {\r\n            handleGetPolicyCategoryList()\r\n        }\r\n    }\r\n\r\n    // ---------------------POLICY SECTION--------------------- \r\n\r\n   /* Create Update Policy */\r\n    const handleCreateUpdatePolicyModal = (selectedData) => {\r\n        if (selectedData) {\r\n            setSelectedPolicy(selectedData)\r\n        } else {\r\n            setSelectedPolicy('')\r\n        }\r\n        setOpenClosePolicyModal(!openClosePolicyModal);\r\n    };\r\n\r\n    const handleCreateUpdatePolicy = (payload) => {\r\n        if (selectedPolicy) {\r\n            dispatch(policiesActions.updatePolicyRequest(payload));\r\n        } else {\r\n            dispatch(policiesActions.createPolicyRequest(payload));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!createPolicyPending) {\r\n            if (createPolicyError) {\r\n                dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_CREATE_POLICY_STORE\"))\r\n                return;\r\n            }\r\n            if (createPolicyRes) {\r\n                if (createPolicyRes?.code === 200) {\r\n                    setOpenClosePolicyModal(!openClosePolicyModal);\r\n                    handleGetAllPolicy()\r\n                    dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_CREATE_POLICY_STORE\"))\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        createPolicyRes,\r\n        createPolicyError,\r\n        createPolicyPending\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (!updatePolicyPending) {\r\n            if (updatePolicyError) {\r\n                dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_UPDATE_POLICY_STORE\"))\r\n                return;\r\n            }\r\n            if (updatePolicyRes) {\r\n                if (updatePolicyRes?.code === 200) {\r\n                    setOpenClosePolicyModal(!openClosePolicyModal);\r\n                    handleGetAllPolicy()\r\n                    dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_UPDATE_POLICY_STORE\"))\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updatePolicyRes,\r\n        updatePolicyError,\r\n        updatePolicyPending\r\n    ]);\r\n\r\n    /* Get all Policy */\r\n    const handleGetAllPolicy = () => {\r\n        const params = {\r\n            page: currentPage,\r\n            limit: pagination?.limit,\r\n        }\r\n        dispatch(policiesActions.getAllPolicyRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllPolicyPending) {\r\n            if (getAllPolicyError) {\r\n                return;\r\n            }\r\n            if (getAllPolicyRes) {\r\n                if (getAllPolicyRes?.code === 200) {\r\n                    const getAllPolicyResData = getAllPolicyRes?.data\r\n                    setAllPolicyData(getAllPolicyResData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllPolicyRes,\r\n        getAllPolicyError,\r\n        getAllPolicyPending\r\n    ]);\r\n\r\n    /* Delete Policy */\r\n    const toggleDeletePolicyModal = (id) => {\r\n        if(id){\r\n            setDeletePolicyId(id)\r\n        }\r\n        setIsShowDeletePolicyModal(!isShowDeletePolicyModal)\r\n    }\r\n\r\n    const handleDeletePolicy = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deletePolicyId\r\n            }\r\n            dispatch(policiesActions?.deletePolicyRequest(params))\r\n\r\n        } else {\r\n            toggleDeletePolicyModal()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!deletePolicyPending) {\r\n            if (deletePolicyError) {\r\n                dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_DELETE_POLICY_STORE\"))\r\n                return;\r\n            }\r\n            if (deletePolicyRes) {\r\n                if (deletePolicyRes?.code === 200) {\r\n                    toggleDeletePolicyModal()\r\n                    if (currentPage > 1 && allPolicyData?.data?.length === 1) {\r\n                        setCurrentPage((pre => pre -= 1))\r\n                    } else {\r\n                        handleGetAllPolicy()\r\n                    }\r\n                    dispatch(policiesActions.handleClearPolicyStore(\"HANDLE_CLEAR_DELETE_POLICY_STORE\"))\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        deletePolicyRes,\r\n        deletePolicyError,\r\n        deletePolicyPending\r\n    ]);\r\n\r\n    /* Get All Policy Category List*/\r\n    const handleGetPolicyCategoryList = () => {\r\n        dispatch(policiesActions.getPolicyCategoryListRequest());\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getPolicyCategoryListPending) {\r\n            if (getPolicyCategoryListError) {\r\n                return;\r\n            }\r\n            if (getPolicyCategoryListRes) {\r\n                if (getPolicyCategoryListRes?.code === 200) {\r\n                    const getPolicyCategoryListResData = getPolicyCategoryListRes?.data\r\n                    setAllPolicyCategoryListData(getPolicyCategoryListResData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getPolicyCategoryListRes,\r\n        getPolicyCategoryListError,\r\n        getPolicyCategoryListPending\r\n    ]);\r\n\r\n    /* View Policy File*/\r\n    const handleViewPolicyModal = (fileName) => {\r\n        setIsShowViewPolicy(!isShowViewPolicy)\r\n        setPolicyFileName(fileName)\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <PolicyBanner handleActiveTab={handleActiveTab} />\r\n            {activeTabType === \"policy_category\" && <>\r\n                <div className=\"d-flex justify-content-end \">\r\n                    <CustomButton\r\n                        classNames={\"btn btn-primary gradientBg mt-3\"}\r\n                        text={t(\"btns.createPolicyCategory\")}\r\n                        handleClick={() => toggleCreateUpdatePolicyCategoryModal()}\r\n                    />\r\n                </div>\r\n                <PolicyCategoryTable\r\n                    allPolicyCategoryData={allPolicyCategoryData}\r\n                    toggleCreateUpdatePolicyCategoryModal={toggleCreateUpdatePolicyCategoryModal}\r\n                    handelDeletePolicyCategory={handelDeletePolicyCategory}\r\n                    setCurrentPage={setCurrentPage}\r\n                    currentPage={currentPage}\r\n                    isLoading={getAllPolicyCategorysPending}\r\n\r\n                />\r\n                <CreateUpdatePolicyCategory\r\n                    openModel={openCloseCreateUpdatePolicyCatModal}\r\n                    handleOpenClose={toggleCreateUpdatePolicyCategoryModal}\r\n                    handleCreateUpdatePolicyCategory={handleCreateUpdatePolicyCategory}\r\n                    selectedPolicyCategoryData={selectedPolicyCategoryData}\r\n                />\r\n                {isShowDeletePolicyCategoryModal && (\r\n                    <ApproveRejectModal\r\n                        onApproveReject={deletePolicyCategory}\r\n                        isShow={isShowDeletePolicyCategoryModal}\r\n                        desc={t(\"alerts.deletePopup.desc\").replace('$1',\"Policies\")}\r\n                        btnRightLoading={deletePolicyCategoryPending}\r\n                        btnTextRight={t(\"btns.delete\")}\r\n                        btnTextLeft={t(\"btns.cancel\")}\r\n\r\n                    />)\r\n                }\r\n            </>}\r\n\r\n            {activeTabType === \"policy\" && <>\r\n                <div className=\"d-flex  justify-content-end \">\r\n                    <CustomButton\r\n                        classNames={\"btn btn-primary gradientBg mt-3\"}\r\n                        text={t(\"btns.createPolicy\")}\r\n                        handleClick={() => handleCreateUpdatePolicyModal()}\r\n                    />\r\n                </div>\r\n\r\n                <CreateUpdatePolicy\r\n                    openModel={openClosePolicyModal}\r\n                    handleOpenClose={handleCreateUpdatePolicyModal}\r\n                    handleCreateUpdatePolicy={handleCreateUpdatePolicy}\r\n                    selectedPolicy={selectedPolicy}\r\n                    allPolicyCategoryListData={allPolicyCategoryListData}\r\n                />\r\n\r\n                <PolicyTable\r\n                    allPolicyData={allPolicyData}\r\n                    handleCreateUpdatePolicyModal={handleCreateUpdatePolicyModal}\r\n                    toggleDeletePolicyModal={toggleDeletePolicyModal}\r\n                    currentPage={currentPage}\r\n                    setCurrentPage={setCurrentPage}\r\n                    isLoading={getAllPolicyPending}\r\n                    handleViewPolicyModal={handleViewPolicyModal}\r\n\r\n                />\r\n                <ViewPolicyFileModal\r\n                    openModel={isShowViewPolicy}\r\n                    handleOpenClose={handleViewPolicyModal}\r\n                    policyFileName={policyFileName}\r\n                />\r\n\r\n                {isShowDeletePolicyModal && (\r\n                    <ApproveRejectModal\r\n                        onApproveReject={handleDeletePolicy}\r\n                        isShow={isShowDeletePolicyModal}\r\n                        desc={t(\"alerts.deletePopup.desc\").replace('$1',\"Policy\")}\r\n                        btnRightLoading={deletePolicyPending}\r\n                        btnTextRight={t(\"btns.delete\")}\r\n                        btnTextLeft={t(\"btns.cancel\")}\r\n\r\n                    />)\r\n                }\r\n\r\n            </>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Policies\r\n","import React from 'react'\r\nimport Lottieplayer from '../commanComponent/Lottieplayer'\r\nimport backup from '../../../src/images/Backup.json'\r\nimport { CustomButton } from '../globalComponents'\r\nimport PropTypes from 'prop-types'\r\nimport { useCustomTranslation } from '../../translation'\r\n\r\n/**\r\n * ApproveRejectModal component.\r\n * @param {string} [title=\"Are You Sure?\"] - Title of the modal (optional, defaults to \"Are You Sure?\")\r\n * @param {string} [desc] - Description text (optional).\r\n * @param {function} onApproveReject - Callback function for handling approve/reject actions (required).\r\n * @param {boolean} isShow - Boolean flag to show or hide the modal (required).\r\n * @param {boolean} [btnRightLoading=false] - Boolean flag to show loading state for the right button (optional).\r\n * @param {string} [btnTextLeft=\"Cancel\"] - Custom text for the left button (optional).\r\n * @param {string} [btnTextRight=\"Confirm\"] - Custom text for the right button (optional).\r\n * @returns {void}\r\n */\r\nconst ApproveRejectModal = (\r\n  {  \r\n    title ,               \r\n    desc = \"\",                           \r\n    onApproveReject,                      \r\n    isShow,                               \r\n    btnLeftLoading = false,               \r\n    btnRightLoading = false,              \r\n    btnTextLeft ,               \r\n    btnTextRight     \r\n}\r\n) => {\r\n    const {t} =useCustomTranslation()\r\n    return (\r\n        <>\r\n            <div className=\"modal fade attendanceViewodal\" id=\"sureMdl\" style={{ display: isShow ? \"unset !important\" : \"none !important\", opacity: isShow ? \"unset\" : \"0\" }}>\r\n                <div className=\"modal-dialog modal-dialog-centered\">\r\n                    <div className=\"modal-content rounded-1 border-0\">\r\n                        <div className=\"modal-body \">\r\n                            <div className=\"text-center suremodalCon\">\r\n                                <div className=\"d-flex justify-content-center\">\r\n                                    <Lottieplayer lottieUrl={backup} Lottiestyle={{ width: \"90px\", height: \"90px\" }} />\r\n                                </div>\r\n                                <h6 className=\"fw-semibold mb-2\">{title?title:t(\"alerts.deletePopup.title\")}</h6>\r\n                                <p className=\"mb-5 px-4 text-center\">{desc ? desc : \"\"}\r\n                                </p>\r\n                                <div className=\"d-flex justify-content-center gap-3\">\r\n                                    <CustomButton\r\n                                        classNames={\"btn btn-danger\"}\r\n                                        isLoading={btnLeftLoading}\r\n                                        text={btnTextLeft?btnTextLeft:t(\"btns.reject\") }\r\n                                        handleClick={() => onApproveReject(false)}\r\n                                    />\r\n                                    <CustomButton\r\n                                        classNames={\"btn btn-success\"}\r\n                                        isLoading={btnRightLoading}\r\n                                        text={btnTextRight?btnTextRight:t(\"btns.confirm\")}\r\n                                        handleClick={() => onApproveReject(true)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {isShow && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n// Add PropTypes validation\r\nApproveRejectModal.propTypes = {\r\n    title: PropTypes.string,                     \r\n    desc: PropTypes.string,                       \r\n    onApproveReject: PropTypes.func.isRequired,   \r\n    isShow: PropTypes.bool.isRequired,            \r\n    btnRightLoading: PropTypes.bool,                         \r\n    btnTextLeft: PropTypes.string,                \r\n    btnTextRight: PropTypes.string,   \r\n};\r\n\r\nexport default ApproveRejectModal\r\n"],"names":["props","t","useCustomTranslation","createPolicyCategoryPending","updatePolicyCategoryPending","useSelector","state","qualification","selectedPolicyCategoryData","openModel","handleOpenClose","handleCreateUpdatePolicyCategory","errors","setErrors","useState","createUpdatePolicyCategoryFormData","setCreateUpdatePolicyCategoryFormData","name","sort_order","is_active","handleFromChange","e","fieldName","_e$target","target","value","type","checked","prevState","prevErrors","undefined","useEffect","resetForm","_jsxs","className","tabIndex","style","visibility","width","id","children","_jsx","onClick","Label","text","required","Input","placeholder","onChange","CustomError","CustCheckbox","handleChange","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","addUpdatePolicyCategorySchema","isValid","params","submitCreateUpdatePolicy","isLoading","createPolicyPending","updatePolicyPending","selectedPolicy","handleCreateUpdatePolicy","allPolicyCategoryListData","policyFile","setPolicyFile","createUpdatePolicyFormData","setCreateUpdatePolicyFormData","category_id","title","description","content","fileInputRef","useRef","label","policy_category_name","current","CustomSelect","data","selectedOption","Textarea","file","files","accept","ref","addUpdatePolicySchema","formData","FormData","append","_id","Number","src","height","handleActiveTab","_Fragment","alt","allPolicyData","handleCreateUpdatePolicyModal","toggleDeletePolicyModal","currentPage","setCurrentPage","handleViewPolicyModal","policyList","setPolicyList","scopedSlots","useMemo","sn","_","index","item","getBadgeColor","created_at","moment","format","action","CustomTable","fields","key","pagination","totalPages","tableName","allPolicyCategoryData","toggleCreateUpdatePolicyCategoryModal","handelDeletePolicyCategory","Policies","dispatch","useDispatch","createPolicyCategoryRes","createPolicyCategoryError","getAllPolicyCategorysPending","getAllPolicyCategorysRes","getAllPolicyCategorysError","updatePolicyCategoryRes","updatePolicyCategoryError","deletePolicyCategoryPending","deletePolicyCategoryRes","deletePolicyCategoryError","createPolicyRes","createPolicyError","getAllPolicyPending","getAllPolicyRes","getAllPolicyError","updatePolicyRes","updatePolicyError","deletePolicyPending","deletePolicyRes","deletePolicyError","getPolicyCategoryListPending","getPolicyCategoryListRes","getPolicyCategoryListError","policies","openCloseCreateUpdatePolicyCatModal","setOpenCloseCreateUpdatePolicyCatModal","setAllPolicyCategoryData","setSelectedPolicyCategoryData","isShowDeletePolicyCategoryModal","setIsShowDeletePolicyCategoryModal","deletePolicyCategoryId","setDeletePolicyCategoryId","activeTabType","setActiveTabType","openClosePolicyModal","setOpenClosePolicyModal","setAllPolicyData","isShowDeletePolicyModal","setIsShowDeletePolicyModal","deletePolicyId","setDeletePolicyId","setSelectedPolicy","policyId","setPolicyId","setAllPolicyCategoryListData","isShowViewPolicy","setIsShowViewPolicy","policyFileName","setPolicyFileName","getAllPolicyCategorys","handleGetAllPolicy","policiesActions","handleClearPolicyStore","code","page","limit","getAllPolicyCategorysRequest","getAllPolicyCategorysResData","_allPolicyCategoryDat","length","pre","selectedData","getAllPolicyRequest","getAllPolicyResData","_allPolicyData$data","handleGetPolicyCategoryList","getPolicyCategoryListRequest","getPolicyCategoryListResData","fileName","PolicyBanner","PolicyCategoryTable","CreateUpdatePolicyCategory","updatePolicyCategoryRequest","createPolicyCategoryRequest","ApproveRejectModal","onApproveReject","deletePolicyCategoryRequest","isShow","desc","replace","btnRightLoading","btnTextRight","btnTextLeft","CreateUpdatePolicy","payload","updatePolicyRequest","createPolicyRequest","PolicyTable","ViewPolicyFileModal","deletePolicyRequest","_ref","btnLeftLoading","display","opacity","Lottieplayer","lottieUrl","backup","Lottiestyle"],"sourceRoot":""}