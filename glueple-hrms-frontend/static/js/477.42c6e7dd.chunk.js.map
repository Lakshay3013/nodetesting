{"version":3,"file":"static/js/477.42c6e7dd.chunk.js","mappings":"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","sources":["components/manageLocation/ManageLocationTable.js","components/manageLocation/AddUpdateLocation.js","components/manageLocation/ManageLocation.js"],"sourcesContent":["import React, { useMemo } from 'react'\r\nimport { CustomButton } from '../globalComponents'\r\nimport { CustomTable } from '../reuseableComponents'\r\nimport { getBadgeColor } from '../../utils/common'\r\nimport { Icon } from '../commanComponent'\r\nimport { useCustomTranslation } from '../../translation'\r\n\r\nconst ManageLocationTable = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        currentPage,\r\n        setCurrentPage,\r\n        teamData,\r\n        toggleAddUpdateModal,\r\n        isLoading,\r\n        handleEmpLocationDeleteModal,\r\n        setBulkUpdate\r\n    } = props\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        action: item => (\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => {\r\n                                toggleAddUpdateModal(item);\r\n                                setBulkUpdate(false)\r\n                            }}\r\n                        >\r\n                            <Icon className={\"bi bi-geo-alt-fill me-1\"} />Add Location</span>\r\n                    </li>\r\n                    {/* <li>    \r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleEmpLocationDeleteModal(item?.id)}\r\n                        >\r\n                           <Icon className={\"bi bi-trash\"}/> Delete</span>\r\n                    </li> */}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }), [teamData, currentPage]);\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'emp_id', label: 'Emp Id' },\r\n        { key: 'name', label: 'Name' },\r\n        { key: 'mobile', label: 'Mobile' },\r\n        { key: 'email', label: 'Email' },\r\n        { key: 'action', label: 'Action' },\r\n\r\n\r\n    ];\r\n    return (\r\n        <div>\r\n            <div className=' myRequest mb-3 employeeHistory'>\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <h3 className=\"ms-2 mt-2 underlineHead \" style={{ fontSize: \"18px\" }} >{\"Employee\"}</h3>\r\n                    <CustomButton\r\n                        text={t(\"btns.bulkUpdate\")}\r\n                        classNames={\"btn btn-primary\"}\r\n                        handleClick={() => {\r\n                            toggleAddUpdateModal();\r\n                            setBulkUpdate(true)\r\n                        }}\r\n\r\n                    />\r\n                </div>\r\n                <CustomTable\r\n                    data={teamData?.data}\r\n                    fields={fields}\r\n                    isLoading={isLoading}\r\n                    pagination={true}\r\n                    currentPage={currentPage}\r\n                    setCurrentPage={setCurrentPage}\r\n                    totalPages={teamData?.totalPages}\r\n                    isHeader={false}\r\n                    tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n                    scopedSlots={scopedSlots}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ManageLocationTable\r\n\r\n","\r\nimport React, { useEffect, useState, useRef } from 'react'\r\nimport { validateSchema } from '../../utils/ValidationHelper'\r\nimport { empLocationSchema } from '../../utils/ValidationSchema'\r\nimport { CustCheckbox, CustomStrong, Icon, Input, Label } from '../commanComponent'\r\nimport { CustomButton, CustomError } from '../globalComponents'\r\nimport GoogleMapReact from \"google-map-react\";\r\nimport CustomSelect from '../commanComponent/CustomSelect'\r\nimport { useDispatch } from 'react-redux'\r\nimport { notificationActions } from '../../core/resource/actions'\r\nimport { useCustomTranslation } from '../../translation'\r\n\r\nconst GOOGLE_API_KEY = \"AIzaSyC-c-tkDWtmP72dm1byIcV8bnfGdTBsnNI\";\r\n\r\nconst AnyReactComponent = ({ text }) => (\r\n    <div style={{ color: \"red\", fontSize: \"16px\" }}>\r\n        <Icon className={\"bi bi-geo-alt-fill me-1\"} />\r\n    </div>\r\n);\r\nconst AddUpdateLocation = (props) => {\r\n    const dispatch = useDispatch()\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        openModel,\r\n        handleOpenClose,\r\n        handleAddUpdateEmpLocation,\r\n        selectedEmpLocation,\r\n        allLocationData,\r\n        selectedEmployee,\r\n        bulkUpdate,\r\n        employeeList,\r\n        handleBulkUpdateEmployee\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [range, setRange] = useState(50);\r\n    const [defaultLocation, setDefaultLocation] = useState({ lat: 26.912434, lng: 75.787270 })\r\n    const [marker, setMarker] = useState(defaultLocation);\r\n    const [isSatellite, setIsSatellite] = useState(false);\r\n    const mapRef = useRef(null);\r\n    const circleRef = useRef(null);\r\n    const [zoom, setZoom] = useState(12)\r\n    const [selectedLocation, setSelectedLocation] = useState(null)\r\n    const [filtersFields, setFiltersFields] = useState({\r\n        searchLocation: '',\r\n        searchLat: '',\r\n        searchLng: ''\r\n    })\r\n    const [bulkUpdateEmployees, setBulkUpdateEmployees] = useState([])\r\n    const [empLocationFormData, setEmpLocationFormData] = useState({\r\n        location: '',\r\n        latitude: '',\r\n        longitude: '',\r\n        isActive: false,\r\n        address: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (selectedLocation) {\r\n            setFiltersFields({\r\n                searchLocation: '',\r\n                searchLat: '',\r\n                searchLng: ''\r\n            })\r\n        }\r\n        resetFormFields()\r\n    }, [selectedLocation])\r\n\r\n\r\n\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e.target ? e.target : { value: e };\r\n\r\n        setEmpLocationFormData(prevState => {\r\n            let updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n\r\n            return updatedState;\r\n        });\r\n\r\n        // Reset error for this field\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n    const handleFilterFieldsChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, } = e.target ? e.target : { value: e };\r\n\r\n        setFiltersFields(prevState => {\r\n            let updatedState = {\r\n                ...prevState,\r\n                [name]: value,\r\n            };\r\n            if (name === \"searchLat\" || name === \"searchLng\") {\r\n                setSelectedLocation(null);\r\n                updatedState[\"searchLocation\"] = '';\r\n            } else if (name === \"searchLocation\") {\r\n                setSelectedLocation(null);\r\n                updatedState[\"searchLat\"] = '';\r\n                updatedState[\"searchLng\"] = '';\r\n            }\r\n            return updatedState;\r\n        });\r\n\r\n    }\r\n\r\n    const submitBulkUpdate = () => {\r\n        const {\r\n            location,\r\n            latitude,\r\n            longitude,\r\n            address,\r\n        } = empLocationFormData\r\n        let params = {\r\n            name: location,\r\n            location_name: address,\r\n            latitude: latitude,\r\n            longitude: longitude,\r\n            employee_detail: bulkUpdateEmployees\r\n        }\r\n        handleBulkUpdateEmployee(params)\r\n    }\r\n\r\n    const submitAddUpdateEmpLocation = async () => {\r\n        const validationResponse = await validateSchema(empLocationSchema, empLocationFormData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n                location,\r\n                latitude,\r\n                longitude,\r\n                isActive,\r\n                address,\r\n            } = empLocationFormData\r\n            let params = {\r\n                name: location,\r\n                location_name: address,\r\n                latitude: latitude,\r\n                longitude: longitude,\r\n                is_active: isActive,\r\n                employee_id: selectedEmployee?.id,\r\n                attendance_radius: range\r\n            }\r\n\r\n            handleAddUpdateEmpLocation(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    const resetForm = () => {\r\n        setEmpLocationFormData({\r\n            location: '',\r\n            latitude: '',\r\n            longitude: '',\r\n            isActive: false,\r\n        })\r\n        setErrors({})\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (selectedEmpLocation) {\r\n            setEmpLocationFormData({\r\n                location: selectedEmpLocation?.location || '',\r\n                latitude: selectedEmpLocation?.latitude,\r\n                longitude: selectedEmpLocation?.longitude,\r\n                isActive: selectedEmpLocation?.is_active,\r\n            })\r\n\r\n        }\r\n    }, [selectedEmpLocation])\r\n\r\n\r\n    useEffect(() => {\r\n        if (window.google && window.google.maps) {\r\n            drawCircle();\r\n        }\r\n    }, [range, marker]);\r\n\r\n    const handleMapClick = ({ lat, lng }) => {\r\n        if (!window.google || !window.google.maps) {\r\n            dispatch(notificationActions.openSnackbar(\r\n                {\r\n                    text: \"Google Maps API is not available.\",\r\n                    alertType: 'error'\r\n                }\r\n            ));\r\n            return;\r\n        }\r\n        setZoom(15)\r\n        const geocoder = new window.google.maps.Geocoder();\r\n        const latlng = { lat, lng };\r\n        geocoder.geocode({ location: latlng }, (results, status) => {\r\n            if (status === \"OK\" && results[0]) {\r\n                const formattedAddress = results[0].formatted_address;\r\n                // Extract City Name\r\n                // let city = \"\";\r\n                // results[0].address_components.forEach((component) => {\r\n                //     if (component.types.includes(\"locality\")) {\r\n                //         city = component.long_name;\r\n                //     }\r\n                // });\r\n                setMarker({ lat, lng });\r\n                setEmpLocationFormData(prev => ({\r\n                    ...prev,\r\n                    location: filtersFields?.searchLocation || selectedLocation?.name,\r\n                    latitude: lat,\r\n                    longitude: lng,\r\n                    address: formattedAddress,\r\n                }));\r\n            } else {\r\n                dispatch(notificationActions.openSnackbar({ text: \"Address not found!\", alertType: 'error' }));\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleSearch = async () => {\r\n        const { searchLocation, searchLat, searchLng } = filtersFields;\r\n\r\n        if (!searchLocation && !selectedLocation && !searchLat && !searchLng) return;\r\n        let lat = ''\r\n        let lng = ''\r\n        if (!window.google || !window.google.maps) {\r\n            dispatch(notificationActions.openSnackbar({ text: \"Google Maps API is not available.\", alertType: 'error' }));\r\n            return;\r\n        }\r\n\r\n        const geocoder = new window.google.maps.Geocoder();\r\n        let geocodeParams = null;\r\n\r\n        if (searchLocation || selectedLocation?.name) {\r\n            geocodeParams = { address: searchLocation || selectedLocation?.name };\r\n\r\n\r\n        } else if (!isNaN(searchLat) && !isNaN(searchLng)) {\r\n            lat = parseFloat(searchLat);\r\n            lng = parseFloat(searchLng);\r\n            if (!isFinite(lat) || !isFinite(lng)) {\r\n                dispatch(notificationActions.openSnackbar({ text: \"Invalid latitude or longitude.\", alertType: 'error' }));\r\n                return;\r\n            }\r\n            geocodeParams = { location: { lat, lng } };\r\n            setSelectedLocation(null)\r\n        } else {\r\n            dispatch(notificationActions.openSnackbar({ text: \"Invalid location input.\", alertType: 'error' }));\r\n            return;\r\n        }\r\n        geocoder.geocode(geocodeParams, (results, status) => {\r\n            if (status === \"OK\" && results[0]) {\r\n                const location = results[0].geometry.location;\r\n                if (searchLat && searchLng) {\r\n                    handleMapClick({ lat, lng });\r\n                } else {\r\n                    handleMapClick({ lat: location.lat(), lng: location.lng() });\r\n                }\r\n\r\n            } else {\r\n                dispatch(notificationActions.openSnackbar({ text: \"Location not found!\", alertType: 'error' }));\r\n            }\r\n        });\r\n    };\r\n\r\n\r\n\r\n\r\n    // Set map type based on the current value of `isSatellite`\r\n    const setMapType = (map, maps, type) => {\r\n        if (type) {\r\n            map.setMapTypeId(maps.MapTypeId.SATELLITE);\r\n        } else {\r\n            map.setMapTypeId(maps.MapTypeId.ROADMAP);\r\n        }\r\n    };\r\n\r\n    const handleApiLoaded = ({ map, maps }) => {\r\n        mapRef.current = map;\r\n        drawCircle();\r\n        setMapType(map, maps);\r\n    };\r\n\r\n    const toggleMapType = (type) => {\r\n        setIsSatellite((prev) => !prev);\r\n        if (mapRef.current) {\r\n            setMapType(mapRef.current, window.google.maps, type);\r\n        }\r\n    };\r\n\r\n    const drawCircle = () => {\r\n        if (!mapRef.current) return;\r\n        if (circleRef.current) {\r\n            circleRef.current.setMap(null);\r\n        }\r\n        circleRef.current = new window.google.maps.Circle({\r\n            strokeColor: \"#FF0000\",\r\n            strokeOpacity: 0.8,\r\n            strokeWeight: 2,\r\n            fillColor: \"transparent\",\r\n            fillOpacity: 0.2,\r\n            map: mapRef.current,\r\n            center: marker,\r\n            radius: range,\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (range <= 500) {\r\n            setZoom(15);\r\n        } else if (range <= 2000) {\r\n            setZoom(14);\r\n        } else if (range <= 5000) {\r\n            setZoom(13);\r\n        } else {\r\n            setZoom(12);\r\n        }\r\n    }, [range]);\r\n\r\n    const handleChangeEmployeeRadius = (e, index) => {\r\n        const { value } = e.target;\r\n        setBulkUpdateEmployees((prevState) => {\r\n            const updatedEmployees = [...prevState];\r\n            updatedEmployees[index] = { ...updatedEmployees[index], radius: parseInt(value, 10) };\r\n            return updatedEmployees;\r\n        });\r\n    };\r\n\r\n    const resetFormFields = () => {\r\n        setEmpLocationFormData((pre) => ({\r\n            ...pre,\r\n            location: '',\r\n            latitude: '',\r\n            longitude: '',\r\n            isActive: false,\r\n            address: '',\r\n        }))\r\n    }\r\n\r\n    const renderEmployees = () => {\r\n        return bulkUpdateEmployees.map((emp, ind) => (\r\n            <div className=\"\" key={ind}>\r\n                <div className=\"col-md-12 row\">\r\n                    <div className='col-md-6' style={{ fontSize: \"15px\" }}>\r\n                        <div className=''>\r\n                            <CustomStrong text={`${ind + 1}. ${emp?.name}`}\r\n                                style={{ color: \"#F47320\" }}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className='col-md-6'>\r\n                        <div className=\"form-group mb-2\">\r\n\r\n                            <h6 className=\"m-b-30 f-w-700\" style={{ fontSize: \"15px\" }}>\r\n                                <span className=\"text-c-green m-l-10\">\r\n                                    {emp?.radius >= 1000 ? (emp?.radius / 1000).toFixed(1) + \" KM\" : emp?.radius + \" Meters\"}\r\n                                </span>\r\n                            </h6>\r\n                            <div>\r\n                                <input\r\n                                    type=\"range\"\r\n                                    min=\"10\"\r\n                                    max=\"20000\"\r\n                                    step=\"10\"\r\n                                    value={emp?.radius}\r\n                                    onChange={(e) => handleChangeEmployeeRadius(e, ind)}\r\n                                    id=\"location-range\"\r\n                                    style={{ width: \"100%\", cursor: \"pointer\" }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <hr />\r\n            </div>\r\n        ));\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        if(bulkUpdateEmployees){\r\n        setBulkUpdateEmployees((prev) =>\r\n            prev.map((emp) => ({\r\n                ...emp,\r\n                radius: emp.radius || 50\r\n            }))\r\n        );\r\n    }\r\n    }, [bulkUpdateEmployees])\r\n    return (\r\n        <>\r\n            <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n                tabIndex={-1}\r\n                style={{\r\n                    visibility: openModel ? 'visible' : 'hidden',\r\n                    width: \"800px\"\r\n                }}\r\n                id=\"interviewDetail\"\r\n            >\r\n                <div className=\"offcanvas-header\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">\r\n                        <img\r\n                            src='images/maps.gif'\r\n                            height=\"47px\"\r\n                            width=\"59px\"\r\n                        />  Location\r\n                    </h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                        onClick={() => handleOpenClose()}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"offcanvas-body myRequest \">\r\n                    <div className=\"formPanel\">\r\n                        <div className=\"row\">\r\n                            {/* <div className=\"col-md-12 \"> */}\r\n                            {/* <div className=\"form-group mb-2 row\" style={{ width: \"100%\" }}> */}\r\n                            <div className='col-6 '>\r\n                                <CustomStrong text={t(\"labels.selectLocation\")} className={\"text-primary\"} />\r\n\r\n                                <CustomSelect\r\n                                    data={allLocationData}\r\n                                    placeholder={t(\"placeholders.selectLocation\")}\r\n                                    value={selectedLocation}\r\n                                    handleChange={(selectedOption) => setSelectedLocation(selectedOption)}\r\n                                />\r\n\r\n                                {/* <CustomStrong className='col-1 text-primary mt-4' text={\"OR\"} /> */}\r\n                            </div>\r\n                            <div className='col-6'>\r\n                                <CustomStrong text={t(\"labels.searchLocation\")} className={\"text-primary\"} />\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    placeholder={t(\"placeholders.searchLocation\")}\r\n                                    value={filtersFields?.searchLocation}\r\n                                    name=\"searchLocation\"\r\n                                    onChange={(e) => handleFilterFieldsChange(e)}\r\n                                // isDisabled={selectedLocation ? true : false}\r\n                                />\r\n\r\n                            </div>\r\n\r\n                            {/* </div> */}\r\n\r\n                            {/* </div> */}\r\n\r\n                            <div className='col-md-12 d-flex justify-content-between gap-2 '>\r\n                                <div style={{width:\"50%\"}}><hr/></div>\r\n                                <div className='mt-2'>OR</div>\r\n                                <div style={{width:\"50%\"}}><hr/></div>\r\n                            </div>\r\n\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"form-group mb-2\">\r\n                                    <CustomStrong text={t(\"labels.latitude\")} className={\"text-primary\"} />\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.latitude\")}\r\n                                        value={filtersFields?.searchLat}\r\n                                        name=\"searchLat\"\r\n                                        onChange={(e) => handleFilterFieldsChange(e)}\r\n                                    // isDisabled={true}\r\n                                    />\r\n                                    {errors?.searchLat && (\r\n                                        <CustomError text={errors.searchLat} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"form-group mb-2\">\r\n                                    <CustomStrong text={t(\"labels.longitude\")} className={\"text-primary\"} />\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.longitude\")}\r\n                                        value={filtersFields?.searchLng}\r\n                                        name=\"searchLng\"\r\n                                        onChange={(e) => handleFilterFieldsChange(e)}\r\n                                    // isDisabled={true}\r\n                                    />\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                            <div className='col-12 d-flex justify-content-end'>\r\n                                <div className=' mt-2 mb-2'>\r\n                                    <CustomButton\r\n                                        text={t(\"btns.search\")}\r\n                                        classNames={\"btn btn-primary\"}\r\n                                        handleClick={() => handleSearch()}\r\n                                        icon={<Icon className={\"fa fa-search\"} />}\r\n                                    // isLoading={selectedEmpLocation ? updateClientPending : addClientPending}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                            <hr />\r\n                            {bulkUpdate && <div className=\"col-md-12\">\r\n                                <div className=\"form-group mb-2\">\r\n                                    <CustomStrong text={t(\"labels.employee\")} className={\"text-primary\"} />\r\n                                    <CustomSelect\r\n                                        data={employeeList}\r\n                                        placeholder={t(\"placeholders.employee\")}\r\n                                        value={bulkUpdateEmployees}\r\n                                        handleChange={(selectedOption) => setBulkUpdateEmployees(selectedOption)}\r\n                                        isMulti={true}\r\n                                    />\r\n                                </div>\r\n\r\n                            </div>}\r\n                            <div className=\"col-md-12\">\r\n                                <div className=\"form-group mb-2\">\r\n                                    <CustomStrong text={t(\"labels.location\")} required={true} className={\"text-primary\"} />\r\n                                    <div className='d-flex gap-3'>\r\n                                        <Input\r\n                                            type=\"text\"\r\n                                            placeholder={t(\"placeholders.location\")}\r\n                                            value={empLocationFormData?.location}\r\n                                            name=\"location\"\r\n                                            onChange={(e) => handleFromChange(e)}\r\n                                            isDisabled={selectedLocation ? true : false}\r\n                                        />\r\n\r\n                                        {/* <CustomButton\r\n                                            text={t(\"btns.find\")}\r\n                                            classNames={\"btn btn-primary\"}\r\n                                            handleClick={() => handleSearch()}\r\n                                        // isLoading={selectedEmpLocation ? updateClientPending : addClientPending}\r\n                                        /> */}\r\n                                    </div>\r\n                                    {errors?.location && (\r\n                                        <CustomError text={errors.location} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-12\">\r\n                                <div className=\"form-group mb-2\">\r\n                                    <CustomStrong text={t(\"labels.address\")} required={true} className={\"text-primary\"} />\r\n\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.address\")}\r\n                                        value={empLocationFormData?.address}\r\n                                        name=\"address\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    // isDisabled={true}\r\n                                    />\r\n                                    {errors?.address && (\r\n                                        <CustomError text={errors.address} />\r\n                                    )}\r\n\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"form-group mb-2\">\r\n                                    <CustomStrong text={t(\"labels.latitude\")} required={true} className={\"text-primary\"} />\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.latitude\")}\r\n                                        value={empLocationFormData?.latitude}\r\n                                        name=\"latitude\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    // isDisabled={true}\r\n                                    />\r\n                                    {errors?.latitude && (\r\n                                        <CustomError text={errors.latitude} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <div className=\"form-group mb-2\">\r\n                                    <CustomStrong text={t(\"labels.longitude\")} required={true} className={\"text-primary\"} />\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.longitude\")}\r\n                                        value={empLocationFormData?.longitude}\r\n                                        name=\"longitude\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    // isDisabled={true}\r\n                                    />\r\n                                    {errors?.longitude && (\r\n                                        <CustomError text={errors.longitude} />\r\n                                    )}\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                            {bulkUpdate ?\r\n                                <>\r\n                                    <div className='mt-2 ' style={bulkUpdateEmployees?.length > 3 ? {\r\n                                        overflowY: \"scroll\", height: \"250px\"\r\n                                    } : {}}>\r\n                                        {renderEmployees()}\r\n                                    </div>\r\n                                </> :\r\n                                <div className=\"col-md-6\">\r\n                                    <div className=\"form-group mb-2\">\r\n                                        <CustomStrong text={\"Range\"} className={\"text-primary\"} />\r\n                                        <h5 className=\"m-b-30 f-w-700\">\r\n                                            <span className=\"text-c-green m-l-10\">\r\n                                                {range >= 1000 ? (range / 1000).toFixed(1) + \" KM\" : range + \" Meters\"}\r\n                                            </span>\r\n                                        </h5>\r\n                                        <div >\r\n                                            <input\r\n                                                type=\"range\"\r\n                                                min=\"10\"\r\n                                                max=\"2000\"\r\n                                                step=\"5\"\r\n                                                value={range}\r\n                                                onChange={(e) => setRange(parseInt(e.target.value, 10))}\r\n                                                id=\"location-range\"\r\n                                                style={{ width: \"100%\", cursor: \"pointer\" }}\r\n                                            />\r\n                                        </div>\r\n\r\n                                    </div>\r\n\r\n                                </div>}\r\n                            <div className=\"col-md-12\">\r\n                                <div style={{ height: \"500px\", width: \"100%\" }}>\r\n\r\n\r\n\r\n                                    {/* Toggle Button to Switch Between Map Types */}\r\n                                    <div className=\"d-flex justify-content-end\">\r\n                                        <div className=\"requestdata\">\r\n                                            <div className=\"d-flex align-items-center mb-1\">\r\n                                                <ul className=\"nav nav-tabs leaveTabs ms-3\">\r\n                                                    <li className=\"nav-item\">\r\n                                                        <button\r\n                                                            className={`nav-link ${isSatellite ? \"\" : \"active\"}`}\r\n                                                            data-bs-toggle=\"tab\"\r\n                                                            data-bs-target=\"#map\"\r\n                                                            type=\"button\"\r\n                                                            onClick={() => toggleMapType(false)}\r\n                                                        >\r\n                                                            MAP\r\n                                                        </button>\r\n                                                    </li>\r\n                                                    <li className=\"nav-item\">\r\n                                                        <button\r\n                                                            className={`nav-link ${isSatellite ? \"active\" : \"\"}`}\r\n                                                            data-bs-toggle=\"tab\"\r\n                                                            data-bs-target=\"#satellite\"\r\n                                                            type=\"button\"\r\n                                                            onClick={() => toggleMapType(true)}\r\n                                                        >\r\n                                                            SATELLITE\r\n                                                        </button>\r\n                                                    </li>\r\n                                                </ul>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    {/* Google Map */}\r\n                                 \r\n                                    <GoogleMapReact\r\n                                        bootstrapURLKeys={{ key: GOOGLE_API_KEY }}\r\n                                        center={marker}\r\n                                        zoom={zoom}\r\n                                        onClick={handleMapClick}\r\n                                        yesIWantToUseGoogleMapApiInternals\r\n                                        onGoogleApiLoaded={handleApiLoaded}\r\n                                    >\r\n                                        {marker && (\r\n                                            <AnyReactComponent lat={marker.lat} lng={marker.lng} text=\"\" />\r\n                                        )}\r\n                                    </GoogleMapReact>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row col-md-12\">\r\n                                <div className=\"col-md-3\">\r\n                                    <div className=\"form-group mb-3\">\r\n                                        <Label text={t(\"labels.isActive\")}/>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-9\">\r\n                                    <div className=\"form-group mb-3\">\r\n                                        <CustCheckbox\r\n                                            key={\"isActive\"}\r\n                                            id={`isActive`}\r\n                                            // label={\"Active\"}\r\n                                            checked={empLocationFormData?.isActive}\r\n                                            handleChange={(e) => handleFromChange(e)}\r\n                                            name={\"isActive\"}\r\n                                        />\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"offcanvas-footer\">\r\n                    <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                        <CustomButton\r\n                            text={selectedEmpLocation ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                            classNames={\"btn btn-org-gradient\"}\r\n                            handleClick={() => { bulkUpdate ? submitBulkUpdate() : submitAddUpdateEmpLocation() }}\r\n                        // isLoading={selectedEmpLocation ? updateClientPending : addClientPending}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {openModel && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AddUpdateLocation\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport ManageLocationTable from './ManageLocationTable'\r\nimport { employeeActions, locationActions } from '../../core/resource/actions'\r\nimport AddUpdateLocation from './AddUpdateLocation'\r\nimport { pagination } from '../../utils/Constants.config'\r\n\r\nconst ManageLocation = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const {\r\n        getAllEmployeeListRes,\r\n        getAllEmployeeListError,\r\n        getAllEmployeeListPending,\r\n\r\n        getAllEmployeePending,\r\n        getAllEmployeeRes,\r\n        getAllEmployeeError,\r\n    } = useSelector(state => state.employee)\r\n\r\n    const {\r\n        addEmployeeLocationPending,\r\n        addEmployeeLocationRes,\r\n        addEmployeeLocationError,\r\n\r\n        getEmployeeLocationPending,\r\n        getEmployeeLocationRes,\r\n        getEmployeeLocationError,\r\n\r\n        updateMultipleEmployeeLocationPending,\r\n        updateMultipleEmployeeLocationRes,\r\n        updateMultipleEmployeeLocationError,\r\n    } = useSelector(state => state.location)\r\n    const [allEmployeeList, setAllEmployeeListData] = useState('')\r\n    const [isOpenLocation, setIsOpenLocation] = useState('')\r\n    const [allLocationData, setAllLocationData] = useState('')\r\n    const [selectedEmployee, setSelectedEmployee] = useState('')\r\n    const [bulkUpdate, setBulkUpdate] = useState(false)\r\n    const [employeeList, setEmployeesList] = useState()\r\n    const [currentPage,setCurrentPage]=useState(1)\r\n    const toggleLocationModal = (data, type) => {\r\n        if (data) {\r\n            setSelectedEmployee(data)\r\n        } else {\r\n            setSelectedEmployee('')\r\n        }\r\n        setIsOpenLocation(!isOpenLocation)\r\n    }\r\n\r\n    useEffect(() => {\r\n        \r\n        getLocationData()\r\n        allEmployees()\r\n    }, [])\r\n    /* Get all Employee*/\r\n\r\n    useEffect(()=>{\r\n        getTeam()\r\n    },[currentPage])\r\n    const allEmployees = () => {\r\n      \r\n        dispatch(employeeActions.getAllEmployeeRequest())\r\n    }\r\n    useEffect(() => {\r\n        if (!getAllEmployeePending) {\r\n            if (getAllEmployeeError) {\r\n                return;\r\n            }\r\n            if (getAllEmployeeRes) {\r\n                if (getAllEmployeeRes?.code == 200) {\r\n                    const employeeListResponse = getAllEmployeeRes?.data\r\n                    setEmployeesList(employeeListResponse)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllEmployeeRes,\r\n        getAllEmployeeError,\r\n        getAllEmployeePending\r\n    ]);\r\n\r\n    /* Get All Employee List*/\r\n    const getTeam = () => {\r\n        const payload ={\r\n            page:currentPage,\r\n            limit:pagination.limit\r\n        }\r\n        dispatch(employeeActions.getAllEmployeeListRequest(payload))\r\n    }\r\n    useEffect(() => {\r\n        if (!getAllEmployeeListPending) {\r\n            if (getAllEmployeeListError) {\r\n                return;\r\n            }\r\n            if (getAllEmployeeListRes) {\r\n                if (getAllEmployeeListRes?.code == 200) {\r\n                    const employeeListResponse = getAllEmployeeListRes?.data\r\n                    setAllEmployeeListData(employeeListResponse)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllEmployeeListRes,\r\n        getAllEmployeeListError,\r\n        getAllEmployeeListPending\r\n    ]);\r\n\r\n    /* Get All Employee List*/\r\n    const getLocationData = () => {\r\n        dispatch(locationActions.getEmployeeLocationRequest())\r\n    }\r\n    useEffect(() => {\r\n        if (!getEmployeeLocationPending) {\r\n            if (getEmployeeLocationError) {\r\n                return;\r\n            }\r\n            if (getEmployeeLocationRes) {\r\n                if (getEmployeeLocationRes?.code == 200) {\r\n                    setAllLocationData(getEmployeeLocationRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getEmployeeLocationRes,\r\n        getEmployeeLocationError,\r\n        getEmployeeLocationPending\r\n    ]);\r\n\r\n    /* Get All Employee List*/\r\n    const handleAddUpdateEmpLocation = (payload) => {\r\n        dispatch(locationActions.addEmployeeLocationRequest(payload))\r\n    }\r\n    useEffect(() => {\r\n        if (!addEmployeeLocationPending) {\r\n            if (addEmployeeLocationError) {\r\n                dispatch(locationActions.handleClearLocationStore(\"HANDLE_ADD_EMPLOYEE_LOCATION_STATE_STORE\"))\r\n                return;\r\n            }\r\n            if (addEmployeeLocationRes) {\r\n                if (addEmployeeLocationRes?.code == 200) {\r\n                    // setAllLocationData(addEmployeeLocationRes?.data)\r\n                    dispatch(locationActions.handleClearLocationStore(\"HANDLE_ADD_EMPLOYEE_LOCATION_STATE_STORE\"))\r\n                    toggleLocationModal()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        addEmployeeLocationRes,\r\n        addEmployeeLocationError,\r\n        addEmployeeLocationPending\r\n    ]);\r\n\r\n    /* Update Multiple Employee Location*/\r\n    const handleBulkUpdateEmployee = (payload) => {\r\n        dispatch(locationActions.updateMultipleEmployeeLocationRequest(payload))\r\n    }\r\n    useEffect(() => {\r\n        if (!updateMultipleEmployeeLocationPending) {\r\n            if (updateMultipleEmployeeLocationError) {\r\n                dispatch(locationActions.handleClearLocationStore(\"HANDLE_UPDATE_MULTIPLE_EMPLOYEE_LOCATION_STORE\"))\r\n                return;\r\n            }\r\n            if (updateMultipleEmployeeLocationRes) {\r\n                if (updateMultipleEmployeeLocationRes?.code == 200) {\r\n                    dispatch(locationActions.handleClearLocationStore(\"HANDLE_UPDATE_MULTIPLE_EMPLOYEE_LOCATION_STORE\"))\r\n                    toggleLocationModal()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updateMultipleEmployeeLocationRes,\r\n        updateMultipleEmployeeLocationError,\r\n        updateMultipleEmployeeLocationPending\r\n    ]);\r\n    return (\r\n        <div className='cardBox'>\r\n            <ManageLocationTable\r\n                teamData={allEmployeeList}\r\n                toggleAddUpdateModal={toggleLocationModal}\r\n                setBulkUpdate={setBulkUpdate}\r\n                setCurrentPage={setCurrentPage}\r\n                currentPage={currentPage}\r\n                isLoading={getAllEmployeeListPending}\r\n            />\r\n\r\n            {isOpenLocation &&\r\n                <AddUpdateLocation\r\n                    openModel={isOpenLocation}\r\n                    handleOpenClose={toggleLocationModal}\r\n                    allLocationData={allLocationData}\r\n                    handleAddUpdateEmpLocation={handleAddUpdateEmpLocation}\r\n                    selectedEmployee={selectedEmployee}\r\n                    bulkUpdate={bulkUpdate}\r\n                    employeeList={employeeList}\r\n                    handleBulkUpdateEmployee={handleBulkUpdateEmployee}\r\n                />\r\n            }   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ManageLocation\r\n"],"names":["props","t","useCustomTranslation","currentPage","setCurrentPage","teamData","toggleAddUpdateModal","isLoading","handleEmpLocationDeleteModal","setBulkUpdate","scopedSlots","useMemo","sn","_","index","_jsx","children","is_active","item","className","getBadgeColor","action","_jsxs","type","onClick","Icon","style","fontSize","CustomButton","text","classNames","handleClick","CustomTable","data","fields","key","label","pagination","totalPages","isHeader","tableStyle","padding","boxShadow","AnyReactComponent","_ref","color","dispatch","useDispatch","openModel","handleOpenClose","handleAddUpdateEmpLocation","selectedEmpLocation","allLocationData","selectedEmployee","bulkUpdate","employeeList","handleBulkUpdateEmployee","errors","setErrors","useState","range","setRange","defaultLocation","setDefaultLocation","lat","lng","marker","setMarker","isSatellite","setIsSatellite","mapRef","useRef","circleRef","zoom","setZoom","selectedLocation","setSelectedLocation","filtersFields","setFiltersFields","searchLocation","searchLat","searchLng","bulkUpdateEmployees","setBulkUpdateEmployees","empLocationFormData","setEmpLocationFormData","location","latitude","longitude","isActive","address","useEffect","resetFormFields","handleFromChange","e","fieldName","_e$target","name","target","value","checked","prevState","prevErrors","undefined","handleFilterFieldsChange","_e$target2","updatedState","resetForm","window","google","maps","drawCircle","handleMapClick","_ref2","notificationActions","openSnackbar","alertType","geocoder","Geocoder","latlng","geocode","results","status","formattedAddress","formatted_address","prev","setMapType","map","setMapTypeId","MapTypeId","SATELLITE","ROADMAP","toggleMapType","current","setMap","Circle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","center","radius","pre","emp","_Fragment","tabIndex","visibility","width","id","src","height","CustomStrong","CustomSelect","placeholder","handleChange","selectedOption","Input","onChange","CustomError","async","geocodeParams","isNaN","parseFloat","isFinite","geometry","handleSearch","icon","isMulti","required","isDisabled","length","overflowY","ind","toFixed","min","max","step","handleChangeEmployeeRadius","updatedEmployees","parseInt","cursor","GoogleMapReact","bootstrapURLKeys","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","_ref3","Label","CustCheckbox","submitBulkUpdate","location_name","employee_detail","validationResponse","validateSchema","empLocationSchema","isValid","params","employee_id","attendance_radius","submitAddUpdateEmpLocation","ManageLocation","getAllEmployeeListRes","getAllEmployeeListError","getAllEmployeeListPending","getAllEmployeePending","getAllEmployeeRes","getAllEmployeeError","useSelector","state","employee","addEmployeeLocationPending","addEmployeeLocationRes","addEmployeeLocationError","getEmployeeLocationPending","getEmployeeLocationRes","getEmployeeLocationError","updateMultipleEmployeeLocationPending","updateMultipleEmployeeLocationRes","updateMultipleEmployeeLocationError","allEmployeeList","setAllEmployeeListData","isOpenLocation","setIsOpenLocation","setAllLocationData","setSelectedEmployee","setEmployeesList","toggleLocationModal","getLocationData","allEmployees","getTeam","employeeActions","getAllEmployeeRequest","code","employeeListResponse","payload","page","limit","getAllEmployeeListRequest","locationActions","getEmployeeLocationRequest","handleClearLocationStore","ManageLocationTable","AddUpdateLocation","addEmployeeLocationRequest","updateMultipleEmployeeLocationRequest"],"sourceRoot":""}