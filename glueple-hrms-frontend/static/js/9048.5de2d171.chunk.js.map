{"version":3,"file":"static/js/9048.5de2d171.chunk.js","mappings":"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","sources":["components/payrollAdmin/payRuns/attendanceTracking/EmployeeAttendanceFilters.js","components/payrollAdmin/payRuns/attendanceTracking/EmpAttendanceTable.js","components/payrollAdmin/payRuns/attendanceTracking/EmployeeAttendanceTracking.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport {Label } from '../../../commanComponent'\r\nimport CustomSelect from '../../../commanComponent/CustomSelect'\r\nimport { CustomDateRangePicker } from '../../../globalComponents'\r\nimport { useCustomTranslation } from '../../../../translation'\r\n\r\nconst EmployeeAttendanceFilters = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        attendanceType,\r\n        setAttendanceType,\r\n        startDate,\r\n        endDate,\r\n        handleDateRangeChange,\r\n        allLeaveConstantData,\r\n    } = props\r\n\r\n    return (\r\n        <>\r\n            <div className=\"formPanel cardBox w-100\">\r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"form-group mb-2\">\r\n                            <Label text={t(\"labels.date\")} />\r\n                            <div className=\"selectDate \">\r\n                                <CustomDateRangePicker\r\n                                    onDateRangeChange={(dateRange) => handleDateRangeChange(dateRange)}\r\n                                    endDefaultDate={endDate}\r\n                                    startDefaultDate={startDate}\r\n                                    // maxDisableDates={endDate}\r\n                                    maxDisableDates={endDate}\r\n                                    minDisableDates={startDate}\r\n                                />\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"form-group mb-2\">\r\n                            <Label text={t(\"labels.attendanceType\")} />\r\n                            <CustomSelect\r\n                                data={allLeaveConstantData?.[\"attendanceTrackingType\"]}\r\n                                placeholder={t(\"placeholders.attendanceType\")}\r\n                                value={attendanceType || ''}\r\n                                handleChange={(selectedOption) => setAttendanceType(selectedOption)}\r\n\r\n\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"col-md-4\">\r\n                        <div className=\"form-group mb-2\">\r\n                            <Label text={t(\"labels.employees\")} />\r\n                            <CustomSelect\r\n                                data={allEmployeeList}\r\n                                placeholder={t(\"placeholders.employees\")}\r\n                                value={filterFormData?.employees || ''}\r\n                                handleChange={(selectedOption) => handleFilterFormData(selectedOption, \"employees\")}\r\n                                name=\"employees\"\r\n                                isMulti={true}\r\n                                selectAllText={t(\"labels.selectAll\")}\r\n                            />\r\n\r\n                        </div>\r\n                    </div> */}\r\n                </div>\r\n                {/* <div className='d-flex justify-content-end'>\r\n\r\n                    <CustomButton\r\n                        classNames={\"btn btn-primary gradientBg\"}\r\n                        // handleClick={() => handleFilterEmployees()}\r\n                        text={t(\"btns.filter\")}\r\n                    />\r\n                </div> */}\r\n\r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EmployeeAttendanceFilters\r\n","import React, { useMemo } from 'react'\r\nimport { CustomTable } from '../../../reuseableComponents';\r\nimport { checkAttendanceStatus, dateFormate, } from '../../../../utils/common';\r\nimport CustomSelect from '../../../commanComponent/CustomSelect';\r\nimport { Input } from '../../../commanComponent';\r\nimport moment from 'moment';\r\nimport { convertToTS } from '../../../../utils/AppHelper';\r\nimport { CustomButton } from '../../../globalComponents';\r\n\r\nconst EmpAttendanceTable = (props) => {\r\n    const { allLeaveConstantData, currentPage, setCurrentPage, attendanceStatusData, attendanceType, handleChangeStatus, handlePunchInOut } = props\r\n    const employeeField = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'attendance_date', label: 'Attendance Date' },\r\n        { key: 'first_half_status', label: 'First Half Status' },\r\n        { key: 'second_half_status', label: 'Second Half Status' },\r\n        // { key: 'attendance_status', label: 'Attendance Status' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n\r\n    const employeeScopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        attendance_date: (item, index) => (\r\n            <span >{dateFormate(item?.attendance_date)}</span>\r\n        ),\r\n        first_half_status: (item) => (\r\n            <span className={`font-weight-bold ${checkAttendanceStatus(item?.first_half_status)}`}\r\n            >{item?.first_half_status}</span>\r\n        ),\r\n        second_half_status: (item) => (\r\n            <span className={checkAttendanceStatus(item?.second_half_status)}\r\n            >{item?.second_half_status}</span>\r\n        ),\r\n\r\n\r\n        action: item => (<>\r\n            {attendanceType?.value === \"punchInTime_punchOutTime\" ? <span className='d-flex gap-1'>\r\n                <Input\r\n                    type=\"time\"\r\n                    value={moment(item?.first_check_in_time, \"YYYY-MM-DD HH:mm:ss\").format(\"HH:mm:ss\")}\r\n                    name=\"first_check_in_time\"\r\n                    onChange={(e) => handlePunchInOut(e,\"\", item)}\r\n                    // min=\"00:00:00\"\r\n                    step=\"2\"\r\n                />\r\n                <Input\r\n                    type=\"time\"\r\n                    value={moment(item?.last_check_out_time, \"YYYY-MM-DD HH:mm:ss\").format(\"HH:mm:ss\")}\r\n                    name=\"last_check_out_time\"\r\n                    onChange={(e) => handlePunchInOut(e,\"\", item)}\r\n                    step=\"2\"\r\n                />\r\n                <div\r\n                    className=\"actionGroup \"\r\n                    onClick={() => handleChangeStatus( \"punchInTime_punchOutTime\",item )}>\r\n                    <img\r\n                        src=\"/images/approveIcon.svg\"\r\n                        alt=\"Approve Icon\"\r\n                        className='mt-1'\r\n                        width={70}\r\n                    />\r\n                </div>\r\n            </span> : <span className='d-flex gap-2'>\r\n                <div className='w-50'>\r\n                <CustomSelect\r\n                    data={allLeaveConstantData?.[\"presentStatus\"]}\r\n                    value={{ label: item?.attendance_status, value: item?.attendance_status } || ''}\r\n                    handleChange={(selectedOption) => handlePunchInOut(selectedOption,\"attendance_status\",item)}\r\n                />\r\n                </div>\r\n                <div\r\n                    className=\"actionGroup \"\r\n                    onClick={() => handleChangeStatus( \"present_absent\",item )}>\r\n                    <img\r\n                        src=\"/images/approveIcon.svg\"\r\n                        alt=\"Approve Icon\"\r\n                        className='mt-1'\r\n                        width={30}\r\n                    />\r\n                </div>\r\n            </span>}\r\n        </>\r\n        )\r\n    }), [attendanceStatusData, currentPage, attendanceType]);\r\n    return (\r\n        <>\r\n            <CustomTable\r\n                data={attendanceStatusData}\r\n                fields={employeeField}\r\n                // isLoading={isLoading}\r\n                pagination={true}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                totalPages={attendanceStatusData?.totalPages}\r\n                // tableName={\"\"}\r\n                // onSearch={handleSearch}\r\n                isHeader={false}\r\n                tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n                scopedSlots={employeeScopedSlots}\r\n            />\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default EmpAttendanceTable\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport {  leaveAction, payrollActions } from '../../../../core/resource/actions';\r\nimport EmployeeAttendanceFilters from './EmployeeAttendanceFilters';\r\nimport moment from 'moment';\r\nimport EmpAttendanceTable from './EmpAttendanceTable';\r\nimport { CustomButton } from '../../../globalComponents';\r\nimport ApproveRejectModal from '../../../modal/ApproveRejectModal';\r\nimport { useCustomTranslation } from '../../../../translation';\r\n\r\nconst EmployeeAttendanceTracking = () => {\r\n    const navigate = useNavigate()\r\n    const { t } = useCustomTranslation()\r\n    const { id, monthYear } = useParams();\r\n    const dispatch = useDispatch()\r\n    const [attendanceStatusData, setAttendanceStatusData] = useState([])\r\n    const [startDate, setStartDate] = useState();\r\n    const [endDate, setEndDate] = useState()\r\n    const [attendanceType, setAttendanceType] = useState({})\r\n    const [allLeaveConstantData, setAllLeaveConstantData] = useState([])\r\n    const [updateAttendanceStatusPayload, setUpdateAttendanceStatusPayload] = useState('')\r\n    const [isShowChangeStatusModal, setIsShowChangeStatusModal] = useState(false)\r\n    // const [minDate,setMinDate]=(moment()\r\n    // const [maxDate,setMaxDate]=()\r\n    const {\r\n        getAttendanceStatusPending,\r\n        getAttendanceStatusRes,\r\n        getAttendanceStatusError,\r\n\r\n        updateAttendanceTrackingPending,\r\n        updateAttendanceTrackingRes,\r\n        updateAttendanceTrackingError,\r\n\r\n        selectedEmployeeData,\r\n\r\n    } = useSelector(state => state.payroll)\r\n\r\n    const {\r\n\r\n        getLeaveConstantDataPending,\r\n        getLeaveConstantDataRes,\r\n        getLeaveConstantDataError,\r\n\r\n    } = useSelector(state => state.leave);\r\n\r\n    useEffect(() => {\r\n        getAttendanceStatus()\r\n        getLeaveConstantData()\r\n    }, [id])\r\n\r\n    useEffect(()=>{\r\n        setStartDate(moment(monthYear, \"YYYY-MM\").startOf(\"month\").format(\"YYYY-MM-DD\"))\r\n        setEndDate(moment(monthYear, \"YYYY-MM\").endOf(\"month\").format(\"YYYY-MM-DD\"))\r\n    },[monthYear])\r\n\r\n    /* Get Attendance Status  */\r\n    const getAttendanceStatus = (filterStartDate, filterEndDate) => {\r\n        const payload = {\r\n            emp_id: id || '',\r\n            start_date: filterStartDate && moment(filterStartDate).format('YYYY-MM-DD') || startDate,\r\n            end_date: filterEndDate && moment(filterEndDate).format('YYYY-MM-DD') || endDate\r\n\r\n        }\r\n        dispatch(payrollActions.getAttendanceStatusRequest(payload));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAttendanceStatusPending) {\r\n            if (getAttendanceStatusError) {\r\n                return;\r\n            }\r\n            if (getAttendanceStatusRes) {\r\n                if (getAttendanceStatusRes?.code === 200) {\r\n                    setAttendanceStatusData(getAttendanceStatusRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAttendanceStatusRes,\r\n        getAttendanceStatusError,\r\n        getAttendanceStatusPending\r\n    ]);\r\n\r\n    /* Get Leave Constant Data */\r\n    const getLeaveConstantData = () => {\r\n        dispatch(leaveAction.getLeaveConstantDataRequest());\r\n    }\r\n    useEffect(() => {\r\n        if (!getLeaveConstantDataPending) {\r\n            if (getLeaveConstantDataError) {\r\n                return;\r\n            }\r\n            if (getLeaveConstantDataRes) {\r\n                if (getLeaveConstantDataRes?.code === 200) {\r\n                    const getLeaveConstantData = getLeaveConstantDataRes?.data\r\n                    setAllLeaveConstantData(getLeaveConstantData)\r\n                    if (Object.keys(getLeaveConstantData).includes(\"attendanceTrackingType\")) {\r\n                        setAttendanceType(getLeaveConstantData?.attendanceTrackingType[0])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getLeaveConstantDataRes,\r\n        getLeaveConstantDataError,\r\n        getLeaveConstantDataPending\r\n    ]);\r\n\r\n\r\n\r\n    const handleDateRangeChange = (dateRange) => {\r\n        setStartDate(dateRange[0])\r\n        setEndDate(dateRange[1])\r\n        getAttendanceStatus(dateRange[0], dateRange[1])\r\n    }\r\n\r\n    const navigateToBack = () => {\r\n        navigate(\"/pay-runs\")\r\n    }\r\n\r\n    const handleChangeStatus = (statusType, selectedData,) => {\r\n        let payload = {\r\n            emp_id: id,\r\n            type: attendanceType?.value,\r\n\r\n        }\r\n        if (statusType === \"present_absent\") {\r\n            payload = {\r\n                ...payload,\r\n                attendance_date: selectedData?.attendance_date,\r\n                updated_status: selectedData?.attendance_status,\r\n            }\r\n\r\n        } else if (statusType === \"punchInTime_punchOutTime\") {\r\n            payload = {\r\n                ...payload,\r\n                attendance_date: selectedData?.attendance_date,\r\n                punch_in_time: selectedData?.first_check_in_time,\r\n                punch_out_time: selectedData?.last_check_out_time,\r\n            }\r\n        } else if (statusType === \"submit\") {\r\n            payload = {\r\n                ...payload,\r\n                attendance_details: attendanceStatusData,\r\n            }\r\n        }\r\n\r\n        setUpdateAttendanceStatusPayload(payload)\r\n        toggleAttendanceStatus()\r\n    }\r\n    const handlePunchInOut = (e, fieldName, selectedData) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value } = e?.target ? e.target : { value: e?.value };\r\n\r\n        const tempAttendanceStatus = attendanceStatusData.map((item) => {\r\n            if (item?.id === selectedData?.id) {\r\n                if (attendanceType?.value === \"punchInTime_punchOutTime\") {\r\n                    return { ...item, [name]: `${selectedData?.attendance_date} ${value}` };\r\n                } else {\r\n                    return { ...item, [name]: value };\r\n                }\r\n            }\r\n            return item;\r\n        });\r\n        setAttendanceStatusData(tempAttendanceStatus)\r\n    }\r\n\r\n    const toggleAttendanceStatus = () => {\r\n        setIsShowChangeStatusModal(!isShowChangeStatusModal)\r\n    }\r\n\r\n    const handleApproveRejectAttendanceStatus = (type) => {\r\n        if (type) {\r\n            dispatch(payrollActions?.updateAttendanceTrackingRequest(updateAttendanceStatusPayload))\r\n        } else {\r\n            toggleAttendanceStatus()\r\n        }\r\n    }\r\n\r\n    /* Update Attendance Tracking */\r\n    useEffect(() => {\r\n        if (!updateAttendanceTrackingPending) {\r\n            if (updateAttendanceTrackingError) {\r\n                return;\r\n            }\r\n            if (updateAttendanceTrackingRes) {\r\n                if (updateAttendanceTrackingRes?.code === 200) {\r\n                    dispatch(payrollActions.handleClearPayrollStore(\"HANDLE_CLEAR_UPDATE_ATTENDANCE_TRACKING_STORE\"))\r\n                    toggleAttendanceStatus()\r\n                    getAttendanceStatus()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updateAttendanceTrackingRes,\r\n        updateAttendanceTrackingError,\r\n        updateAttendanceTrackingPending\r\n    ]);\r\n\r\n    return (\r\n        <>\r\n            <CustomButton\r\n                classNames={\"btn btn-org-gradient mb-2\"}\r\n                handleClick={() => navigateToBack()}\r\n                text={\"Back\"}\r\n\r\n            />\r\n            <div className=\"tab-pane fade show active\" id=\"receivedFeedback\">\r\n                <div className=\"cardBox myRequest mb-3\">\r\n                    <div className=\"d-flex align-items-center mb-3\">\r\n                        <img\r\n                            src=\"/images/kpi-guidline.svg\"\r\n                            alt=\"\"\r\n                            width={40}\r\n                            className=\"me-2 fw-bold\"\r\n                        />\r\n                        <div className=\" mb-2 mt-3\">\r\n                            <h3 className='underlineHead' style={{ fontSize: \"18px\",color:\"#00376A !important\" }}>\r\n                                {selectedEmployeeData?.name}{\" \"}{`(${selectedEmployeeData?.emp_id})`}\r\n                            </h3>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"cardHead d-flex justify-content-between\">\r\n                        <EmployeeAttendanceFilters\r\n                            attendanceType={attendanceType}\r\n                            setAttendanceType={setAttendanceType}\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            handleDateRangeChange={handleDateRangeChange}\r\n                            allLeaveConstantData={allLeaveConstantData}\r\n                            \r\n                        />\r\n                    </div>\r\n                    <EmpAttendanceTable\r\n                        attendanceStatusData={attendanceStatusData}\r\n                        allLeaveConstantData={allLeaveConstantData}\r\n                        attendanceType={attendanceType}\r\n                        handleChangeStatus={handleChangeStatus}\r\n                        handlePunchInOut={handlePunchInOut}\r\n                    />\r\n                    <div className='d-flex justify-content-end'>\r\n                        <CustomButton\r\n                            classNames={\"btn btn-primary mb-2\"}\r\n                            handleClick={() => handleChangeStatus(\"submit\")}\r\n                            text={\"Submit\"}\r\n\r\n                        />\r\n                    </div>\r\n                    {isShowChangeStatusModal && (\r\n                        <ApproveRejectModal\r\n                            onApproveReject={handleApproveRejectAttendanceStatus}\r\n                            isShow={isShowChangeStatusModal}\r\n                            desc={t(\"alerts.ApproveRejectPopup.desc\").replace('$1', \"Change Attendance Status\")}\r\n                            // btnRightLoading={deleteDepartmentPending}\r\n                            btnTextRight={t(\"btns.submit\")}\r\n                            btnTextLeft={t(\"btns.cancel\")}\r\n                        />)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EmployeeAttendanceTracking\r\n"],"names":["props","t","useCustomTranslation","attendanceType","setAttendanceType","startDate","endDate","handleDateRangeChange","allLeaveConstantData","_jsx","_Fragment","children","className","_jsxs","Label","text","CustomDateRangePicker","onDateRangeChange","dateRange","endDefaultDate","startDefaultDate","maxDisableDates","minDisableDates","CustomSelect","data","placeholder","value","handleChange","selectedOption","currentPage","setCurrentPage","attendanceStatusData","handleChangeStatus","handlePunchInOut","employeeScopedSlots","useMemo","sn","_","index","attendance_date","item","dateFormate","first_half_status","checkAttendanceStatus","second_half_status","action","Input","type","moment","first_check_in_time","format","name","onChange","e","step","last_check_out_time","onClick","src","alt","width","label","attendance_status","CustomTable","fields","key","pagination","totalPages","isHeader","tableStyle","padding","boxShadow","scopedSlots","EmployeeAttendanceTracking","navigate","useNavigate","id","monthYear","useParams","dispatch","useDispatch","setAttendanceStatusData","useState","setStartDate","setEndDate","setAllLeaveConstantData","updateAttendanceStatusPayload","setUpdateAttendanceStatusPayload","isShowChangeStatusModal","setIsShowChangeStatusModal","getAttendanceStatusPending","getAttendanceStatusRes","getAttendanceStatusError","updateAttendanceTrackingPending","updateAttendanceTrackingRes","updateAttendanceTrackingError","selectedEmployeeData","useSelector","state","payroll","getLeaveConstantDataPending","getLeaveConstantDataRes","getLeaveConstantDataError","leave","useEffect","getAttendanceStatus","getLeaveConstantData","startOf","endOf","filterStartDate","filterEndDate","payload","emp_id","start_date","end_date","payrollActions","getAttendanceStatusRequest","code","leaveAction","getLeaveConstantDataRequest","Object","keys","includes","attendanceTrackingType","statusType","selectedData","updated_status","punch_in_time","punch_out_time","attendance_details","toggleAttendanceStatus","handleClearPayrollStore","CustomButton","classNames","handleClick","style","fontSize","color","EmployeeAttendanceFilters","EmpAttendanceTable","fieldName","_e$target","target","tempAttendanceStatus","map","ApproveRejectModal","onApproveReject","updateAttendanceTrackingRequest","isShow","desc","replace","btnTextRight","btnTextLeft"],"sourceRoot":""}