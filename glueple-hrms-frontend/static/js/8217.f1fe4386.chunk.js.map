{"version":3,"file":"static/js/8217.f1fe4386.chunk.js","mappings":"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","sources":["components/admin/location/CreateUpdateLocation.js","components/admin/location/LocationTable.js","components/admin/location/Location.js","components/modal/ApproveRejectModal.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { validateSchema } from '../../../utils/ValidationHelper'\r\nimport { createUpdateLocationSchema } from '../../../utils/ValidationSchema'\r\nimport { createShortName } from '../../../utils/common'\r\nimport { CustCheckbox, Input, Label } from '../../commanComponent'\r\nimport { CustomButton, CustomError } from '../../globalComponents'\r\nimport CustomSelect from '../../commanComponent/CustomSelect'\r\nimport { useCustomTranslation } from '../../../translation'\r\nconst CreateUpdateLocation = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const { createLocationPending, updateLocationPending } = useSelector(state => state?.location)\r\n    const {\r\n        selectedLocationData,\r\n        openModel,\r\n        handleOpenClose,\r\n        handleCreateUpdateLocation,\r\n        allCountriesListData,\r\n        handleStateCity,\r\n        allStateListData,\r\n        allCityList\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [createUpdateLocationFormData, setCreateUpdateLocationFormData] = useState({\r\n        name: '',\r\n        address: '',\r\n        country: null,\r\n        city: null,\r\n        state: null,\r\n        postal_code: '',\r\n        office_start_time: '',\r\n        office_end_time: '',\r\n        employee_leave_year_start: '',\r\n        office_working_hours: '',\r\n        is_active: true\r\n    })\r\n\r\n    //     const name = fieldName || e.target?.name;\r\n    //     const { value, type, checked } = e.target ? e.target : { value: e };\r\n\r\n    //     setCreateUpdateLocationFormData(prevState => {\r\n    //         const updatedState = {\r\n    //             ...prevState,\r\n    //             [name]: type === 'checkbox' ? checked : value,\r\n    //         };\r\n    //         if (name === 'name') {\r\n    //             updatedState.short_name = createShortName(value);\r\n    //         }\r\n    //         if(name === 'country'  ){\r\n    //             handleStateCity(value,name)\r\n    //             updatedState.state = null;\r\n    //             updatedState.city = null;\r\n    //         }\r\n    //         if(name === 'state'){\r\n    //             handleStateCity(value,name)\r\n    //             updatedState.city = null;\r\n    //         }\r\n    //         return updatedState;\r\n    //     });\r\n\r\n    //     // Reset error for this field\r\n    //     setErrors(prevErrors => ({\r\n    //         ...prevErrors,\r\n    //         [name]: undefined,\r\n    //     }));\r\n    // };\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e?.target : { value: e };\r\n\r\n        setCreateUpdateLocationFormData(prevState => {\r\n            let updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n\r\n            // Automatically create short name when 'name' is updated\r\n            if (name === 'name') {\r\n                updatedState = {\r\n                    ...updatedState,\r\n                    short_name: createShortName(value),\r\n                };\r\n            }\r\n            if (name === 'country') {\r\n                updatedState = {\r\n                    ...updatedState,\r\n                    state: null,  // Reset state when country changes\r\n                    city: null,   // Reset city as well\r\n                };\r\n                handleStateCity(value, name);\r\n            }\r\n            if (name === 'state') {\r\n                updatedState = {\r\n                    ...updatedState,\r\n                    city: null,  // Reset city when state changes\r\n                };\r\n                handleStateCity(value, name);\r\n            }\r\n\r\n            return updatedState;\r\n        });\r\n\r\n        // Clear error for the specific field being changed\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitCreateUpdateLocation = async () => {\r\n        const validationResponse = await validateSchema(createUpdateLocationSchema, createUpdateLocationFormData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n                name,\r\n                address,\r\n                country,\r\n                city,\r\n                state,\r\n                postal_code,\r\n                office_start_time,\r\n                office_end_time,\r\n                employee_leave_year_start,\r\n                office_working_hours,\r\n                is_active\r\n            } = createUpdateLocationFormData\r\n            const params = {\r\n                name,\r\n                address,\r\n                [\"country\"]: country?.value,\r\n                city: city?.value,\r\n                state: state?.value,\r\n                postal_code,\r\n                office_start_time,\r\n                office_end_time,\r\n                employee_leave_year_start,\r\n                office_working_hours,\r\n                is_active\r\n            }\r\n            handleCreateUpdateLocation(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (selectedLocationData) {\r\n            setCreateUpdateLocationFormData({\r\n                name: selectedLocationData?.name,\r\n                address: selectedLocationData?.address,\r\n                country: {value:selectedLocationData?.country,label:selectedLocationData?.country_name},\r\n                city: {value :selectedLocationData?.city, label:selectedLocationData?.city_name},\r\n                state: {value :selectedLocationData?.state, label:selectedLocationData?.state_name},\r\n                postal_code: selectedLocationData?.postal_code,\r\n                office_start_time: selectedLocationData?.office_start_time,\r\n                office_end_time: selectedLocationData?.office_end_time,\r\n                employee_leave_year_start: selectedLocationData?.employee_leave_year_start,\r\n                office_working_hours: selectedLocationData?.office_working_hours,\r\n                is_active: selectedLocationData?.is_active\r\n            })\r\n        }\r\n    }, [selectedLocationData])\r\n\r\n    const resetForm = () => {\r\n        setCreateUpdateLocationFormData({\r\n            name: '',\r\n            address: '',\r\n            country: null,\r\n            city: '',\r\n            state: '',\r\n            postal_code: '',\r\n            office_start_time: '',\r\n            office_end_time: '',\r\n            employee_leave_year_start: '',\r\n            office_working_hours: '',\r\n            is_active: true,\r\n        })\r\n        setErrors({})\r\n    }\r\n    return (\r\n        <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n            tabIndex={-1}\r\n            style={{\r\n                visibility: openModel ? 'visible' : 'hidden',\r\n                width: \"800px\"\r\n            }}\r\n            id=\"interviewDetail\"\r\n        >\r\n            <div className=\"offcanvas-header\">\r\n                <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{selectedLocationData ? \"Update\" : \"Add\"} Location</h5>\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                    onClick={() => handleOpenClose()}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"offcanvas-body myRequest \">\r\n                <div className=\"formPanel\">\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-md-6\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.locationName\")} required={true} />\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    placeholder={t(\"placeholders.locationName\")}\r\n                                    value={createUpdateLocationFormData?.name}\r\n                                    name=\"name\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                                {errors?.name && (\r\n                                    <CustomError text={errors.name} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.officeWorkingHours\")} />\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    placeholder={t(\"placeholders.enterOfficeWorkingHours\")}\r\n                                    value={createUpdateLocationFormData?.office_working_hours}\r\n                                    name=\"office_working_hours\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.officeStartTime\")} />\r\n                                <Input\r\n                                    type=\"time\"\r\n                                    value={createUpdateLocationFormData?.office_start_time}\r\n                                    name=\"office_start_time\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.officeEndTime\")} />\r\n                                <Input\r\n                                    type=\"time\"\r\n                                    value={createUpdateLocationFormData?.office_end_time}\r\n                                    name=\"office_end_time\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.employeeLeaveYearStart\")} />\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    placeholder={t(\"placeholders.employeeLeaveYearStart\")}\r\n                                    value={createUpdateLocationFormData?.employee_leave_year_start}\r\n                                    name=\"employee_leave_year_start\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.country\")} />\r\n                                <CustomSelect\r\n                                    data={allCountriesListData}\r\n                                    placeholder={t(\"placeholders.selectCountry\")}\r\n                                    value={createUpdateLocationFormData?.country || ''}\r\n                                    handleChange={(selectedOption) => handleFromChange(selectedOption, \"country\")}\r\n                                    name=\"country\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.state\")} />\r\n                                <CustomSelect\r\n                                    data={allStateListData}\r\n                                    placeholder={t(\"placeholders.selectState\")}\r\n                                    value={createUpdateLocationFormData?.state || ''}\r\n                                    handleChange={(selectedOption) => handleFromChange(selectedOption, \"state\")}\r\n                                    name=\"state\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.city\")} />\r\n                                <CustomSelect\r\n                                    data={allCityList}\r\n                                    placeholder={t(\"placeholders.selectCity\")}\r\n                                    value={createUpdateLocationFormData?.city || ''}\r\n                                    handleChange={(selectedOption) => handleFromChange(selectedOption, \"city\")}\r\n                                    name=\"city\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.postalCode\")} />\r\n                                <Input\r\n                                    type=\"number\"\r\n                                    placeholder={t(\"placeholders.selectPostalCode\")}\r\n                                    value={createUpdateLocationFormData?.postal_code}\r\n                                    name=\"postal_code\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.address\")} />\r\n                                <textarea\r\n                                    className=\"w-100 form-control\"\r\n                                    placeholder={t(\"placeholders.address\")}\r\n                                    name=\"address\"\r\n                                    value={createUpdateLocationFormData?.address}\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.isActive\")} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <CustCheckbox\r\n                                    key={\"is_active\"}\r\n                                    id={`is_active`}\r\n                                    // label={\"Active\"}\r\n                                    checked={createUpdateLocationFormData?.is_active}\r\n                                    handleChange={(e) => handleFromChange(e)}\r\n                                    name={\"is_active\"}\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"offcanvas-footer\">\r\n                <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                    <CustomButton\r\n                        text={selectedLocationData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                        classNames={\"btn btn-org-gradient\"}\r\n                        handleClick={() => submitCreateUpdateLocation()}\r\n                        isLoading={selectedLocationData ? updateLocationPending : createLocationPending}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateUpdateLocation\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomTable } from '../../reuseableComponents'\r\nimport { getBadgeColor } from '../../../utils/common'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment'\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst LocationTable = (props) => {\r\n    const {t}= useCustomTranslation()\r\n    const {\r\n        isLoading,\r\n        setSelectedLocationData,\r\n        handleCreateUpdateLocationModal,\r\n        toggleLocationDeleteModal,\r\n        currentPage,\r\n        setCurrentPage,\r\n        allLocations\r\n    } = props\r\n    const [locationList, setLocationList] = useState('')\r\n\r\n\r\n    const handleUpdateLocation = (data) => {\r\n        handleCreateUpdateLocationModal(data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setLocationList(allLocations)\r\n    }, [allLocations])\r\n\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n        action: item => (\r\n            <div className=\"actionGroup d-flex gap-2\">\r\n                <CustomButton\r\n                    text={t(\"btns.update\")}\r\n                    classNames=\"btn btn-primary\"\r\n                    handleClick={() => {\r\n                        handleUpdateLocation(item);\r\n                    }}\r\n                />\r\n                <CustomButton\r\n                    text={t(\"btns.delete\")}\r\n                    handleClick={() => toggleLocationDeleteModal(item.id||item._id)}\r\n                    classNames=\"btn btn-danger\"\r\n                />\r\n            </div>\r\n        )\r\n    }), [setSelectedLocationData, handleCreateUpdateLocationModal]);\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'name', label: 'Location Name' },\r\n        { key: 'office_start_time', label: 'Office Start Time ' },\r\n        { key: 'office_end_time', label: 'Office End Time ' },\r\n        { key: 'office_working_hours', label: 'Office Working Hours ' },\r\n        { key: 'is_active', label: 'Status' },\r\n        { key: 'created_at', label: 'Created At' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n  return (\r\n    <>\r\n       <CustomTable\r\n                data={locationList?.data}\r\n                fields={fields}\r\n                isLoading={isLoading}\r\n                pagination={true}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                totalPages={locationList?.totalPages}\r\n                tableName={t(\"headings.location\")}\r\n                // onSearch={handleSearch}\r\n                scopedSlots={scopedSlots}\r\n            />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default LocationTable\r\n","import React, { useEffect, useState } from 'react'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { locationActions } from '../../../core/resource/actions'\r\nimport { pagination } from '../../../utils/Constants.config'\r\nimport CreateUpdateLocation from './CreateUpdateLocation'\r\nimport LocationTable from './LocationTable'\r\nimport ApproveRejectModal from '../../modal/ApproveRejectModal'\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst Location = () => {\r\n    const dispatch = useDispatch()\r\n    const {t}=useCustomTranslation()\r\n    const {\r\n        createLocationPending,\r\n        createLocationRes,\r\n        createLocationError,\r\n\r\n        updateLocationPending,\r\n        updateLocationRes,\r\n        updateLocationError,\r\n\r\n        deleteLocationPending,\r\n        deleteLocationRes,\r\n        deleteLocationError,\r\n\r\n        getAllLocationsDataPending,\r\n        getAllLocationsDataRes,\r\n        getAllLocationsDataError,\r\n\r\n        getAllCountriesListPending,\r\n        getAllCountriesListRes,\r\n        getAllCountriesListError,\r\n\r\n        getAllStateFromCountryListPending,\r\n        getAllStateFromCountryListRes,\r\n        getAllStateFromCountryListError,\r\n\r\n        getCityListFromStatePending,\r\n        getCityListFromStateRes,\r\n        getCityListFromStateError,\r\n\r\n    } = useSelector(state => state.location)\r\n    const [isOpenCreateUpdateLocation, setIsOpenCreateUpdateLocation] = useState(false)\r\n    const [selectedLocationData, setSelectedLocationData] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [isShowDeleteLocationModal, setIsShowDeleteLocationModal] = useState(false)\r\n    const [deleteLocationId, setDeleteLocationId] = useState('')\r\n    const [allLocations, setAllLocations] = useState('')\r\n    const [allCountriesListData, setAllCountriesListData] = useState('')\r\n    const [allStateListData, setAllStateListData] = useState('')\r\n    const [allCityList, setAllCityList] = useState('')\r\n\r\n    /* Create Update Location */\r\n    const handleCreateUpdateLocationModal = (data) => {\r\n        if (!data) {\r\n            setSelectedLocationData('')\r\n        } else {\r\n            setSelectedLocationData(data)\r\n        }\r\n        setIsOpenCreateUpdateLocation(!isOpenCreateUpdateLocation)\r\n    }\r\n\r\n    const handleCreateUpdateLocation = (params) => {\r\n        if (selectedLocationData) {\r\n            params['_id'] = selectedLocationData?.id ||selectedLocationData?._id\r\n            dispatch(locationActions.updateLocationRequest(params));\r\n        }\r\n        else {\r\n            dispatch(locationActions.createLocationRequest(params));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!createLocationPending) {\r\n            if (createLocationError) {\r\n                dispatch(locationActions.handleClearLocationStore('HANDLE_CLEAR_CREATE_LOCATION_STORE'))\r\n                return;\r\n            }\r\n            if (createLocationRes) {\r\n                if (createLocationRes?.code === 200) {\r\n                    dispatch(locationActions.handleClearLocationStore('HANDLE_CLEAR_CREATE_LOCATION_STORE'))\r\n                    getAllLocations()\r\n                    setIsOpenCreateUpdateLocation(!isOpenCreateUpdateLocation)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        createLocationRes,\r\n        createLocationError,\r\n        createLocationPending\r\n    ]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!updateLocationPending) {\r\n            if (updateLocationError) {\r\n                dispatch(locationActions.handleClearLocationStore(\"HANDLE_CLEAR_UPDATE_LOCATION_STORE\"))\r\n                return;\r\n            }\r\n            if (updateLocationRes) {\r\n                if (updateLocationRes?.code === 200) {\r\n                    dispatch(locationActions.handleClearLocationStore(\"HANDLE_CLEAR_UPDATE_LOCATION_STORE\"))\r\n                    getAllLocations()\r\n                    setIsOpenCreateUpdateLocation(!isOpenCreateUpdateLocation)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updateLocationRes,\r\n        updateLocationError,\r\n        updateLocationPending\r\n    ]);\r\n\r\n    /* Get All Locations Data */\r\n    useEffect(() => {\r\n        getAllLocations()\r\n    }, [currentPage])\r\n\r\n    const getAllLocations = () => {\r\n        const params = {\r\n            page: currentPage,\r\n            limit: pagination.limit,\r\n        }\r\n        dispatch(locationActions.getAllLocationsDataRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllLocationsDataPending) {\r\n            if (getAllLocationsDataError) {\r\n                return;\r\n            }\r\n            if (getAllLocationsDataRes) {\r\n                if (getAllLocationsDataRes?.code === 200) {\r\n                    setAllLocations(getAllLocationsDataRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllLocationsDataRes,\r\n        getAllLocationsDataError,\r\n        getAllLocationsDataPending\r\n    ]);\r\n\r\n\r\n\r\n    /* Delete Location */\r\n    const toggleLocationDeleteModal = (id) => {\r\n        if(id){\r\n            setDeleteLocationId(id)\r\n        }\r\n        setIsShowDeleteLocationModal(!isShowDeleteLocationModal)\r\n    }\r\n\r\n    const handleDeleteLocation = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deleteLocationId\r\n            }\r\n            dispatch(locationActions?.deleteLocationRequest(params))\r\n        } else {\r\n            toggleLocationDeleteModal()\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!deleteLocationPending) {\r\n            if (deleteLocationError) {\r\n                dispatch(locationActions.handleClearLocationStore(\"HANDLE_CLEAR_DELETE_LOCATION_STORE\"))\r\n                return;\r\n            }\r\n            if (deleteLocationRes) {\r\n                if (deleteLocationRes?.code === 200) {\r\n                    if(currentPage >1 && allLocations?.data?.length===1){\r\n                        setCurrentPage((pre=> pre -= 1 ))\r\n                    }else{\r\n                        getAllLocations()\r\n                    }\r\n                    dispatch(locationActions.handleClearLocationStore(\"HANDLE_CLEAR_DELETE_LOCATION_STORE\"))\r\n                    toggleLocationDeleteModal()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        deleteLocationRes,\r\n        deleteLocationError,\r\n        deleteLocationPending\r\n    ]);\r\n\r\n\r\n    /* Get All  location list */ \r\n    useEffect(() => {\r\n        getAllLocationList()\r\n    }, [])\r\n\r\n    const getAllLocationList = () => {\r\n        dispatch(locationActions.getAllCountriesListRequest());\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllCountriesListPending) {\r\n            if (getAllCountriesListError) {\r\n                return;\r\n            }\r\n            if (getAllCountriesListRes) {\r\n                if (getAllCountriesListRes?.code === 200) {\r\n                    const getAllCountriesListResData = getAllCountriesListRes?.data\r\n                    setAllCountriesListData(getAllCountriesListResData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllCountriesListRes,\r\n        getAllCountriesListError,\r\n        getAllCountriesListPending\r\n    ]);\r\n\r\n    const setFilterValues = (data) => {\r\n        const tempData = []\r\n        data && data?.map((item) => {\r\n            tempData.push(item?.id)\r\n        })\r\n        return tempData\r\n    }\r\n\r\n    /* Get All State From Country list */ \r\n    const getAllStateFromCountryList = (id) => {\r\n        const country_id = setFilterValues(id)\r\n        const params = {\r\n            country_id: country_id || ''\r\n        }\r\n        dispatch(locationActions.getAllStateFromCountryListRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllStateFromCountryListPending) {\r\n            if (getAllStateFromCountryListError) {\r\n                return;\r\n            }\r\n            if (getAllStateFromCountryListRes) {\r\n                if (getAllStateFromCountryListRes?.code === 200) {\r\n                    setAllStateListData(getAllStateFromCountryListRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllStateFromCountryListRes,\r\n        getAllStateFromCountryListError,\r\n        getAllStateFromCountryListPending\r\n    ]);\r\n\r\n    const handleStateCity = (value, type) => {\r\n        if (type === \"country\") {\r\n            getAllStateFromCountryList([value])\r\n        }\r\n        else if (type === \"state\") {\r\n            getCityListFromState([value])\r\n        }\r\n    }\r\n\r\n    /* get all  location list */ \r\n    const getCityListFromState = (id) => {\r\n        const state_id = setFilterValues(id)\r\n        const params = {\r\n            state_id: state_id || ''\r\n        }\r\n        dispatch(locationActions.getCityListFromStateRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getCityListFromStatePending) {\r\n            if (getCityListFromStateError) {\r\n                return;\r\n            }\r\n            if (getCityListFromStateRes) {\r\n                if (getCityListFromStateRes?.code === 200) {\r\n                    setAllCityList(getCityListFromStateRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getCityListFromStateRes,\r\n        getCityListFromStateError,\r\n        getCityListFromStatePending\r\n    ]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"d-flex  justify-content-end \">\r\n                <CustomButton\r\n                    classNames={\"btn btn-primary gradientBg\"}\r\n                    handleClick={() => handleCreateUpdateLocationModal()}\r\n                    text={t(\"btns.createLocation\")}\r\n                />\r\n            </div>\r\n            <CreateUpdateLocation\r\n                openModel={isOpenCreateUpdateLocation}\r\n                handleOpenClose={handleCreateUpdateLocationModal}\r\n                handleCreateUpdateLocation={handleCreateUpdateLocation}\r\n                selectedLocationData={selectedLocationData}\r\n                allCountriesListData={allCountriesListData}\r\n                handleStateCity={handleStateCity}\r\n                allStateListData={allStateListData}\r\n                allCityList={allCityList}\r\n            />\r\n            <LocationTable\r\n                setSelectedLocationData={setSelectedLocationData}\r\n                handleCreateUpdateLocationModal={handleCreateUpdateLocationModal}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                toggleLocationDeleteModal={toggleLocationDeleteModal}\r\n                allLocations={allLocations}\r\n                isLoading={getAllLocationsDataPending}\r\n            />\r\n\r\n            {isShowDeleteLocationModal && (\r\n                <ApproveRejectModal\r\n                    onApproveReject={handleDeleteLocation}\r\n                    isShow={isShowDeleteLocationModal}\r\n                    desc={t(\"alerts.deletePopup.desc\").replace('$1',\"Location\")}\r\n                    btnRightLoading={deleteLocationPending}\r\n                    btnTextRight={t(\"btns.delete\")}\r\n                    btnTextLeft={t(\"btns.cancel\")}\r\n\r\n                />)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Location\r\n","import React from 'react'\r\nimport Lottieplayer from '../commanComponent/Lottieplayer'\r\nimport backup from '../../../src/images/Backup.json'\r\nimport { CustomButton } from '../globalComponents'\r\nimport PropTypes from 'prop-types'\r\nimport { useCustomTranslation } from '../../translation'\r\n\r\n/**\r\n * ApproveRejectModal component.\r\n * @param {string} [title=\"Are You Sure?\"] - Title of the modal (optional, defaults to \"Are You Sure?\")\r\n * @param {string} [desc] - Description text (optional).\r\n * @param {function} onApproveReject - Callback function for handling approve/reject actions (required).\r\n * @param {boolean} isShow - Boolean flag to show or hide the modal (required).\r\n * @param {boolean} [btnRightLoading=false] - Boolean flag to show loading state for the right button (optional).\r\n * @param {string} [btnTextLeft=\"Cancel\"] - Custom text for the left button (optional).\r\n * @param {string} [btnTextRight=\"Confirm\"] - Custom text for the right button (optional).\r\n * @returns {void}\r\n */\r\nconst ApproveRejectModal = (\r\n  {  \r\n    title ,               \r\n    desc = \"\",                           \r\n    onApproveReject,                      \r\n    isShow,                               \r\n    btnLeftLoading = false,               \r\n    btnRightLoading = false,              \r\n    btnTextLeft ,               \r\n    btnTextRight     \r\n}\r\n) => {\r\n    const {t} =useCustomTranslation()\r\n    return (\r\n        <>\r\n            <div className=\"modal fade attendanceViewodal\" id=\"sureMdl\" style={{ display: isShow ? \"unset !important\" : \"none !important\", opacity: isShow ? \"unset\" : \"0\" }}>\r\n                <div className=\"modal-dialog modal-dialog-centered\">\r\n                    <div className=\"modal-content rounded-1 border-0\">\r\n                        <div className=\"modal-body \">\r\n                            <div className=\"text-center suremodalCon\">\r\n                                <div className=\"d-flex justify-content-center\">\r\n                                    <Lottieplayer lottieUrl={backup} Lottiestyle={{ width: \"90px\", height: \"90px\" }} />\r\n                                </div>\r\n                                <h6 className=\"fw-semibold mb-2\">{title?title:t(\"alerts.deletePopup.title\")}</h6>\r\n                                <p className=\"mb-5 px-4 text-center\">{desc ? desc : \"\"}\r\n                                </p>\r\n                                <div className=\"d-flex justify-content-center gap-3\">\r\n                                    <CustomButton\r\n                                        classNames={\"btn btn-danger\"}\r\n                                        isLoading={btnLeftLoading}\r\n                                        text={btnTextLeft?btnTextLeft:t(\"btns.reject\") }\r\n                                        handleClick={() => onApproveReject(false)}\r\n                                    />\r\n                                    <CustomButton\r\n                                        classNames={\"btn btn-success\"}\r\n                                        isLoading={btnRightLoading}\r\n                                        text={btnTextRight?btnTextRight:t(\"btns.confirm\")}\r\n                                        handleClick={() => onApproveReject(true)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {isShow && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n// Add PropTypes validation\r\nApproveRejectModal.propTypes = {\r\n    title: PropTypes.string,                     \r\n    desc: PropTypes.string,                       \r\n    onApproveReject: PropTypes.func.isRequired,   \r\n    isShow: PropTypes.bool.isRequired,            \r\n    btnRightLoading: PropTypes.bool,                         \r\n    btnTextLeft: PropTypes.string,                \r\n    btnTextRight: PropTypes.string,   \r\n};\r\n\r\nexport default ApproveRejectModal\r\n"],"names":["props","t","useCustomTranslation","createLocationPending","updateLocationPending","useSelector","state","location","selectedLocationData","openModel","handleOpenClose","handleCreateUpdateLocation","allCountriesListData","handleStateCity","allStateListData","allCityList","errors","setErrors","useState","createUpdateLocationFormData","setCreateUpdateLocationFormData","name","address","country","city","postal_code","office_start_time","office_end_time","employee_leave_year_start","office_working_hours","is_active","handleFromChange","e","fieldName","_e$target","target","value","type","checked","prevState","updatedState","short_name","createShortName","prevErrors","undefined","useEffect","resetForm","label","country_name","city_name","state_name","_jsxs","className","tabIndex","style","visibility","width","id","children","_jsx","onClick","Label","text","required","Input","placeholder","onChange","CustomError","CustomSelect","data","handleChange","selectedOption","CustCheckbox","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","createUpdateLocationSchema","isValid","params","submitCreateUpdateLocation","isLoading","setSelectedLocationData","handleCreateUpdateLocationModal","toggleLocationDeleteModal","currentPage","setCurrentPage","allLocations","locationList","setLocationList","scopedSlots","useMemo","sn","_","index","item","getBadgeColor","created_at","moment","format","action","_id","_Fragment","CustomTable","fields","key","pagination","totalPages","tableName","Location","dispatch","useDispatch","createLocationRes","createLocationError","updateLocationRes","updateLocationError","deleteLocationPending","deleteLocationRes","deleteLocationError","getAllLocationsDataPending","getAllLocationsDataRes","getAllLocationsDataError","getAllCountriesListPending","getAllCountriesListRes","getAllCountriesListError","getAllStateFromCountryListPending","getAllStateFromCountryListRes","getAllStateFromCountryListError","getCityListFromStatePending","getCityListFromStateRes","getCityListFromStateError","isOpenCreateUpdateLocation","setIsOpenCreateUpdateLocation","isShowDeleteLocationModal","setIsShowDeleteLocationModal","deleteLocationId","setDeleteLocationId","setAllLocations","setAllCountriesListData","setAllStateListData","setAllCityList","locationActions","handleClearLocationStore","code","getAllLocations","page","limit","getAllLocationsDataRequest","_allLocations$data","length","pre","getAllLocationList","getAllCountriesListRequest","getAllCountriesListResData","setFilterValues","tempData","map","push","getCityListFromState","state_id","getCityListFromStateRequest","CreateUpdateLocation","updateLocationRequest","createLocationRequest","country_id","getAllStateFromCountryListRequest","getAllStateFromCountryList","LocationTable","ApproveRejectModal","onApproveReject","deleteLocationRequest","isShow","desc","replace","btnRightLoading","btnTextRight","btnTextLeft","_ref","title","btnLeftLoading","display","opacity","Lottieplayer","lottieUrl","backup","Lottiestyle","height"],"sourceRoot":""}