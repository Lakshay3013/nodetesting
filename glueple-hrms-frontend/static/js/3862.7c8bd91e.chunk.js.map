{"version":3,"file":"static/js/3862.7c8bd91e.chunk.js","mappings":"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","sources":["components/admin/department/CreateUpdateDepartment.js","components/admin/department/DepartmentTable.js","components/admin/department/Department.js","components/modal/ApproveRejectModal.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { useSelector } from 'react-redux'\r\nimport { CustomButton } from '../../globalComponents';\r\nimport { addDepartmentSchema } from '../../../utils/ValidationSchema';\r\nimport { validateSchema } from '../../../utils/ValidationHelper';\r\nimport CustomError from '../../globalComponents/CustomError';\r\nimport { CustCheckbox, Input, Label } from '../../commanComponent';\r\nimport { useCustomTranslation } from '../../../translation';\r\n\r\nconst CreateUpdateDepartment = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        openCreateUpdateDepModal,\r\n        toggleDepartmentModal,\r\n        selectedDepartmentData,\r\n        handleCreateUpdateDepartment\r\n    } = props\r\n    const [errors, setErrors] = useState({});\r\n    const {\r\n        addDepartmentPending,\r\n        updateDepartmentPending,\r\n    } = useSelector(state => state.department);\r\n    const [isActive, setIsActive] = useState(true);\r\n    const [depData, setDepData] = useState({\r\n        depName: '',\r\n        shortName: '',\r\n    })\r\n\r\n    const submitCreateUpdateDepartment = async () => {\r\n        const validationResponse = await validateSchema(addDepartmentSchema, depData);\r\n        if (validationResponse.isValid) {\r\n            setErrors({});\r\n            const params = {\r\n                name: depData?.depName || '',\r\n                short_name: depData?.shortName || '',\r\n                is_active: isActive ? true : false\r\n            }\r\n            handleCreateUpdateDepartment(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        errors && setErrors({});\r\n        const { name, value } = event.target\r\n        setDepData({ ...depData, [name]: value })\r\n    }\r\n\r\n    // Update Department \r\n    useEffect(() => {\r\n        if (selectedDepartmentData) {\r\n            setDepData({\r\n                depName: selectedDepartmentData?.name || '',\r\n                shortName: selectedDepartmentData?.short_name || '',\r\n            })\r\n            setIsActive(selectedDepartmentData?.is_active)\r\n        }\r\n    }, [selectedDepartmentData])\r\n\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetDepartmentData()\r\n        })\r\n    }, [openCreateUpdateDepModal])\r\n\r\n\r\n    const resetDepartmentData = () => {\r\n        setDepData({\r\n            depName: '',\r\n            shortName: '',\r\n        })\r\n        setErrors({});\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={`offcanvas offcanvas-end creatNewTicketOff ${openCreateUpdateDepModal ? 'show' : ''}`} tabIndex={-1}\r\n                style={{ visibility: openCreateUpdateDepModal ? 'visible' : 'hidden' }}\r\n            >\r\n                <div className=\"offcanvas-header\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\"> {selectedDepartmentData ? \"Update\" : \"Create New\"} Department</h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                        onClick={() => toggleDepartmentModal()}\r\n                    />\r\n                </div>\r\n                <div className=\"offcanvas-body\">\r\n                    <div className=\"formPanel\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.name\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.departmentName\")}\r\n                                        value={depData?.depName || ''}\r\n                                        name=\"depName\"\r\n                                        onChange={(e) => handleChange(e)}\r\n                                    />\r\n                                    {errors?.depName && (\r\n                                        <CustomError text={errors.depName} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group\">\r\n                                    <Label text={t(\"labels.shortName\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={t(\"placeholders.shortName\")}\r\n                                        value={depData?.shortName}\r\n                                        name=\"shortName\"\r\n                                        onChange={(e) => handleChange(e)}\r\n                                    />\r\n\r\n                                    {errors?.shortName && (\r\n                                        <CustomError text={errors.shortName} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Label text={t(\"labels.isActive\")} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustCheckbox\r\n                                        key={\"is_active\"}\r\n                                        id={`is_active`}\r\n                                        // label={\"Active\"}\r\n                                        checked={isActive}\r\n                                        handleChange={(e) => setIsActive(!isActive)}\r\n                                        name={\"is_active\"}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n                <div className=\"offcanvas-footer\">\r\n                    <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                        <CustomButton\r\n                            text={selectedDepartmentData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                            classNames={\"btn btn-org-gradient\"}\r\n                            handleClick={() => submitCreateUpdateDepartment()}\r\n                            isLoading={selectedDepartmentData ? updateDepartmentPending : addDepartmentPending}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {openCreateUpdateDepModal && <div className=\"modal-multiSelectIDs fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateUpdateDepartment\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment-timezone'\r\nimport CustomTable from '../../reuseableComponents/customTable/CustomTable'\r\nimport { getBadgeColor } from '../../../utils/common'\r\nimport { useCustomTranslation } from '../../../translation'\r\nconst DepartmentTable = (props) => {\r\n  const {t}=useCustomTranslation()\r\n  const {\r\n    departmentList,\r\n    isLoading,\r\n    setSelectedDepartmentData,\r\n    toggleDepartmentModal,\r\n    toggleDeleteModal,\r\n    currentPage,\r\n    setCurrentPage,\r\n  } = props\r\n  const [depList, setDepList] = useState(departmentList)\r\n  \r\n\r\n  const updateDepartment = (data) => {\r\n    toggleDepartmentModal(data)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setDepList(departmentList)\r\n  }, [departmentList])\r\n\r\n\r\n  const scopedSlots = useMemo(() => ({\r\n    sn: (_, index) => (         \r\n       <span>{index+1}</span> \r\n    ),\r\n    is_active: item => (        \r\n      <span\r\n        className={`badge ${getBadgeColor(item.is_active? \"Active\":\"Inactive\")}`}\r\n      >\r\n        {item.is_active? \"Active\":\"Inactive\"}\r\n      </span>\r\n    ),\r\n    created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n    action: item => (\r\n      <div className=\"actionGroup d-flex gap-2\">\r\n        <CustomButton\r\n          text={t(\"btns.update\")}\r\n          classNames=\"btn btn-primary\"\r\n          handleClick={() => {\r\n            updateDepartment(item);\r\n          }}\r\n        />\r\n        {item?.emp_count === 0 &&<CustomButton\r\n          text={t(\"btns.delete\")}\r\n          handleClick={() => toggleDeleteModal(item._id)}\r\n          classNames=\"btn btn-danger\"\r\n        />}\r\n      </div>\r\n    )\r\n  }), [setSelectedDepartmentData, toggleDepartmentModal, toggleDeleteModal]);\r\n\r\n\r\n  const fields = [\r\n    { key: 'sn', label: 'S.N' },\r\n    { key: 'name', label: 'Name' },\r\n    { key: 'short_name', label: 'Short Name' },\r\n    { key: 'emp_count', label: 'Total Employees' },\r\n    { key: 'is_active', label: 'Status' },\r\n    { key: 'created_at', label: 'Created At' },\r\n    { key: 'action', label :'Action' }\r\n  ];\r\n  return (\r\n      <>\r\n      <CustomTable\r\n        data={depList?.data}\r\n        fields={fields}\r\n        isLoading={isLoading}\r\n        pagination={true}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n        totalPages={depList?.totalPages}\r\n        tableName={\"Department\"}\r\n        // onSearch={handleSearch}\r\n        scopedSlots={scopedSlots}\r\n      />\r\n\r\n      \r\n      </>\r\n  \r\n  )\r\n}\r\n\r\nexport default DepartmentTable\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { departmentAction } from '../../../core/resource/actions'\r\nimport CreateUpdateDepartment from './CreateUpdateDepartment'\r\nimport { pagination } from '../../../utils/Constants.config'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport ApproveRejectModal from '../../modal/ApproveRejectModal'\r\nimport DepartmentTable from \"./DepartmentTable\"\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst Department = () => {\r\n  const { t } = useCustomTranslation()\r\n  const dispatch = useDispatch();\r\n  const {\r\n    getAllDepartmentRes,\r\n    getAllDepartmentError,\r\n    getAllDepartmentPending,\r\n\r\n    deleteDepartmentPending,\r\n    deleteDepartmentRes,\r\n    deleteDepartmentError,\r\n\r\n    addDepartmentPending,\r\n    addDepartmentRes,\r\n    addDepartmentError,\r\n\r\n    updateDepartmentPending,\r\n    updateDepartmentRes,\r\n    updateDepartmentError\r\n  } = useSelector(state => state.department);\r\n\r\n  const [departmentList, setDepartmentList] = useState('')\r\n  const [selectedDepartmentData, setSelectedDepartmentData] = useState('')\r\n  const [openCreateUpdateDepModal, setOpenCreateUpdateDepModal] = useState(false);\r\n  const [deleteDepId, setDeleteDepId] = useState()\r\n  const [isShowDeleteModal, setIsShowDeleteModal] = useState(false)\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n\r\n\r\n  /* Create Update Department */\r\n  const toggleDepartmentModal = (data) => {\r\n    if (!data) {\r\n      setSelectedDepartmentData('')\r\n    } else {\r\n      setSelectedDepartmentData(data)\r\n    }\r\n    setOpenCreateUpdateDepModal(!openCreateUpdateDepModal)\r\n  }\r\n\r\n  const handleCreateUpdateDepartment = (params) => {\r\n    if (selectedDepartmentData) {\r\n      params['_id'] = selectedDepartmentData?._id\r\n      dispatch(departmentAction.updateDepartmentRequest(params));\r\n    }\r\n    else {\r\n      dispatch(departmentAction.addDepartmentRequest(params));\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!addDepartmentPending) {\r\n      if (addDepartmentError) {\r\n        dispatch(departmentAction.handleClearDepartmentStore('HANDLE_CLEAR_ADD_DEPARTMENT_STORE'))\r\n        return;\r\n      }\r\n      if (addDepartmentRes) {\r\n        if (addDepartmentRes?.code == 200) {\r\n          dispatch(departmentAction.handleClearDepartmentStore('HANDLE_CLEAR_ADD_DEPARTMENT_STORE'))\r\n          dispatch(departmentAction.handleClearDepartmentStore('HANDLE_CLEAR_GET_DEPARTMENT_LIST_STORE'))\r\n          toggleDepartmentModal()\r\n          getAllDepartments();\r\n\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    addDepartmentPending,\r\n    addDepartmentRes,\r\n    addDepartmentError,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (!updateDepartmentPending) {\r\n      if (updateDepartmentError) {\r\n        dispatch(departmentAction.handleClearDepartmentStore('HANDLE_CLEAR_UPDATE_DEPARTMENT_STORE'))\r\n        return;\r\n      }\r\n      if (updateDepartmentRes) {\r\n        if (updateDepartmentRes?.code == 200) {\r\n          dispatch(departmentAction.handleClearDepartmentStore('HANDLE_CLEAR_UPDATE_DEPARTMENT_STORE'))\r\n          dispatch(departmentAction.handleClearDepartmentStore('HANDLE_CLEAR_GET_DEPARTMENT_LIST_STORE'))\r\n          getAllDepartments();\r\n          toggleDepartmentModal();\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    updateDepartmentPending,\r\n    updateDepartmentRes,\r\n    updateDepartmentError\r\n  ]);\r\n\r\n  /* Get All Departments */\r\n  useEffect(() => {\r\n    getAllDepartments()\r\n  }, [currentPage])\r\n\r\n  const getAllDepartments = () => {\r\n    const params = {\r\n      page: currentPage,\r\n      limit: pagination.limit,\r\n    }\r\n    dispatch(departmentAction.getAllDepartmentRequest(params));\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!getAllDepartmentPending) {\r\n      if (getAllDepartmentError) {\r\n        return;\r\n      }\r\n      if (getAllDepartmentRes) {\r\n        if (getAllDepartmentRes?.code === 200) {\r\n          setDepartmentList(getAllDepartmentRes?.data)\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    getAllDepartmentRes,\r\n    getAllDepartmentError,\r\n    getAllDepartmentPending\r\n  ]);\r\n\r\n  /* Delete Department */\r\n  const onDeleteCancelDepartment = (type) => {\r\n    if (type) {\r\n      const params = {\r\n        _id: deleteDepId\r\n      }\r\n      dispatch(departmentAction?.deleteDepartmentRequest(params))\r\n\r\n    } else {\r\n      toggleDeleteModal()\r\n    }\r\n  }\r\n  const toggleDeleteModal = (id) => {\r\n    if (id) {\r\n      setDeleteDepId(id)\r\n    }\r\n    setIsShowDeleteModal(!isShowDeleteModal)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!deleteDepartmentPending) {\r\n      if (deleteDepartmentError) {\r\n        dispatch(departmentAction.handleClearDepartmentStore('HANDLE_CLEAR_DELETE_DEPARTMENT_STORE'))\r\n        return;\r\n      }\r\n      if (deleteDepartmentRes) {\r\n        if (deleteDepartmentRes?.code == 200) {\r\n          dispatch(departmentAction.handleClearDepartmentStore('HANDLE_CLEAR_DELETE_DEPARTMENT_STORE'))\r\n          dispatch(departmentAction.handleClearDepartmentStore('HANDLE_CLEAR_GET_DEPARTMENT_LIST_STORE'))\r\n          toggleDeleteModal()\r\n          if (currentPage > 1 && departmentList?.data?.length === 1) {\r\n            setCurrentPage((pre => pre -= 1))\r\n          } else {\r\n            getAllDepartments()\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    deleteDepartmentRes,\r\n    deleteDepartmentError,\r\n    deleteDepartmentPending\r\n  ]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex  justify-content-end \">\r\n        <CustomButton\r\n          classNames={\"btn btn-primary gradientBg\"}\r\n          handleClick={() => toggleDepartmentModal()}\r\n          text={t(\"btns.createDepartment\")}\r\n        />\r\n\r\n      </div>\r\n      <DepartmentTable\r\n        isLoading={getAllDepartmentPending}\r\n        toggleDepartmentModal={toggleDepartmentModal}\r\n        setSelectedDepartmentData={setSelectedDepartmentData}\r\n        toggleDeleteModal={toggleDeleteModal}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n        departmentList={departmentList}\r\n      />\r\n\r\n      <CreateUpdateDepartment\r\n        getAllDepartments={getAllDepartments}\r\n        openCreateUpdateDepModal={openCreateUpdateDepModal}\r\n        toggleDepartmentModal={toggleDepartmentModal}\r\n        selectedDepartmentData={selectedDepartmentData}\r\n        handleCreateUpdateDepartment={handleCreateUpdateDepartment}\r\n      />\r\n\r\n      {isShowDeleteModal && (\r\n        <ApproveRejectModal\r\n          onApproveReject={onDeleteCancelDepartment}\r\n          isShow={isShowDeleteModal}\r\n          desc={t(\"alerts.deletePopup.desc\").replace('$1',\"Department\")}\r\n          btnRightLoading={deleteDepartmentPending}\r\n          btnTextRight={t(\"btns.delete\")}\r\n          btnTextLeft={t(\"btns.cancel\")}\r\n        />)\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Department\r\n","import React from 'react'\r\nimport Lottieplayer from '../commanComponent/Lottieplayer'\r\nimport backup from '../../../src/images/Backup.json'\r\nimport { CustomButton } from '../globalComponents'\r\nimport PropTypes from 'prop-types'\r\nimport { useCustomTranslation } from '../../translation'\r\n\r\n/**\r\n * ApproveRejectModal component.\r\n * @param {string} [title=\"Are You Sure?\"] - Title of the modal (optional, defaults to \"Are You Sure?\")\r\n * @param {string} [desc] - Description text (optional).\r\n * @param {function} onApproveReject - Callback function for handling approve/reject actions (required).\r\n * @param {boolean} isShow - Boolean flag to show or hide the modal (required).\r\n * @param {boolean} [btnRightLoading=false] - Boolean flag to show loading state for the right button (optional).\r\n * @param {string} [btnTextLeft=\"Cancel\"] - Custom text for the left button (optional).\r\n * @param {string} [btnTextRight=\"Confirm\"] - Custom text for the right button (optional).\r\n * @returns {void}\r\n */\r\nconst ApproveRejectModal = (\r\n  {  \r\n    title ,               \r\n    desc = \"\",                           \r\n    onApproveReject,                      \r\n    isShow,                               \r\n    btnLeftLoading = false,               \r\n    btnRightLoading = false,              \r\n    btnTextLeft ,               \r\n    btnTextRight     \r\n}\r\n) => {\r\n    const {t} =useCustomTranslation()\r\n    return (\r\n        <>\r\n            <div className=\"modal fade attendanceViewodal\" id=\"sureMdl\" style={{ display: isShow ? \"unset !important\" : \"none !important\", opacity: isShow ? \"unset\" : \"0\" }}>\r\n                <div className=\"modal-dialog modal-dialog-centered\">\r\n                    <div className=\"modal-content rounded-1 border-0\">\r\n                        <div className=\"modal-body \">\r\n                            <div className=\"text-center suremodalCon\">\r\n                                <div className=\"d-flex justify-content-center\">\r\n                                    <Lottieplayer lottieUrl={backup} Lottiestyle={{ width: \"90px\", height: \"90px\" }} />\r\n                                </div>\r\n                                <h6 className=\"fw-semibold mb-2\">{title?title:t(\"alerts.deletePopup.title\")}</h6>\r\n                                <p className=\"mb-5 px-4 text-center\">{desc ? desc : \"\"}\r\n                                </p>\r\n                                <div className=\"d-flex justify-content-center gap-3\">\r\n                                    <CustomButton\r\n                                        classNames={\"btn btn-danger\"}\r\n                                        isLoading={btnLeftLoading}\r\n                                        text={btnTextLeft?btnTextLeft:t(\"btns.reject\") }\r\n                                        handleClick={() => onApproveReject(false)}\r\n                                    />\r\n                                    <CustomButton\r\n                                        classNames={\"btn btn-success\"}\r\n                                        isLoading={btnRightLoading}\r\n                                        text={btnTextRight?btnTextRight:t(\"btns.confirm\")}\r\n                                        handleClick={() => onApproveReject(true)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {isShow && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n// Add PropTypes validation\r\nApproveRejectModal.propTypes = {\r\n    title: PropTypes.string,                     \r\n    desc: PropTypes.string,                       \r\n    onApproveReject: PropTypes.func.isRequired,   \r\n    isShow: PropTypes.bool.isRequired,            \r\n    btnRightLoading: PropTypes.bool,                         \r\n    btnTextLeft: PropTypes.string,                \r\n    btnTextRight: PropTypes.string,   \r\n};\r\n\r\nexport default ApproveRejectModal\r\n"],"names":["props","t","useCustomTranslation","openCreateUpdateDepModal","toggleDepartmentModal","selectedDepartmentData","handleCreateUpdateDepartment","errors","setErrors","useState","addDepartmentPending","updateDepartmentPending","useSelector","state","department","isActive","setIsActive","depData","setDepData","depName","shortName","handleChange","event","name","value","target","useEffect","short_name","is_active","resetDepartmentData","_jsxs","_Fragment","children","className","tabIndex","style","visibility","_jsx","type","onClick","Label","text","required","Input","placeholder","onChange","e","CustomError","CustCheckbox","id","checked","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","addDepartmentSchema","isValid","params","submitCreateUpdateDepartment","isLoading","departmentList","setSelectedDepartmentData","toggleDeleteModal","currentPage","setCurrentPage","depList","setDepList","scopedSlots","useMemo","sn","_","index","item","getBadgeColor","created_at","moment","format","action","emp_count","_id","CustomTable","data","fields","key","label","pagination","totalPages","tableName","Department","dispatch","useDispatch","getAllDepartmentRes","getAllDepartmentError","getAllDepartmentPending","deleteDepartmentPending","deleteDepartmentRes","deleteDepartmentError","addDepartmentRes","addDepartmentError","updateDepartmentRes","updateDepartmentError","setDepartmentList","setOpenCreateUpdateDepModal","deleteDepId","setDeleteDepId","isShowDeleteModal","setIsShowDeleteModal","departmentAction","handleClearDepartmentStore","code","getAllDepartments","page","limit","getAllDepartmentRequest","_departmentList$data","length","pre","DepartmentTable","CreateUpdateDepartment","updateDepartmentRequest","addDepartmentRequest","ApproveRejectModal","onApproveReject","deleteDepartmentRequest","isShow","desc","replace","btnRightLoading","btnTextRight","btnTextLeft","_ref","title","btnLeftLoading","display","opacity","Lottieplayer","lottieUrl","backup","Lottiestyle","width","height"],"sourceRoot":""}