{"version":3,"file":"static/js/2786.5be586e4.chunk.js","mappings":"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","sources":["components/commanComponent/BackIcon.js","components/payrollAdmin/payRuns/RunAttendance.js/CreatePayrun.js"],"sourcesContent":["import React from 'react'\r\n\r\nconst BackIcon = () => {\r\n    return (\r\n        <div >\r\n            <svg\r\n                version=\"1.1\"\r\n                id=\"Layer_1\"\r\n                x={0}\r\n                y={0}\r\n                viewBox=\"0 0 512 512\"\r\n                xmlSpace=\"preserve\"\r\n                className=\"icon icon-xlg me-2\"\r\n                style={{\r\n                    height: \"23px\",\r\n                    width: \"23px\",\r\n                    cursor: \"pointer\",\r\n                }}\r\n            >\r\n                <circle id=\"Oval-3\" opacity=\".1\" fill=\"#2B76D2\" cx={256} cy={256} r={256} />\r\n                <path\r\n                    fill=\"#2B76D2\"\r\n                    d=\"M277.3 362.7c-5.3 0-10.6-2-14.7-5.9l-85.3-81.5c-4.1-3.9-6.5-9.3-6.6-15-.1-5.7 2-11.1 5.9-15.2l85.3-89.1c8.1-8.5 21.7-8.8 30.2-.7 8.5 8.1 8.8 21.6.7 30.2l-70.6 73.7 69.9 66.8c8.5 8.1 8.8 21.6.7 30.1-4.2 4.4-9.8 6.6-15.5 6.6z\"\r\n                />\r\n            </svg>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BackIcon\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomTable } from '../../../reuseableComponents'\r\nimport { useCustomTranslation } from '../../../../translation'\r\nimport { CustCheckbox, DynamicFilter, Label } from '../../../commanComponent'\r\nimport { CustomButton, CustomSpinner } from '../../../globalComponents'\r\nimport CustomSelect from '../../../commanComponent/CustomSelect'\r\nimport BackIcon from '../../../commanComponent/BackIcon'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { pagination } from '../../../../utils/Constants.config'\r\nimport { departmentAction, employeeActions, payrollActions } from '../../../../core/resource/actions'\r\nimport { dateFormate } from '../../../../utils/common'\r\n\r\nconst CreatePayrun = () => {\r\n    const dispatch = useDispatch()\r\n    const {payMonth} =useParams()\r\n    const {\r\n        getDepartmentListRes,\r\n        getDepartmentListError,\r\n        getDepartmentListPending\r\n    } = useSelector(state => state.department)\r\n    const {\r\n        getAllEmployeePending,\r\n        getAllEmployeeRes,\r\n        getAllEmployeeError,\r\n    } = useSelector(state => state.employee)\r\n    const {\r\n        getEmployeeSalaryPending,\r\n        getEmployeeSalaryRes,\r\n        getEmployeeSalaryError,\r\n\r\n        addPayRunPending,\r\n        addPayRunRes,\r\n        addPayRunError,\r\n\r\n    } = useSelector(state => state.payroll)\r\n\r\n    const { t } = useCustomTranslation()\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [createdSalaryEmpList, setCreatedSalaryEmpList] = useState('')\r\n    const [allActiveSalaryCreate, setAllActiveSalaryCreate] = useState(true)\r\n    const [tempSalaryEmpData, setTempSalaryEmpData] = useState('')\r\n    const [allDepartments, setAllDepartments] = useState('')\r\n    const [allEmployeeList, setAllEmployeeList] = useState('')\r\n    const [filterFormData, setFilterFormData] = useState({\r\n        employeeName: '',\r\n        department: '',\r\n    });\r\n\r\n    const createPayRunFields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'hold_salary', label: 'Hold Salary' },\r\n        { key: 'create_salary', label: 'Create Salary' },\r\n        { key: 'emp_code', label: 'Emp ID' },\r\n        { key: 'employee_name', label: 'Emp Name' },\r\n        { key: 'email', label: 'Email' },\r\n        { key: 'department', label: 'Department  ' },\r\n        { key: 'designation', label: 'Designation' },\r\n    ];\r\n\r\n    const createPayRunScopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        hold_salary: (item) => (\r\n            <span>\r\n                <CustCheckbox\r\n                    key={\"is_hold\"}\r\n                    id={`is_hold`}\r\n                    checked={item?.is_hold}\r\n                    handleChange={(e) => handleCheckedUncheck(e, null, item)}\r\n                    name={\"is_hold\"}\r\n                />\r\n            </span>\r\n        ),\r\n        create_salary: (item) => (\r\n            <span>\r\n                <CustCheckbox\r\n                    key={\"create_salary\"}\r\n                    id={`create_salary`}\r\n                    checked={item?.create_salary}\r\n                    handleChange={(e) => handleCheckedUncheck(e, null, item)}\r\n                    name={\"create_salary\"}\r\n                />\r\n            </span>\r\n        ),\r\n\r\n\r\n    }), [allActiveSalaryCreate, createdSalaryEmpList]);\r\n\r\n    useEffect(() => {\r\n        getAllDepartments()\r\n    }, [])\r\n\r\n    const employeeFilters = [\r\n        {\r\n            name: 'employeeName',\r\n            label: 'Select Employee / ID',\r\n            type: 'select',\r\n            value: filterFormData.employeeName,\r\n            data: allEmployeeList,\r\n            placeholder: 'Enter Employee Name',\r\n            isMulti: true\r\n        },\r\n        {\r\n            name: 'department',\r\n            label: 'Department',\r\n            type: 'select',\r\n            data: allDepartments,\r\n            value: filterFormData.department,\r\n            placeholder: 'Select Department',\r\n        },\r\n\r\n    ];\r\n\r\n    const handleFilterFormData = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e.target : { value: e };\r\n\r\n        setFilterFormData((prevState) => ({\r\n            ...prevState,\r\n            [name]: type === 'checkbox' ? checked : value,\r\n        }));\r\n    };\r\n\r\n    const handleFilterEmployees = () => {\r\n        const filterFields = {};\r\n        if (filterFormData?.department?.value) filterFields[\"department_id\"] = filterFormData?.department?.value;\r\n        if (filterFormData?.designation?.value) filterFields[\"designation_id\"] = filterFormData?.designation?.value;\r\n        if (filterFormData?.employeeName) filterFields[\"employee_name\"] = filterFormData?.employeeName\r\n        // searchFilterData(filterFields, tempSalaryEmpData?.data)\r\n    }\r\n   \r\n    const handleCheckedUncheck = (e, fieldName, checkedEmp) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e.target : { value: e };\r\n    \r\n        setCreatedSalaryEmpList((prevState) => {\r\n            const updatedData = prevState?.map((item) =>\r\n                item?._id === checkedEmp?._id\r\n                    ? { ...item, [name]: type === 'checkbox' ? checked : value }\r\n                    : item\r\n            );\r\n            \r\n            const allChecked = updatedData.every((item) => item.create_salary);\r\n            setAllActiveSalaryCreate(allChecked);\r\n            return updatedData; \r\n        });\r\n    };\r\n    \r\n\r\n    /* Get Employee Salary Data */\r\n\r\n    useEffect(() => {\r\n        getEmployeeSalary()\r\n    }, [currentPage])\r\n\r\n    const getEmployeeSalary = () => {\r\n        // const payload = {\r\n        //     page: currentPage,\r\n        //     limit: 1,\r\n        // }\r\n        dispatch(payrollActions?.getEmployeeSalaryRequest())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getEmployeeSalaryPending) {\r\n            if (getEmployeeSalaryError) {\r\n                return;\r\n            }\r\n            if (getEmployeeSalaryRes) {\r\n                if (getEmployeeSalaryRes?.code === 200) {\r\n                    setCreatedSalaryEmpList(getEmployeeSalaryRes?.data)\r\n                    setTempSalaryEmpData(getEmployeeSalaryRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getEmployeeSalaryRes,\r\n        getEmployeeSalaryError,\r\n        getEmployeeSalaryPending\r\n    ]);\r\n\r\n    const handleCheckedUnCheckedAll = (e) => {\r\n        const { checked } = e?.target;\r\n        setAllActiveSalaryCreate(checked);\r\n        setCreatedSalaryEmpList((prevState) =>\r\n            prevState.map((item) => ({\r\n                ...item,\r\n                create_salary: checked,\r\n            }))\r\n        );\r\n    };\r\n    \r\n\r\n    // useEffect(() => {\r\n    //     setCreatedSalaryEmpList((prevState) => ({\r\n    //         ...prevState,\r\n    //         data: prevState?.data?.map((item) => ({\r\n    //             ...item,\r\n    //             create_salary: allActiveSalaryCreate,\r\n    //         })),\r\n    //     }));\r\n    // }, []);\r\n\r\n    // useEffect(()=>{\r\n    //     if(currentPage >1){\r\n    //         setCreatedSalaryEmpList((prevState) => ({\r\n    //             ...prevState,\r\n    //             data: prevState?.data?.map((item) => ({\r\n    //                 ...item,\r\n    //                 create_salary: item?.create_salary ||allActiveSalaryCreate,\r\n    //             })),\r\n    //         })); \r\n    //     }\r\n    // },[currentPage])\r\n    const searchFilterData = (searchFiled, data) => {\r\n        let tempCreatedSalaryEmpData = data\r\n        if (Object.keys(data)?.length > 0) {\r\n            let filterData = tempCreatedSalaryEmpData.filter((item, index) => item?.employee_name?.includes(searchFiled?.employee_name))\r\n            setCreatedSalaryEmpList((prevState) => ({\r\n                ...prevState,\r\n                data: filterData,\r\n            }));\r\n        }\r\n        else {\r\n            setCreatedSalaryEmpList()\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /* Get All Departments */\r\n    const getAllDepartments = () => {\r\n        if (!getDepartmentListRes?.data?.length) {\r\n            dispatch(departmentAction.getDepartmentListRequest());\r\n        } else {\r\n            setAllDepartments(getDepartmentListRes?.data)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getDepartmentListPending) {\r\n            if (getDepartmentListError) {\r\n                return;\r\n            }\r\n            if (getDepartmentListRes) {\r\n                if (getDepartmentListRes?.code === 200) {\r\n                    const departmentResponse = getDepartmentListRes?.data\r\n                    setAllDepartments(departmentResponse)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getDepartmentListRes,\r\n        getDepartmentListError,\r\n        getDepartmentListPending\r\n    ]);\r\n\r\n    /* Get All Employee List*/\r\n    const getAllEmployee = () => {\r\n        dispatch(employeeActions.getAllEmployeeRequest())\r\n    }\r\n    useEffect(() => {\r\n        if (!getAllEmployeePending) {\r\n            if (getAllEmployeeError) {\r\n                return;\r\n            }\r\n            if (getAllEmployeeRes) {\r\n                if (getAllEmployeeRes?.code === 200) {\r\n\r\n                    setAllEmployeeList(getAllEmployeeRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllEmployeeRes,\r\n        getAllEmployeeError,\r\n        getAllEmployeePending\r\n    ]);\r\n\r\n    const submitCreatePayRun = () => {   \r\n        const payload = {\r\n            month:dateFormate(payMonth,\"YYYY-MM\"),\r\n            employee_ids: setPayRunEmpData()\r\n        }\r\n        dispatch(payrollActions?.addPayRunRequest(payload))\r\n    }\r\n\r\n    const setPayRunEmpData =()=>{\r\n        const createSalaryData =  createdSalaryEmpList\r\n        ?.filter(item => item?.create_salary === true)\r\n        .map(item => ({ id: item?.employee_id, is_hold: item?.is_hold })) || [];\r\n        return createSalaryData\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!addPayRunPending) {\r\n            if (addPayRunError) {\r\n                dispatch(payrollActions?.handleClearPayrollStore(\"HANDLE_CLEAR_ADD_PAY_RUN_STORE\"))\r\n                return;\r\n            }\r\n            if (addPayRunRes) {\r\n                if (addPayRunRes?.code === 200) {\r\n                    dispatch(payrollActions?.handleClearPayrollStore(\"HANDLE_CLEAR_ADD_PAY_RUN_STORE\"))\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        addPayRunRes,\r\n        addPayRunError,\r\n        addPayRunPending\r\n    ]);\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className={`cardBox  creatNewTicketOff `}\r\n            >\r\n                <div className=\"header d-flex\">\r\n                    <Link to={\"/pay-runs\"} ><BackIcon /></Link>\r\n                    <h5 className=\"title  fs-5 fw-bold text-primary\">\r\n                        Create Pay Run </h5>\r\n\r\n                </div>\r\n                <div className=\"body \">\r\n                    <DynamicFilter\r\n                        filters={employeeFilters}\r\n                        handleFilterFormData={handleFilterFormData}\r\n                        onSubmitHandleFilter={handleFilterEmployees}\r\n                    />\r\n\r\n                    <div className='mt-3'>\r\n                        {/* <h3 className='underlineHead ' style={{ fontSize: \"18px\" }}> Employees</h3> */}\r\n                        <div className=\"row ms-2\">\r\n                            <CustCheckbox\r\n                                key={\"allActiveCreatedSalary\"}\r\n                                id={`allActiveCreatedSalary`}\r\n                                checked={allActiveSalaryCreate}\r\n                                handleChange={(e) => handleCheckedUnCheckedAll(e)}\r\n                                name={\"allActiveCreatedSalary\"}\r\n                                label={\"Create Salary For All\"}\r\n                            />\r\n                        </div>\r\n                        <div style={createdSalaryEmpList?.length > 9 ? { height: \"539px\", overflowX: \"scroll\" } : {}}>\r\n                            <CustomTable\r\n                                data={createdSalaryEmpList}\r\n                                fields={createPayRunFields}\r\n                                isLoading={getEmployeeSalaryPending}\r\n                                // pagination={true}\r\n                                // currentPage={currentPage}\r\n                                // setCurrentPage={setCurrentPage}\r\n                                // totalPages={createdSalaryEmpList?.totalPages}\r\n                                // tableName={\"\"}\r\n                                // onSearch={handleSearch}\r\n                                isHeader={false}\r\n                                tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n                                scopedSlots={createPayRunScopedSlots}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className=\"footer\">\r\n                    <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                        <CustomButton\r\n                            text={\"Submit\"}\r\n                            classNames={\"btn btn-org-gradient\"}\r\n                            handleClick={() => submitCreatePayRun()}\r\n                        // isLoading={selectedDepartmentData ? updateDepartmentPending : addDepartmentPending}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {addPayRunPending && <CustomSpinner isShow={addPayRunPending} size=\"lg\" />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreatePayrun\r\n"],"names":["BackIcon","_jsx","children","_jsxs","version","id","x","y","viewBox","xmlSpace","className","style","height","width","cursor","opacity","fill","cx","cy","r","d","CreatePayrun","dispatch","useDispatch","payMonth","useParams","getDepartmentListRes","getDepartmentListError","getDepartmentListPending","useSelector","state","department","getAllEmployeePending","getAllEmployeeRes","getAllEmployeeError","employee","getEmployeeSalaryPending","getEmployeeSalaryRes","getEmployeeSalaryError","addPayRunPending","addPayRunRes","addPayRunError","payroll","t","useCustomTranslation","currentPage","setCurrentPage","useState","createdSalaryEmpList","setCreatedSalaryEmpList","allActiveSalaryCreate","setAllActiveSalaryCreate","tempSalaryEmpData","setTempSalaryEmpData","allDepartments","setAllDepartments","allEmployeeList","setAllEmployeeList","filterFormData","setFilterFormData","employeeName","createPayRunScopedSlots","useMemo","sn","_","index","hold_salary","item","CustCheckbox","checked","is_hold","handleChange","e","handleCheckedUncheck","name","create_salary","useEffect","getAllDepartments","employeeFilters","label","type","value","data","placeholder","isMulti","fieldName","checkedEmp","_e$target2","target","prevState","updatedData","map","_id","allChecked","every","getEmployeeSalary","payrollActions","getEmployeeSalaryRequest","code","_getDepartmentListRes","length","departmentAction","getDepartmentListRequest","departmentResponse","setPayRunEmpData","filter","employee_id","handleClearPayrollStore","_Fragment","Link","to","DynamicFilter","filters","handleFilterFormData","_e$target","onSubmitHandleFilter","handleFilterEmployees","_filterFormData$depar","_filterFormData$depar2","_filterFormData$desig","_filterFormData$desig2","filterFields","designation","handleCheckedUnCheckedAll","overflowX","CustomTable","fields","key","isLoading","isHeader","tableStyle","padding","boxShadow","scopedSlots","CustomButton","text","classNames","handleClick","submitCreatePayRun","payload","month","dateFormate","employee_ids","addPayRunRequest","CustomSpinner","isShow","size"],"sourceRoot":""}