{"version":3,"file":"static/js/527.cf6124d3.chunk.js","mappings":"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","sources":["components/announcement/AnnouncementTable.js","components/announcement/CreateUpdateAnnouncement.js","components/announcement/Announcement.js"],"sourcesContent":["\r\nimport React, { useEffect, useMemo, useState } from 'react'\r\nimport { useCustomTranslation } from '../../translation'\r\nimport { CustomTable } from '../reuseableComponents'\r\nimport { Icon } from '../commanComponent'\r\n\r\n\r\nconst AnnouncementTable = (props) => {\r\n    const {t}= useCustomTranslation()\r\n    const {\r\n        isLoading,\r\n        toggleAnnouncementDeleteModal,\r\n        currentPage,\r\n        setCurrentPage,\r\n        allAnnouncements\r\n    } = props\r\n    const [announcementList, setAnnouncementList] = useState('')\r\n\r\n\r\n    useEffect(() => {\r\n        setAnnouncementList(allAnnouncements)\r\n    }, [allAnnouncements])\r\n\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        \r\n        action: item => (\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => toggleAnnouncementDeleteModal(item)}\r\n                        >\r\n                            <Icon className={\"fa fa-trash test\"} /> Delete</span>\r\n                    </li>\r\n\r\n                  \r\n                </ul>\r\n            </div>\r\n        )\r\n    }), [announcementList,toggleAnnouncementDeleteModal]);\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'type', label: 'Announcement Name' },\r\n        { key: 'start_date', label: 'Start Date' },\r\n        { key: 'end_date', label: 'End Date ' },\r\n        { key: 'description', label: 'Description ' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n  return (\r\n    <>\r\n       <CustomTable\r\n                data={announcementList}\r\n                fields={fields}\r\n                isLoading={isLoading}\r\n                pagination={true}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                totalPages={announcementList?.totalPages}\r\n                tableName={t(\"headings.announcement\")}\r\n                // onSearch={handleSearch}\r\n                scopedSlots={scopedSlots}\r\n            />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default AnnouncementTable\r\n\r\n","\r\nimport React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { validateSchema } from '../../utils/ValidationHelper'\r\nimport { Input, Label } from '../commanComponent'\r\nimport { CustomButton, CustomError } from '../globalComponents'\r\nimport { createUpdateAnnouncementSchema } from '../../utils/ValidationSchema'\r\nimport { Textarea } from '../commanComponent'\r\nimport { useCustomTranslation } from '../../translation'\r\nconst CreateUpdateAnnouncement = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    // const { createAnnouncementPending, updateAnnouncementPending } = useSelector(description => description?.location)\r\n    const {\r\n        selectedAnnouncementData,\r\n        openModel,\r\n        handleOpenClose,\r\n        handleCreateUpdateAnnouncement,\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [createUpdateAnnouncementFormData, setCreateUpdateAnnouncementFormData] = useState({\r\n        startDate: null,\r\n        endDate: null,\r\n        description: null,\r\n    })\r\n\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e?.target : { value: e };\r\n\r\n        setCreateUpdateAnnouncementFormData(prevState => {\r\n            let updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n\r\n            return updatedState;\r\n        });\r\n\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitCreateUpdateAnnouncement = async () => {\r\n        const validationResponse = await validateSchema(createUpdateAnnouncementSchema, createUpdateAnnouncementFormData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n                startDate,\r\n                endDate,\r\n                description,\r\n            } = createUpdateAnnouncementFormData\r\n\r\n            const params = {\r\n                startDate: startDate,\r\n                endDate: endDate,\r\n                description: description,\r\n            }\r\n            handleCreateUpdateAnnouncement(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (selectedAnnouncementData) {\r\n            setCreateUpdateAnnouncementFormData({\r\n                startDate: selectedAnnouncementData?.start_date,\r\n                endDate: selectedAnnouncementData?.end_date,\r\n                description: selectedAnnouncementData?.description,\r\n\r\n            })\r\n        }\r\n    }, [selectedAnnouncementData])\r\n\r\n    const resetForm = () => {\r\n        setCreateUpdateAnnouncementFormData({\r\n            startDate: null,\r\n            endDate: '',\r\n            description: '',\r\n        })\r\n        setErrors({})\r\n    }\r\n    return (\r\n        <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n            tabIndex={-1}\r\n            style={{\r\n                visibility: openModel ? 'visible' : 'hidden',\r\n            }}\r\n            id=\"interviewDetail\"\r\n        >\r\n            <div className=\"offcanvas-header\">\r\n                <h5 \r\n                className=\"offcanvas-title  fs-5 fw-bold text-primary\"\r\n                >\r\n                    {selectedAnnouncementData ? \"Update\" : \"Add\"} Announcement\r\n                </h5>\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                    onClick={() => handleOpenClose()}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"offcanvas-body myRequest \">\r\n                <div className=\"formPanel\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.startDate\")} />\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    placeholder={t(\"placeholders.startDate\")}\r\n                                    value={createUpdateAnnouncementFormData?.startDate}\r\n                                    name=\"startDate\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                                {errors?.startDate && (\r\n                                    <CustomError text={errors.startDate} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"col-md-6\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.endDate\")} />\r\n                                <Input\r\n                                    type=\"date\"\r\n                                    placeholder={t(\"placeholders.endDate\")}\r\n                                    value={createUpdateAnnouncementFormData?.endDate}\r\n                                    name=\"endDate\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                    min={createUpdateAnnouncementFormData?.startDate}\r\n                                />\r\n                                {errors?.endDate && (\r\n                                    <CustomError text={errors.endDate} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-12\">\r\n                            <div className=\"form-group mb-2\">\r\n                                <Label text={t(\"labels.description\")} />\r\n                                <Textarea\r\n                                    placeholder={\"Enter here....\"}\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                    name={\"description\"}\r\n                                    value={createUpdateAnnouncementFormData?.description}\r\n                                />\r\n                                {errors?.description && (\r\n                                    <CustomError text={errors.description} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"offcanvas-footer\">\r\n                <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                    <CustomButton\r\n                        // text={selectedAnnouncementData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                        text={t(\"btns.submit\")}\r\n                        classNames={\"btn btn-org-gradient\"}\r\n                        handleClick={() => submitCreateUpdateAnnouncement()}\r\n                    // isLoading={selectedAnnouncementData ? updateAnnouncementPending : createAnnouncementPending}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateUpdateAnnouncement\r\n","import React, { useEffect, useState } from 'react'\r\nimport AnnouncementTable from './AnnouncementTable'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport ApproveRejectModal from '../modal/ApproveRejectModal';\r\nimport CreateUpdateAnnouncement from './CreateUpdateAnnouncement';\r\nimport { useCustomTranslation } from '../../translation';\r\nimport { CustomButton } from '../globalComponents';\r\n\r\nconst dummyData = [\r\n    {\r\n        type: \"announcement\",\r\n        start_date: \"2024-12-09\",\r\n        end_date: \"2024-12-09\",\r\n        description: \"test\",\r\n    }\r\n];\r\nconst Announcement = () => {\r\n    const dispatch = useDispatch()\r\n    const { t } = useCustomTranslation()\r\n    const [allAnnouncements, setAllAnnouncement] = useState(dummyData)\r\n    const [isOpenCreateUpdateAnnouncement, setIsOpenCreateUpdateAnnouncement] = useState(false)\r\n    const [selectedAnnouncementData, setSelectedAnnouncementData] = useState('')\r\n    const [isShowDeleteAnnouncementModal, setIsShowDeleteAnnouncementModal] = useState(false)\r\n    const [deleteAnnouncementId, setDeleteAnnouncementId] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n\r\n    /* Create Update Announcement */\r\n    const handleCreateUpdateAnnouncementModal = (data) => {\r\n        if (!data) {\r\n            setSelectedAnnouncementData('')\r\n        } else {\r\n            setSelectedAnnouncementData(data)\r\n        }\r\n        setIsOpenCreateUpdateAnnouncement(!isOpenCreateUpdateAnnouncement)\r\n    }\r\n\r\n    /* Delete Announcement */\r\n    const toggleAnnouncementDeleteModal = (id) => {\r\n        if (id) {\r\n            setDeleteAnnouncementId(id)\r\n        }\r\n        setIsShowDeleteAnnouncementModal(!isShowDeleteAnnouncementModal)\r\n    }\r\n\r\n    const handleDeleteAnnouncement = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deleteAnnouncementId\r\n            }\r\n            // dispatch(locationActions?.deleteAnnouncementRequest(params))\r\n        } else {\r\n            toggleAnnouncementDeleteModal()\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"d-flex  justify-content-end \">\r\n                <CustomButton\r\n                    classNames={\"btn btn-primary gradientBg\"}\r\n                    handleClick={() => handleCreateUpdateAnnouncementModal()}\r\n                    text={t(\"btns.createAnnouncement\")}\r\n                />\r\n            </div>\r\n            <CreateUpdateAnnouncement\r\n                handleCreateUpdateAnnouncement={handleCreateUpdateAnnouncementModal}\r\n                handleOpenClose={handleCreateUpdateAnnouncementModal}\r\n                openModel={isOpenCreateUpdateAnnouncement}\r\n            />\r\n            <AnnouncementTable\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                allAnnouncements={allAnnouncements}\r\n                toggleAnnouncementDeleteModal={toggleAnnouncementDeleteModal}\r\n            />\r\n            {isShowDeleteAnnouncementModal && (\r\n                <ApproveRejectModal\r\n                    onApproveReject={handleDeleteAnnouncement}\r\n                    isShow={isShowDeleteAnnouncementModal}\r\n                    desc={t(\"alerts.deletePopup.desc\").replace('$1', \"Announcement\")}\r\n                    // btnRightLoading={deleteAnnouncementPending}\r\n                    btnTextRight={t(\"btns.delete\")}\r\n                    btnTextLeft={t(\"btns.cancel\")}\r\n\r\n                />)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Announcement\r\n"],"names":["props","t","useCustomTranslation","isLoading","toggleAnnouncementDeleteModal","currentPage","setCurrentPage","allAnnouncements","announcementList","setAnnouncementList","useState","useEffect","scopedSlots","useMemo","sn","_","index","_jsx","children","action","item","_jsxs","className","type","onClick","Icon","_Fragment","CustomTable","data","fields","key","label","pagination","totalPages","tableName","selectedAnnouncementData","openModel","handleOpenClose","handleCreateUpdateAnnouncement","errors","setErrors","createUpdateAnnouncementFormData","setCreateUpdateAnnouncementFormData","startDate","endDate","description","handleFromChange","e","fieldName","_e$target","name","target","value","checked","prevState","prevErrors","undefined","resetForm","start_date","end_date","tabIndex","style","visibility","id","Label","text","Input","placeholder","onChange","CustomError","min","Textarea","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","createUpdateAnnouncementSchema","isValid","submitCreateUpdateAnnouncement","dummyData","Announcement","useDispatch","setAllAnnouncement","isOpenCreateUpdateAnnouncement","setIsOpenCreateUpdateAnnouncement","setSelectedAnnouncementData","isShowDeleteAnnouncementModal","setIsShowDeleteAnnouncementModal","deleteAnnouncementId","setDeleteAnnouncementId","handleCreateUpdateAnnouncementModal","CreateUpdateAnnouncement","AnnouncementTable","ApproveRejectModal","onApproveReject","isShow","desc","replace","btnTextRight","btnTextLeft"],"sourceRoot":""}