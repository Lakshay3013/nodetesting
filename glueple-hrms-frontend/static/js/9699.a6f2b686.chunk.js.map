{"version":3,"file":"static/js/9699.a6f2b686.chunk.js","mappings":"uUAUA,MAkRA,EAlR4BA,IAStB,IARF,OACIC,EAAM,eACNC,GAAiB,EAAK,gBACtBC,GAAkB,EAAK,YACvBC,EAAW,aACXC,EAAY,0BACZC,GACHN,EAED,MAAMO,GAAWC,EAAAA,EAAAA,OACX,sBACFC,EAAqB,kBACrBC,EAAiB,oBACjBC,EAAmB,eAEnBC,EAAc,WACdC,EAAU,aACVC,EAAY,iBAEZC,EAAgB,aAChBC,EAAY,eACZC,IAEAC,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,QACzB,EAAEC,IAAMC,EAAAA,EAAAA,MACPC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,IACpCK,EAAOC,IAAYN,EAAAA,EAAAA,UAAS,KAC5BO,EAAKC,IAAUR,EAAAA,EAAAA,UAAS,KACxBS,EAAaC,IAAkBV,EAAAA,EAAAA,UAAS,KACxCW,EAAiBC,IAAsBZ,EAAAA,EAAAA,UAAS,KAChDa,EAAeC,IAAoBd,EAAAA,EAAAA,WAAS,IAC5Ce,EAAgBC,IAAqBhB,EAAAA,EAAAA,WAAS,IAC9CiB,EAASC,IAAclB,EAAAA,EAAAA,UAAS,IAChCmB,EAASC,IAAcpB,EAAAA,EAAAA,UAAS,GAEjCqB,EAAaC,UACf,IAAIC,EAAO,CACPC,aAAcnB,GAGlBvB,EAAS2C,EAAAA,GAAYC,eAAeH,GAAM,GAG9CI,EAAAA,EAAAA,YAAU,KACN,IAAKxC,EAAgB,CACjB,GAAIE,EAEA,YADAP,EAAS2C,EAAAA,GAAYG,qBAAqB,gCAG1CxC,GACyB,OAAX,OAAVA,QAAU,IAAVA,OAAU,EAAVA,EAAYyC,QACZ/C,EAAS2C,EAAAA,GAAYG,qBAAqB,gCAC1C7B,GAAW,GACXmB,EAAW,GACXE,EAAW,IAIvB,IACD,CACChC,EACAC,EACAF,KA+BJwC,EAAAA,EAAAA,YAAU,KACN,IAAKrC,EAAkB,CACnB,GAAIE,EAIA,OAHAV,EAAS2C,EAAAA,GAAYG,qBAAqB,kCAC1C1B,GAAa,QACbE,GAAa,GAGbb,GAC2B,OAAX,OAAZA,QAAY,IAAZA,OAAY,EAAZA,EAAcsC,QACd/C,EAAS2C,EAAAA,GAAYG,qBAAqB,kCAC1C1B,GAAa,GACbE,GAAa,GACbM,EAAe,IACfE,EAAmB,IAI/B,IACD,CACCrB,EACAC,EACAF,IAuDJ,OA1CAqC,EAAAA,EAAAA,YAAU,KACN,IAAK3C,EAAuB,CACxB,GAAIE,EAEA,YADAJ,EAAS2C,EAAAA,GAAYG,qBAAqB,uCAG1C3C,GACgC,OAAX,OAAjBA,QAAiB,IAAjBA,OAAiB,EAAjBA,EAAmB4C,QACnB/C,EAAS2C,EAAAA,GAAYG,qBAAqB,uCAC1C7B,GAAW,GACXK,GAAa,GACbE,EAAS,IACTzB,IAIZ,IACD,CACCI,EACAC,EACAF,KAEJ2C,EAAAA,EAAAA,YAAU,KACN,MAAMG,EAAWC,aAAY,KACrBZ,EAAU,GACVC,EAAWD,EAAU,GAGT,IAAZA,IACgB,IAAZF,EACAe,cAAcF,IAEdV,EAAW,IACXF,EAAWD,EAAU,IAE7B,GACD,KAEH,MAAO,KACHe,cAAcF,EAAS,CAC1B,KAGDG,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAcC,GAAG,GAAGC,MAAO,CAAEC,QAAShE,EAAS,mBAAqB,kBAAmBiE,QAASjE,EAAS,QAAU,KAAM2D,UACpIC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qCAAoCF,UAC/CF,EAAAA,EAAAA,MAAA,OAAKS,MAAM,2BAA0BP,SAAA,EACjCF,EAAAA,EAAAA,MAAA,OAAKS,MAAM,gBAAeP,SAAA,EACtBC,EAAAA,EAAAA,KAAA,MAAIM,MAAM,wCAAuCP,SAAEvC,EAAE,8BACrDwC,EAAAA,EAAAA,KAAA,UAAQO,KAAK,SAASD,MAAM,YAAY,kBAAgB,QAAQ,aAAW,QAAQE,QAASA,IAAM/D,UAEtGuD,EAAAA,EAAAA,KAAA,OAAKM,MAAM,kBAAiBP,UACxBF,EAAAA,EAAAA,MAAA,QAAMI,UAAU,YAAWF,SAAA,EACvBF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,aAAYF,SAAA,EACvBC,EAAAA,EAAAA,KAAA,SAAOS,IAAI,qBAAoBV,SAAC,mBAChCC,EAAAA,EAAAA,KAAA,SAAOO,KAAK,QAAQN,UAAU,eAAeC,GAAG,qBAAqB,mBAAiB,YAAYQ,SAAWC,GA7GtHA,KACnBzC,EAASyC,EAAEC,OAAOC,OAClBlD,GAAW,GACXK,GAAa,EAAM,EA0G4H8C,CAAcH,GAAIE,MAAO5C,EAAO8C,YAAY,8BAElKrD,IACGmC,EAAAA,EAAAA,MAAA,OAAKI,UAAU,aAAYF,SAAA,EACvBF,EAAAA,EAAAA,MAAA,SAAOY,IAAI,MAAKV,SAAA,CAAC,aAAWlC,GACxBmC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,8BAA8BE,MAAO,CAAEa,WAAY,MAAOC,MAAO,SAAUlB,SAAC,aAIzF,OAEJC,EAAAA,EAAAA,KAAA,MACIG,MAAO,CACHe,WAAY,OACZC,cAAe,QACjBpB,UAEFC,EAAAA,EAAAA,KAACoB,EAAAA,EAAQ,CACLnB,UAAU,cACVoB,WAAY,CACRC,MAAO,MACPC,OAAQ,OACRN,MAAO,UACPO,eAAgB,cAChBC,OAAQ,oBACRC,aAAc,WACdC,gBAAiB9D,EACX,YACA,QAEV+D,WAAY/D,EACZgD,MAAO1C,EACPuC,SAAUC,GAvIrCzB,WAEb,GADAd,EAAOuC,GACU,IAAbA,EAAEkB,OAAc,CAChB,IAAI1C,EAAO,CACPC,aAAcnB,EACdE,IAAKwC,EACLmB,OAAQ,IAEZpF,EAAS2C,EAAAA,GAAY0C,iBAAiB5C,GAE1C,GA6HuD6C,CAASrB,GACxBsB,UAAW,EACXC,WAAWlC,EAAAA,EAAAA,KAAA,WACXmC,YAAY,EACZC,YAAaC,IAASrC,EAAAA,EAAAA,KAAA,YAAWqC,WAKhDtE,IACG8B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,aAAYF,SAAA,EACvBC,EAAAA,EAAAA,KAAA,SAAOS,IAAI,cAAaV,SAAC,kBACzBF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,8BAA6BF,SAAA,EACxCC,EAAAA,EAAAA,KAAA,SAAOC,UAAU,eAAeM,KAAM9B,EAAgB,OAAS,WAAYiC,SAAWC,GAAMrC,EAAeqC,EAAEC,OAAOC,OAAQA,MAAOxC,EAAa0C,YAAY,kBAC5Jf,EAAAA,EAAAA,KAAA,KAAGM,MAAM,YAAY,cAAY,OAAOH,MAAO,CAAEmC,KAAM,SAAW9B,QAASA,IAAM9B,GAAiBD,YAG1GoB,EAAAA,EAAAA,MAAA,OAAKI,UAAU,aAAYF,SAAA,EACvBC,EAAAA,EAAAA,KAAA,SAAOS,IAAI,kBAAiBV,SAAC,sBAC7BF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,8BAA6BF,SAAA,EACxCC,EAAAA,EAAAA,KAAA,SAAOO,KAAM5B,EAAiB,OAAS,WAAYsB,UAAU,eAAeS,SAAWC,GAAMnC,EAAmBmC,EAAEC,OAAOC,OAAQA,MAAOtC,EAAiBwC,YAAY,sBACrKf,EAAAA,EAAAA,KAAA,KAAGM,MAAM,YAAY,cAAY,OAAOH,MAAO,CAAEmC,KAAM,SAAW9B,QAASA,IAAM5B,GAAkBD,eAKtG,IAAZjB,IACGsC,EAAAA,EAAAA,KAAA,UACIO,KAAK,SAASN,UAAU,uBACxBO,QAASA,IAAMvB,IAAac,SAC/B,mBAQbF,EAAAA,EAAAA,MAAA,OAAKS,MAAM,oBAAmBP,SAAA,EACb,IAAZrC,IAAkC,IAAdK,IACjBiC,EAAAA,EAAAA,KAAA,UAAQO,KAAK,SAASN,UAAU,kBAAkBO,QAAS3B,EAAU,GAAKE,EAAU,EAAI,KAAOE,EAAWc,SAAElB,EAAU,GAAKE,EAAU,GAAKc,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CAAE,IAAElB,EAAU,GAAK,IAAIA,IAAYA,EAAQ,IAChLE,EAAU,GAAK,IAAIA,IAAYA,KAAe,gBAExC,IAAdhB,IACGiC,EAAAA,EAAAA,KAAA,UAAQO,KAAK,SAASN,UAAU,kBAAkBO,QA9IpDtB,UACtB,IAAIC,EAAO,CACPC,aAAcnB,EACdsE,aAAclE,EACdmE,iBAAkBjE,GAGtB7B,EAAS2C,EAAAA,GAAYoD,sBAAsBtD,GAAM,EAuIoDY,SAAC,8BAMjG3D,IAAU4D,EAAAA,EAAAA,KAAA,OAAKC,UAAU,+BAC3B,ECtDX,EApNeoC,IACb,MAAMK,GAAWC,EAAAA,EAAAA,MACXjG,GAAWC,EAAAA,EAAAA,OACT,2BACJiG,EAA0B,6BAC1BC,EAA4B,+BAC5BC,IACEzF,EAAAA,EAAAA,KAAYC,GAASA,EAAMyF,cAC3B,mBAAEC,EAAkB,aAAEC,EAAY,kBAAEC,IAAsB7F,EAAAA,EAAAA,KAAYC,GAASA,EAAMC,QACpF4F,EAAcC,IAAmBxF,EAAAA,EAAAA,WAAS,IAC1CyF,EAA2BC,IAAgC1F,EAAAA,EAAAA,WAAS,IACpE2F,EAAUC,IAAe5F,EAAAA,EAAAA,UAAS,CACvCK,MAAO,GACPwF,SAAU,MAGLC,EAAQC,IAAa/F,EAAAA,EAAAA,WAAS,IAC9Ba,EAAeC,IAAoBd,EAAAA,EAAAA,WAAS,IAKlCgG,EAAAA,EAAAA,IAAO,CACtB3F,OAAO4F,EAAAA,EAAAA,MAASC,WAChBL,UAAUI,EAAAA,EAAAA,MAASC,cAgBrBvE,EAAAA,EAAAA,YAAU,KACRwE,GAAsB,GACrB,CACDf,EACAC,EACAC,IAIF,MAAMa,EAAuB7E,UAC3B,IAAK8D,EAAoB,CACvB,GAAIE,EAEF,YADAxG,EAAS2C,EAAAA,GAAYG,qBAAqB,6BAG5C,GAAIyD,GACwB,MAAV,OAAZA,QAAY,IAAZA,OAAY,EAAZA,EAAcxD,MAAa,CAC7B,IAAI,MAAEuE,EAAK,KAAEC,GAAShB,IAA4B,OAAZA,QAAY,IAAZA,OAAY,EAAZA,EAAc9D,MAEhD+E,GAAcC,EAAAA,EAAAA,IAAaC,KAAKC,UAAUJ,UACxCK,EAAAA,EAAAA,IAAsBJ,EAAa,cACnCI,EAAAA,EAAAA,IAAsBN,EAAO,aACnCtH,EAAS6H,EAAAA,GAAgBC,gBAAgBP,IAEzCQ,EAAAA,EAAQC,IAAI,YAAaV,GACzBS,EAAAA,EAAQC,IAAI,WAAYN,KAAKC,UAAUJ,IACvCvH,EAASiI,EAAAA,GAAkBC,kCAC3BlI,EAAS2C,EAAAA,GAAYG,qBAAqB,6BAEtB,8BAAb,OAAJyE,QAAI,IAAJA,OAAI,EAAJA,EAAMY,SACPnC,EAAS,eAETA,EAAS,IAKb,CAGJ,GAKIoC,EAAkBnE,IACtB,MAAM,KAAEoE,EAAI,MAAElE,GAAUF,EAAEC,OAC1B4C,EAAY,IAAKD,EAAU,CAACwB,GAAOlE,GAAQ,EAW7C,OAEEhB,EAAAA,EAAAA,MAAA,OAAKI,UAAU,cAAaF,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaF,UAC1BC,EAAAA,EAAAA,KAAA,KAAGgF,KAAK,GAAEjF,UACRC,EAAAA,EAAAA,KAAA,OAAKiF,IAAI,0BAA0BC,IAAI,GAAG5D,MAAO,WAGrDzB,EAAAA,EAAAA,MAAA,OAAKI,UAAU,gBAAeF,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaF,UAC1BF,EAAAA,EAAAA,MAAA,UAAQI,UAAU,oBAAmBF,SAAA,EACnCC,EAAAA,EAAAA,KAAA,OAAKiF,IAAI,iBAAiBC,IAAI,MAC9BrF,EAAAA,EAAAA,MAAA,QAAMI,UAAU,QAAOF,SAAA,CACpB,KACDC,EAAAA,EAAAA,KAAA,OAAKiF,IAAI,wBAAwBC,IAAI,GAAG5D,MAAO,SAEjDzB,EAAAA,EAAAA,MAAA,QAAMI,UAAU,QAAOF,SAAA,CACpB,KACDC,EAAAA,EAAAA,KAAA,OAAKiF,IAAI,6BAA6BC,IAAI,GAAG5D,MAAO,SAEtDzB,EAAAA,EAAAA,MAAA,QAAMI,UAAU,QAAOF,SAAA,CACpB,KACDC,EAAAA,EAAAA,KAAA,OAAKiF,IAAI,qBAAqBC,IAAI,GAAG5D,MAAO,SAE9CzB,EAAAA,EAAAA,MAAA,QAAMI,UAAU,QAAOF,SAAA,CACpB,KACDC,EAAAA,EAAAA,KAAA,OAAKiF,IAAI,oBAAoBC,IAAI,GAAG5D,MAAO,SAE7CzB,EAAAA,EAAAA,MAAA,QAAMI,UAAU,QAAOF,SAAA,CACpB,KACDC,EAAAA,EAAAA,KAAA,OAAKiF,IAAI,kCAAkCC,IAAI,GAAG5D,MAAO,SAE3DzB,EAAAA,EAAAA,MAAA,QAAMI,UAAU,QAAOF,SAAA,CACpB,KACDC,EAAAA,EAAAA,KAAA,OAAKiF,IAAI,6BAA6BC,IAAI,GAAG5D,MAAO,SAEtDzB,EAAAA,EAAAA,MAAA,QAAMI,UAAU,QAAOF,SAAA,EACrBC,EAAAA,EAAAA,KAAA,OAAKiF,IAAI,sBAAsBC,IAAI,GAAG5D,MAAO,KAAM,qCAKzDtB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,6BAA4BF,UACzCF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,eAAcF,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,aAAYF,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAIC,UAAU,OAAMF,SAAC,WACrBC,EAAAA,EAAAA,KAAA,KAAGC,UAAU,GAAEF,SAAC,yCAIlBF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,OAAMF,SAAA,EACnBC,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAYF,SAAC,gCAC9BC,EAAAA,EAAAA,KAAA,SACEC,UAAU,qBACVM,KAAK,QACLQ,YAAY,sBACZgE,KAAK,QACLrE,SAAWC,GAAMmE,EAAenE,GAChCE,MAAO0C,EAAStF,YAGpB4B,EAAAA,EAAAA,MAAA,OAAKI,UAAU,OAAMF,SAAA,EACnBC,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAYF,SAAC,cAC9BF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,oBAAmBF,SAAA,EAChCC,EAAAA,EAAAA,KAAA,SACEC,UAAU,0BACVM,KAAM4C,EAAe,OAAS,WAC9BpC,YAAY,iBACZgE,KAAK,WACLlE,MAAO0C,EAASE,SAChB/C,SAAWC,GAAMmE,EAAenE,MAElCX,EAAAA,EAAAA,KAAA,QAAMC,UAAU,WAAWO,QAASA,IAAM4C,GAAiBD,GAAcpD,SACtEoD,GAAenD,EAAAA,EAAAA,KAAA,OAAKiF,IAAI,sBAAsBC,IAAI,GAAG5D,MAAO,MAAStB,EAAAA,EAAAA,KAAA,OAAKiF,IAAI,sBAAsBC,IAAI,GAAG5D,MAAO,cAIzHtB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWF,UACxBF,EAAAA,EAAAA,MAAA,OAAKI,UAAU,iBAAgBF,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,SAAOO,KAAK,WAAWL,GAAG,eAC1BF,EAAAA,EAAAA,KAAA,SAAOmF,QAAQ,YAAWpF,SAAC,sBAI/BC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wBAAuBF,UACpCC,EAAAA,EAAAA,KAACoF,EAAAA,GAAY,CACXC,KAAK,QACLC,UAAWtC,EACXuC,WAAY,gBACZC,YA5JMtG,iBACpB,MAAMuG,EAAS,CACbxH,MAAe,OAARsF,QAAQ,IAARA,OAAQ,EAARA,EAAUtF,MACjBwF,SAAkB,OAARF,QAAQ,IAARA,OAAQ,EAARA,EAAUE,UAEtB/G,EAAS2C,EAAAA,GAAYqG,iBAAiBD,GACxC,OAyJYzF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,gCAA+BF,SAAC,6CAGlDC,EAAAA,EAAAA,KAAA,KAAGgF,KAAK,2BAA2BpE,OAAO,SAASX,UAAU,sBAAqBF,UAChFC,EAAAA,EAAAA,KAAA,OAAKiF,IAAI,0BAA0BC,IAAI,GAAG5D,MAAO,kBAO1D+B,IAA4BrD,EAAAA,EAAAA,KAAC2F,EAAmB,CAC/CvJ,OAAQiH,EACR5G,0BA9G4BA,KAChC6G,GAA8BD,EAA0B,MAgHlD,C,uGCxKJuC,EAAgB,SAACC,GAAiB,MAAe,kBAARA,GAA4B,OAARA,CAAY,EAEzEC,EAAW,SAACC,G,IAChBC,EAAUD,EAAAlF,MAAVA,OAAK,IAAAmF,EAAG,GAAEA,EACVC,EAAaF,EAAA9D,UAAbA,OAAS,IAAAgE,EAAG,EAACA,EACbvF,EAAQqF,EAAArF,SACRwF,EAAOH,EAAAG,QACP9D,EAAW2D,EAAA3D,YACX+D,EAAuBJ,EAAAK,gBAAvBA,OAAe,IAAAD,GAAQA,EACvBE,EAAkBN,EAAAO,UAAlBA,OAAS,IAAAD,EAAG,OAAMA,EAClBE,EAAeR,EAAAQ,gBACfxF,EAAWgF,EAAAhF,YACXyF,EAAcT,EAAAS,eACdnF,EAAU0E,EAAA1E,WACVoF,EAAAV,EAAAW,kBAAAA,OAAoB,IAAAD,GAAKA,EAEnBE,EAAgCC,EAAAA,SAAe,GAA9CC,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAC5BI,EAAYH,EAAAA,OAA6C,IAEzDI,EAAc,WAAM,OAACnG,EAAQA,EAAMoG,WAAWC,MAAM,IAAM,EAAtC,EAEpB/E,EAA2B,WAAdmE,GAAwC,QAAdA,EAE7CM,EAAAA,WAAgB,WACdG,EAAUI,QAAUJ,EAAUI,QAAQC,MAAM,EAAGnF,EACjD,GAAG,CAACA,IAEJ2E,EAAAA,WAAgB,W,MACVR,IACkB,QAApBL,EAAAgB,EAAUI,QAAQ,UAAE,IAAApB,GAAAA,EAAEsB,QAE1B,GAAG,CAACjB,IAEJ,IAAMkB,EAAsB,WAC1B,GAA2B,kBAAhBvG,EAA0B,CACnC,GAAIA,EAAYc,SAAWI,EACzB,OAAOlB,EAGLA,EAAYc,OAAS,GACvB0F,QAAQC,MAAM,qEAEjB,CAEH,EAEMC,EAAoB,SAAC5G,GAEzB,OADoBsB,GAAcuF,MAAMC,OAAO9G,IAA2B,kBAAVA,IAClB,IAAxBA,EAAM+G,OAAO/F,MACrC,EAEMgG,EAAe,SAACC,GACZ,IAAAjH,EAAUiH,EAAMlH,OAAMC,MAE1B4G,EAAkB5G,KACpBkH,EAAkBlH,GAClBmH,EAAWnB,EAAc,GAE7B,EAEMoB,EAAoB,SAACH,GACjB,IAAAI,EAAgBJ,EAAKI,YACvBrH,EAAQiH,EAAMlH,OAAOC,MAE3B,IAAK4G,EAAkB5G,GAAQ,CAI7B,GAAIA,EAAMgB,SAAWI,EACKpB,EAAMqG,MAAM,IAAIiB,MAAK,SAACC,GAAc,OAACX,EAAkBW,EAAU,MAEvFC,EAAgBxH,EAAMqG,MAAM,KAC5Bc,EAAW/F,EAAY,IAOF,OAArBiG,EAAY/I,MAA2C,0BAA1B+I,EAAY5B,YAC3CwB,EAAMQ,iBACNP,EAAkB,IAClBC,EAAWnB,EAAc,IAK3BiB,EAAMlH,OAAOC,MAAQ,EACtB,CACH,EAOM0H,EAAa,WACjBzB,EAAeD,EAAc,EAC/B,EAEM2B,EAAgB,SAACV,GACrB,IAAM3J,EAAM6I,IACR,CAACc,EAAMrI,KAAMqI,EAAMW,KAAKC,SAAS,cACnCZ,EAAMQ,iBACNP,EAAkB,IAClBC,EAAWnB,EAAc,IACD,WAAfiB,EAAMrI,MACfqI,EAAMQ,iBACNP,EAAkB,KACM,cAAfD,EAAMrI,MACfqI,EAAMQ,iBACNN,EAAWnB,EAAc,IACD,eAAfiB,EAAMrI,MAMRqI,EAAMW,MAAQtK,EAAI0I,IALzBiB,EAAMQ,iBACNN,EAAWnB,EAAc,IAQV,aAAfiB,EAAMrI,MACS,UAAfqI,EAAMrI,MACS,YAAfqI,EAAMrI,MACS,cAAfqI,EAAMrI,MAENqI,EAAMQ,gBAEV,EAEMN,EAAa,SAACW,G,QACZ9B,EAAc+B,KAAKC,IAAID,KAAKE,IAAI7G,EAAY,EAAG0G,GAAQ,GAEzD5B,EAAUI,QAAQN,KACU,QAA9Bd,EAAAgB,EAAUI,QAAQN,UAAY,IAAAd,GAAAA,EAAEsB,QACF,QAA9BrB,EAAAe,EAAUI,QAAQN,UAAY,IAAAb,GAAAA,EAAE+C,SAChCjC,EAAeD,GAEnB,EAEMkB,EAAoB,SAAClH,GACzB,IAAM1C,EAAM6I,IACZ7I,EAAI0I,GAAehG,EAAM,GACzBwH,EAAgBlK,EAClB,EAEMkK,EAAkB,SAAClK,GACvB,IAAM6K,EAAW7K,EAAI8K,KAAK,IAC1BvI,EAASsI,EACX,EAEME,EAAc,SAACpB,G,MACnBA,EAAMQ,iBAEN,IAAMnK,EAAM6I,IACRmC,EAAkBtC,EAGhBuC,EAAatB,EAAMuB,cACtBC,QAAQ,cACRlC,MAAM,EAAGnF,EAAY4E,GACrBK,MAAM,IAGT,IAAI/E,IAAciH,EAAWjB,MAAK,SAACtH,GAAU,OAAA6G,MAAMC,OAAO9G,GAAb,IAA7C,CAKA,IAAK,IAAI0I,EAAM,EAAGA,EAAMtH,IAAasH,EAC/BA,GAAO1C,GAAeuC,EAAWvH,OAAS,IAC5C1D,EAAIoL,GAA6B,QAAtBxD,EAAAqD,EAAWI,eAAW,IAAAzD,EAAAA,EAAA,GACjCoD,KAIJnB,EAAWmB,GACXd,EAAgBlK,EAXf,CAYH,EAEA,OACEyI,EAAAA,cAAA,OACEzG,MAAOsJ,OAAOC,OAAO,CAAEtJ,QAAS,OAAQuJ,WAAY,UAAY/D,EAAcY,IAAmBA,GACjGvG,UAAqC,kBAAnBuG,EAA8BA,OAAiBoD,EACjE1D,QAASA,GAER2D,MAAMC,KAAK,CAAEjI,OAAQI,IAAa,SAAC8H,EAAGpB,GAAU,OAAAA,CAAK,IAAEqB,KAAI,SAACrB,G,UAAU,OACrE/B,EAAAA,cAACA,EAAAA,SAAe,CAAA6B,IAAKE,GAClBvG,EACC,CACEvB,MAA2B,QAApBkF,EAAAiB,IAAc2B,UAAM,IAAA5C,EAAAA,EAAI,GAC/BhF,YAA2C,QAA9BkF,EAAwB,QAAxBD,EAAAsB,WAAwB,IAAAtB,OAAA,EAAAA,EAAA2C,UAAM,IAAA1C,EAAAA,OAAI2D,EAC/CK,IAAK,SAACC,GAAY,OAACnD,EAAUI,QAAQwB,GAASuB,CAAO,EACrDxJ,SAAUmH,EACVsC,QAAS,SAACrC,GAAU,OAxGZ,SAACA,GAA8C,gBAACa,GAClE7B,EAAe6B,GACfb,EAAMlH,OAAOmI,Q,CACd,CAqG+BqB,CAAYtC,EAAZsC,CAAmBzB,EAAM,EAC7C0B,OAAQ9B,EACR+B,UAAW9B,EACXtC,QAASgD,EACTqB,aAAc,MACd,aAAc,8BAAAC,OAA8B7B,EAAQ,GACpDxI,MAAOsJ,OAAOC,OACXhD,EAAuE,CAAC,EAAnD,CAAEpF,MAAO,MAAOmJ,UAAW,UACjD7E,EAAcvE,GAAcA,EAAa,CAAC,GAE5CpB,UAAiC,kBAAfoB,EAA0BA,OAAauI,EACzDrJ,KAAM+F,EACNoE,UAAWvI,EAAa,UAAY,OACpCwI,QAAS1C,GAEXU,GAEDA,EAAQ1G,EAAY,IAAiC,oBAApBsE,EAAiCA,EAAgBoC,GAASpC,G,IAKtG,C","sources":["components/auth/login/ForgotPasswordModal.js","components/auth/login/Login.js","../node_modules/src/index.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { CustomButton, CustomError } from '../../globalComponents'\r\nimport { useCustomTranslation } from '../../../translation'\r\nimport { Input, Label } from '../../commanComponent'\r\nimport { validateSchema } from '../../../utils/ValidationHelper'\r\nimport OtpInput from 'react-otp-input';\r\nimport { resetPasswordSchema } from '../../../utils/ValidationSchema'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { authActions } from '../../../core/resource/actions'\r\n\r\nconst ForgotPasswordModal = (\r\n    {\r\n        isShow,\r\n        btnLeftLoading = false,\r\n        btnRightLoading = false,\r\n        btnTextLeft,\r\n        btnTextRight,\r\n        toggleForgotPasswordModal\r\n    }\r\n) => {\r\n    const dispatch = useDispatch();\r\n    const {\r\n        forgotPasswordPending,\r\n        forgotPasswordRes,\r\n        forgotPasswordError,\r\n\r\n        sendOtpPending,\r\n        sendOtpRes,\r\n        sendOtpError,\r\n\r\n        verifyOtpPending,\r\n        verifyOtpRes,\r\n        verifyOtpError,\r\n\r\n    } = useSelector(state => state.auth);\r\n    const { t } = useCustomTranslation()\r\n    const [otpSent, setOtpSent] = useState(false)\r\n    const [buttonOTP, setButtonOTP] = useState(false);\r\n    const [otpVerify, setOtpVerify] = useState(false)\r\n    const [email, setEmail] = useState('')\r\n    const [otp, setOtp] = useState('')\r\n    const [newPassword, setNewPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [passwordShown, setPasswordShown] = useState(false);\r\n    const [passwordShown1, setPasswordShown1] = useState(false);\r\n    const [minutes, setMinutes] = useState(0);\r\n    const [seconds, setSeconds] = useState(0);\r\n\r\n    const sendOtpFun = async () => {\r\n        let data = {\r\n            email_mobile: email\r\n        }\r\n\r\n        dispatch(authActions.sendOtpRequest(data))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!sendOtpPending) {\r\n            if (sendOtpError) {\r\n                dispatch(authActions.handleClearAuthStore(\"HANDLE_CLEAR_SEND_OTP_STORE\"))\r\n                return;\r\n            }\r\n            if (sendOtpRes) {\r\n                if (sendOtpRes?.code === 200) {\r\n                    dispatch(authActions.handleClearAuthStore(\"HANDLE_CLEAR_SEND_OTP_STORE\"))\r\n                    setOtpSent(true)\r\n                    setMinutes(0)\r\n                    setSeconds(59)\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        sendOtpRes,\r\n        sendOtpError,\r\n        sendOtpPending\r\n    ]);\r\n\r\n    const onClose = () => {\r\n        toggleForgotPasswordModal();\r\n        setOtpSent(false);\r\n        setOtpVerify(false);\r\n        setButtonOTP(false);\r\n        setOtp('');\r\n        setEmail('')\r\n    };\r\n\r\n    const onEmailChange = (e) => {\r\n        setEmail(e.target.value)\r\n        setOtpSent(false);\r\n        setOtpVerify(false);\r\n    };\r\n\r\n    const checkOtp = async e => {\r\n        setOtp(e);\r\n        if (e.length === 6) {\r\n            let data = {\r\n                email_mobile: email,\r\n                otp: e,\r\n                otp_id: ''\r\n            };\r\n            dispatch(authActions.verifyOtpRequest(data))\r\n\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!verifyOtpPending) {\r\n            if (verifyOtpError) {\r\n                dispatch(authActions.handleClearAuthStore(\"HANDLE_CLEAR_VERIFY_OTP_STORE\"))\r\n                setButtonOTP(false);\r\n                setOtpVerify(false);\r\n                return;\r\n            }\r\n            if (verifyOtpRes) {\r\n                if (verifyOtpRes?.code === 200) {\r\n                    dispatch(authActions.handleClearAuthStore(\"HANDLE_CLEAR_VERIFY_OTP_STORE\"))\r\n                    setButtonOTP(true);\r\n                    setOtpVerify(true);\r\n                    setNewPassword('');\r\n                    setConfirmPassword('');\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        verifyOtpRes,\r\n        verifyOtpError,\r\n        verifyOtpPending\r\n    ]);\r\n\r\n    const forgotPasswordFun = async () => {\r\n        let data = {\r\n            email_mobile: email,\r\n            new_password: newPassword,\r\n            confirm_password: confirmPassword,\r\n\r\n        }\r\n        dispatch(authActions.forgotPasswordRequest(data))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!forgotPasswordPending) {\r\n            if (forgotPasswordError) {\r\n                dispatch(authActions.handleClearAuthStore(\"HANDLE_CLEAR_FORGOT_PASSWORD_STORE\"))\r\n                return;\r\n            }\r\n            if (forgotPasswordRes) {\r\n                if (forgotPasswordRes?.code === 200) {\r\n                    dispatch(authActions.handleClearAuthStore(\"HANDLE_CLEAR_FORGOT_PASSWORD_STORE\"))\r\n                    setOtpSent(false)\r\n                    setOtpVerify(false)\r\n                    setEmail(\"\")\r\n                    toggleForgotPasswordModal()\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        forgotPasswordRes,\r\n        forgotPasswordError,\r\n        forgotPasswordPending\r\n    ]);\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (seconds > 0) {\r\n                setSeconds(seconds - 1);\r\n            }\r\n\r\n            if (seconds === 0) {\r\n                if (minutes === 0) {\r\n                    clearInterval(interval);\r\n                } else {\r\n                    setSeconds(59);\r\n                    setMinutes(minutes - 1);\r\n                }\r\n            }\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    });\r\n    return (\r\n        <>\r\n            <div className=\"modal fade \" id='' style={{ display: isShow ? \"unset !important\" : \"none !important\", opacity: isShow ? \"unset\" : \"0\" }}>\r\n                <div className=\"modal-dialog modal-dialog-centered\">\r\n                    <div class=\"modal-content rounded-1 \">\r\n                        <div class=\"modal-header \">\r\n                            <h1 class=\"modal-title fs-5 fw-bold text-primary\">{t(\"headings.forgotPassword\")}</h1>\r\n                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\" onClick={() => toggleForgotPasswordModal()}></button>\r\n                        </div>\r\n                        <div class=\"modal-body pt-0\">\r\n                            <form className='mt-2 mb-2'>\r\n                                <div className=\"form-group\">\r\n                                    <label for=\"exampleInputEmail1\">Email Address</label>\r\n                                    <input type=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" onChange={(e) => onEmailChange(e)} value={email} placeholder=\"Enter registered email\" />\r\n                                </div>\r\n                                {otpSent &&\r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"otp\">Enter OTP {buttonOTP ? (\r\n                                            <a className=\"badge badge-success text-lg\" style={{ marginLeft: \"5px\", color: \"white\" }}>\r\n                                                Verified\r\n                                            </a>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}</label>\r\n                                        <td\r\n                                            style={{\r\n                                                paddingTop: '1.5%',\r\n                                                paddingBottom: '1.5%',\r\n                                            }}\r\n                                        >\r\n                                            <OtpInput\r\n                                                className=\"otp-spacing\"\r\n                                                inputStyle={{\r\n                                                    width: '50%',\r\n                                                    height: '150%',\r\n                                                    color: '#212529',\r\n                                                    backgroundClip: 'padding-box',\r\n                                                    border: '1px solid #ced4da',\r\n                                                    borderRadius: '0.375rem',\r\n                                                    backgroundColor: buttonOTP\r\n                                                        ? 'lightgray'\r\n                                                        : '#fff',\r\n                                                }}\r\n                                                isDisabled={buttonOTP}\r\n                                                value={otp}\r\n                                                onChange={e => checkOtp(e)}\r\n                                                numInputs={6}\r\n                                                separator={<span></span>}\r\n                                                isInputNum={true}\r\n                                                renderInput={props => <input {...props} />}\r\n                                            />\r\n                                        </td>\r\n                                    </div>\r\n                                }\r\n                                {otpVerify &&\r\n                                    <>\r\n                                        <div className=\"form-group\">\r\n                                            <label for=\"newpassword\">New Password</label>\r\n                                            <div className=\"position-relative eyeContt2\">\r\n                                                <input className=\"form-control\" type={passwordShown ? \"text\" : \"password\"} onChange={(e) => setNewPassword(e.target.value)} value={newPassword} placeholder=\"New Password\" />\r\n                                                <i class=\"fa fa-eye\" aria-hidden=\"true\" style={{ left: '435px' }} onClick={() => setPasswordShown(passwordShown ? false : true)}></i>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <label for=\"confirmpassword\">Confirm Password</label>\r\n                                            <div className=\"position-relative eyeContt2\">\r\n                                                <input type={passwordShown1 ? \"text\" : \"password\"} className=\"form-control\" onChange={(e) => setConfirmPassword(e.target.value)} value={confirmPassword} placeholder=\"Confirm Password\" />\r\n                                                <i class=\"fa fa-eye\" aria-hidden=\"true\" style={{ left: '435px' }} onClick={() => setPasswordShown1(passwordShown1 ? false : true)}></i>\r\n                                            </div>\r\n                                        </div>\r\n                                    </>\r\n                                }\r\n                                {otpSent === false &&\r\n                                    <button\r\n                                        type=\"button\" className=\"btn btn-primary mt-3\"\r\n                                        onClick={() => sendOtpFun()}\r\n                                    >Send OTP\r\n                                    </button>\r\n                                }\r\n                                {/* {otpSent == true && otpVerify == false &&\r\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={otpVerifyFun}>Verify OTP</button>\r\n                        } */}\r\n                            </form>\r\n                        </div>\r\n                        <div class=\"modal-footer pt-0\">\r\n                            {otpSent === true && otpVerify === false &&\r\n                                <button type=\"button\" className=\"btn btn-primary\" onClick={minutes > 0 || seconds > 0 ? null : sendOtpFun}>{minutes > 0 || seconds > 0 ? (<> {minutes < 10 ? `0${minutes}` : minutes}:\r\n                                    {seconds < 10 ? `0${seconds}` : seconds}</>) : 'Resend OTP'}</button>\r\n                            }\r\n                            {otpVerify === true &&\r\n                                <button type=\"button\" className=\"btn btn-primary\" onClick={forgotPasswordFun}>Change Password</button>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {isShow && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ForgotPasswordModal\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./Login.css\";\r\nimport { object, string, } from \"yup\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { authActions, employeeActions, notificationActions, permissionActions } from '../../../core/resource/actions';\r\nimport { notify } from \"../../globalComponents/ToastNotification\";\r\nimport { getDataFromLocalstorage, getLocalDataAsObject, setDataOnLocalstorage } from \"../../../utils/AppHelper\";\r\nimport Cookies from 'js-cookie';\r\nimport { decryptValue, encryptValue } from \"../../../utils/common\";\r\nimport { CustomButton } from \"../../globalComponents\";\r\nimport ForgotPasswordModal from \"./ForgotPasswordModal\";\r\n\r\nconst Login = (props) => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n    const {\r\n      getMenuRoutesPermissionRes,\r\n      getMenuRoutesPermissionError,\r\n      getMenuRoutesPermissionPending\r\n    } = useSelector(state => state.permission)\r\n  const { isUserLoginPending, userLoginRes, userLoginResError } = useSelector(state => state.auth);\r\n  const [showPassword, setShowPassword] = useState(false)\r\n  const [isShowForgotPasswordModal, setIsShowForgotPasswordModal] = useState(false)\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n\r\n  const togglePasswordVisiblity = () => {\r\n    setPasswordShown(passwordShown ? false : true);\r\n  };\r\n  let FormSchema = object({\r\n    email: string().required(),\r\n    password: string().required(),\r\n  });\r\n  const saveUser = async () => {\r\n    // await login({\r\n    //   body: { email: formData?.email, password: formData?.password },\r\n    // });\r\n  };\r\n\r\n  const handleOnLogin = async (filePayload = null) => {\r\n    const params = {\r\n      email: formData?.email,\r\n      password: formData?.password,\r\n    };\r\n    dispatch(authActions.userLoginRequest(params));\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleLoginResposnse()\r\n  }, [\r\n    isUserLoginPending,\r\n    userLoginRes,\r\n    userLoginResError,\r\n  ]);\r\n       \r\n\r\n  const handleLoginResposnse = async () => {\r\n    if (!isUserLoginPending) {\r\n      if (userLoginResError) {\r\n        dispatch(authActions.handleClearAuthStore('HANDLE_CLEAR_LOGIN_STORE'))\r\n        return;\r\n      }\r\n      if (userLoginRes) {\r\n        if (userLoginRes?.code == 200) {\r\n          let { token, user } = userLoginRes && userLoginRes?.data\r\n\r\n          let encryptUser = encryptValue(JSON.stringify(user))\r\n          await setDataOnLocalstorage(encryptUser, \"user\");\r\n          await setDataOnLocalstorage(token, \"authtoken\");\r\n          dispatch(employeeActions.employeeDetails(user))\r\n\r\n          Cookies.set('authtoken', token);\r\n          Cookies.set(\"authData\", JSON.stringify(user));\r\n          dispatch(permissionActions.getMenuRoutesPermissionRequest())\r\n          dispatch(authActions.handleClearAuthStore('HANDLE_CLEAR_LOGIN_STORE'))\r\n\r\n          if(user?.role_id ===\"67fdf22e24286606d8499d9a\"){\r\n            navigate('/onboarding')\r\n          }else{\r\n            navigate('/')\r\n          }\r\n  \r\n          \r\n\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n  \r\n \r\n\r\n  const handleFormdata = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const isViewModalOpen = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const toggleForgotPasswordModal = () => {\r\n    setIsShowForgotPasswordModal(!isShowForgotPasswordModal)\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"mittContent\">\r\n      <div className=\"glueplelogo\">\r\n        <a href=\"\">\r\n          <img src=\"images/glueple-logo.png\" alt=\"\" width={120} />\r\n        </a>\r\n      </div>\r\n      <div className=\"inner-content\">\r\n        <div className=\"leftContent\">\r\n          <figure className=\"position-relative\">\r\n            <img src=\"images/img.png\" alt=\"\" />\r\n            <span className=\"icon1\">\r\n              {\" \"}\r\n              <img src=\"images/attendance.png\" alt=\"\" width={70} />\r\n            </span>\r\n            <span className=\"icon2\">\r\n              {\" \"}\r\n              <img src=\"images/human-resources.png\" alt=\"\" width={70} />\r\n            </span>\r\n            <span className=\"icon3\">\r\n              {\" \"}\r\n              <img src=\"images/payroll.png\" alt=\"\" width={70} />\r\n            </span>\r\n            <span className=\"icon4\">\r\n              {\" \"}\r\n              <img src=\"images/hiring.png\" alt=\"\" width={60} />\r\n            </span>\r\n            <span className=\"icon5\">\r\n              {\" \"}\r\n              <img src=\"images/human-resources-srch.png\" alt=\"\" width={60} />\r\n            </span>\r\n            <span className=\"icon6\">\r\n              {\" \"}\r\n              <img src=\"images/market-analysis.png\" alt=\"\" width={65} />\r\n            </span>\r\n            <span className=\"icon7\">\r\n              <img src=\"images/employee.png\" alt=\"\" width={50} />\r\n              Streamline Your Workforce\r\n            </span>\r\n          </figure>\r\n        </div>\r\n        <div className=\"rightTxt position-relative\">\r\n          <div className=\"loginFormBox\">\r\n            <div className=\"text-start\">\r\n              <h3 className=\"mb-2\">Login</h3>\r\n              <p className=\"\">\r\n                Human Resource Management System\r\n              </p>\r\n            </div>\r\n            <form>\r\n              <div className=\"mb-4\">\r\n                <label className=\"form-label\">Enter Email or Employee ID</label>\r\n                <input\r\n                  className=\"form-control w-100\"\r\n                  type=\"email\"\r\n                  placeholder=\"Email / Employee ID\"\r\n                  name=\"email\"\r\n                  onChange={(e) => handleFormdata(e)}\r\n                  value={formData.email}\r\n                />\r\n              </div>\r\n              <div className=\"mb-1\">\r\n                <label className=\"form-label\">Password</label>\r\n                <div className=\"position-relative\">\r\n                  <input\r\n                    className=\"form-control w-100 pe-5\"\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    placeholder=\"Enter Password\"\r\n                    name=\"password\"\r\n                    value={formData.password}\r\n                    onChange={(e) => handleFormdata(e)}\r\n                  />\r\n                  <span className=\"eyeInput\" onClick={() => setShowPassword(!showPassword)}>\r\n                    {showPassword ? <img src=\"images/eye-open.svg\" alt=\"\" width={20} /> : <img src=\"images/eye-hide.svg\" alt=\"\" width={20} />}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div className=\"forgotTxt\">\r\n                <div className=\"customCheckbox\">\r\n                  <input type=\"checkbox\" id=\"termCheck\" />\r\n                  <label htmlFor=\"termCheck\">Remember me</label>\r\n                </div>\r\n                {/* <span onClick={() => toggleForgotPasswordModal()}>Forgot Password</span> */}\r\n              </div>\r\n              <div className=\"text-center my-2 mt-4\">\r\n                <CustomButton\r\n                  text=\"Login\"\r\n                  isLoading={isUserLoginPending}\r\n                  classNames={'btn btn-login'}\r\n                  handleClick={handleOnLogin}\r\n                />\r\n              </div>\r\n              <strong className=\"fs-8 mt-4 text-center d-block\">\r\n                © Copyright Powered by @QDegrees.com\r\n              </strong>\r\n              <a href=\"https://www.qdegrees.com\" target=\"_blank\" className=\"text-center d-block\">\r\n                <img src=\"images/qdegreesLogo.png\" alt=\"\" width={80} />\r\n              </a>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {isShowForgotPasswordModal &&<ForgotPasswordModal\r\n        isShow={isShowForgotPasswordModal}\r\n        toggleForgotPasswordModal={toggleForgotPasswordModal}\r\n      />}\r\n\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import React from 'react';\n\ntype AllowedInputTypes = 'password' | 'text' | 'number' | 'tel';\n\ntype InputProps = Required<\n  Pick<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    | 'value'\n    | 'onChange'\n    | 'onFocus'\n    | 'onBlur'\n    | 'onKeyDown'\n    | 'onPaste'\n    | 'aria-label'\n    | 'autoComplete'\n    | 'style'\n    | 'inputMode'\n    | 'onInput'\n  > & {\n    ref: React.RefCallback<HTMLInputElement>;\n    placeholder: string | undefined;\n    className: string | undefined;\n    type: AllowedInputTypes;\n  }\n>;\n\ninterface OTPInputProps {\n  /** Value of the OTP input */\n  value?: string;\n  /** Number of OTP inputs to be rendered */\n  numInputs?: number;\n  /** Callback to be called when the OTP value changes */\n  onChange: (otp: string) => void;\n  /** Callback to be called when pasting content into the component */\n  onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;\n  /** Function to render the input */\n  renderInput: (inputProps: InputProps, index: number) => React.ReactNode;\n  /** Whether the first input should be auto focused */\n  shouldAutoFocus?: boolean;\n  /** Placeholder for the inputs */\n  placeholder?: string;\n  /** Function to render the separator */\n  renderSeparator?: ((index: number) => React.ReactNode) | React.ReactNode;\n  /** Style for the container */\n  containerStyle?: React.CSSProperties | string;\n  /** Style for the input */\n  inputStyle?: React.CSSProperties | string;\n  /** The type that will be passed to the input being rendered */\n  inputType?: AllowedInputTypes;\n  /** Do not apply the default styles to the inputs, will be removed in future versions */\n  skipDefaultStyles?: boolean; // TODO: Remove in next major release\n}\n\nconst isStyleObject = (obj: unknown) => typeof obj === 'object' && obj !== null;\n\nconst OTPInput = ({\n  value = '',\n  numInputs = 4,\n  onChange,\n  onPaste,\n  renderInput,\n  shouldAutoFocus = false,\n  inputType = 'text',\n  renderSeparator,\n  placeholder,\n  containerStyle,\n  inputStyle,\n  skipDefaultStyles = false,\n}: OTPInputProps) => {\n  const [activeInput, setActiveInput] = React.useState(0);\n  const inputRefs = React.useRef<Array<HTMLInputElement | null>>([]);\n\n  const getOTPValue = () => (value ? value.toString().split('') : []);\n\n  const isInputNum = inputType === 'number' || inputType === 'tel';\n\n  React.useEffect(() => {\n    inputRefs.current = inputRefs.current.slice(0, numInputs);\n  }, [numInputs]);\n\n  React.useEffect(() => {\n    if (shouldAutoFocus) {\n      inputRefs.current[0]?.focus();\n    }\n  }, [shouldAutoFocus]);\n\n  const getPlaceholderValue = () => {\n    if (typeof placeholder === 'string') {\n      if (placeholder.length === numInputs) {\n        return placeholder;\n      }\n\n      if (placeholder.length > 0) {\n        console.error('Length of the placeholder should be equal to the number of inputs.');\n      }\n    }\n    return undefined;\n  };\n\n  const isInputValueValid = (value: string) => {\n    const isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n    return isTypeValid && value.trim().length === 1;\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (isInputValueValid(value)) {\n      changeCodeAtFocus(value);\n      focusInput(activeInput + 1);\n    }\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { nativeEvent } = event;\n    const value = event.target.value;\n\n    if (!isInputValueValid(value)) {\n      // Pasting from the native autofill suggestion on a mobile device can pass\n      // the pasted string as one long input to one of the cells. This ensures\n      // that we handle the full input and not just the first character.\n      if (value.length === numInputs) {\n        const hasInvalidInput = value.split('').some((cellInput) => !isInputValueValid(cellInput));\n        if (!hasInvalidInput) {\n          handleOTPChange(value.split(''));\n          focusInput(numInputs - 1);\n        }\n      }\n\n      // @ts-expect-error - This was added previously to handle and edge case\n      // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n      // still needed.\n      if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n        event.preventDefault();\n        changeCodeAtFocus('');\n        focusInput(activeInput - 1);\n      }\n\n      // Clear the input if it's not valid value because firefox allows\n      // pasting non-numeric characters in a number type input\n      event.target.value = '';\n    }\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => (index: number) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  const handleBlur = () => {\n    setActiveInput(activeInput - 1);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const otp = getOTPValue();\n    if ([event.code, event.key].includes('Backspace')) {\n      event.preventDefault();\n      changeCodeAtFocus('');\n      focusInput(activeInput - 1);\n    } else if (event.code === 'Delete') {\n      event.preventDefault();\n      changeCodeAtFocus('');\n    } else if (event.code === 'ArrowLeft') {\n      event.preventDefault();\n      focusInput(activeInput - 1);\n    } else if (event.code === 'ArrowRight') {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    }\n    // React does not trigger onChange when the same value is entered\n    // again. So we need to focus the next input manually in this case.\n    else if (event.key === otp[activeInput]) {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    } else if (\n      event.code === 'Spacebar' ||\n      event.code === 'Space' ||\n      event.code === 'ArrowUp' ||\n      event.code === 'ArrowDown'\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  const focusInput = (index: number) => {\n    const activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n\n    if (inputRefs.current[activeInput]) {\n      inputRefs.current[activeInput]?.focus();\n      inputRefs.current[activeInput]?.select();\n      setActiveInput(activeInput);\n    }\n  };\n\n  const changeCodeAtFocus = (value: string) => {\n    const otp = getOTPValue();\n    otp[activeInput] = value[0];\n    handleOTPChange(otp);\n  };\n\n  const handleOTPChange = (otp: Array<string>) => {\n    const otpValue = otp.join('');\n    onChange(otpValue);\n  };\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    const otp = getOTPValue();\n    let nextActiveInput = activeInput;\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const pastedData = event.clipboardData\n      .getData('text/plain')\n      .slice(0, numInputs - activeInput)\n      .split('');\n\n    // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n    if (isInputNum && pastedData.some((value) => isNaN(Number(value)))) {\n      return;\n    }\n\n    // Paste data from focused input onwards\n    for (let pos = 0; pos < numInputs; ++pos) {\n      if (pos >= activeInput && pastedData.length > 0) {\n        otp[pos] = pastedData.shift() ?? '';\n        nextActiveInput++;\n      }\n    }\n\n    focusInput(nextActiveInput);\n    handleOTPChange(otp);\n  };\n\n  return (\n    <div\n      style={Object.assign({ display: 'flex', alignItems: 'center' }, isStyleObject(containerStyle) && containerStyle)}\n      className={typeof containerStyle === 'string' ? containerStyle : undefined}\n      onPaste={onPaste}\n    >\n      {Array.from({ length: numInputs }, (_, index) => index).map((index) => (\n        <React.Fragment key={index}>\n          {renderInput(\n            {\n              value: getOTPValue()[index] ?? '',\n              placeholder: getPlaceholderValue()?.[index] ?? undefined,\n              ref: (element) => (inputRefs.current[index] = element),\n              onChange: handleChange,\n              onFocus: (event) => handleFocus(event)(index),\n              onBlur: handleBlur,\n              onKeyDown: handleKeyDown,\n              onPaste: handlePaste,\n              autoComplete: 'off',\n              'aria-label': `Please enter OTP character ${index + 1}`,\n              style: Object.assign(\n                !skipDefaultStyles ? ({ width: '1em', textAlign: 'center' } as const) : {},\n                isStyleObject(inputStyle) ? inputStyle : {}\n              ),\n              className: typeof inputStyle === 'string' ? inputStyle : undefined,\n              type: inputType,\n              inputMode: isInputNum ? 'numeric' : 'text',\n              onInput: handleInputChange,\n            },\n            index\n          )}\n          {index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator)}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport type { OTPInputProps, InputProps, AllowedInputTypes };\nexport default OTPInput;\n"],"names":["_ref","isShow","btnLeftLoading","btnRightLoading","btnTextLeft","btnTextRight","toggleForgotPasswordModal","dispatch","useDispatch","forgotPasswordPending","forgotPasswordRes","forgotPasswordError","sendOtpPending","sendOtpRes","sendOtpError","verifyOtpPending","verifyOtpRes","verifyOtpError","useSelector","state","auth","t","useCustomTranslation","otpSent","setOtpSent","useState","buttonOTP","setButtonOTP","otpVerify","setOtpVerify","email","setEmail","otp","setOtp","newPassword","setNewPassword","confirmPassword","setConfirmPassword","passwordShown","setPasswordShown","passwordShown1","setPasswordShown1","minutes","setMinutes","seconds","setSeconds","sendOtpFun","async","data","email_mobile","authActions","sendOtpRequest","useEffect","handleClearAuthStore","code","interval","setInterval","clearInterval","_jsxs","_Fragment","children","_jsx","className","id","style","display","opacity","class","type","onClick","for","onChange","e","target","value","onEmailChange","placeholder","marginLeft","color","paddingTop","paddingBottom","OtpInput","inputStyle","width","height","backgroundClip","border","borderRadius","backgroundColor","isDisabled","length","otp_id","verifyOtpRequest","checkOtp","numInputs","separator","isInputNum","renderInput","props","left","new_password","confirm_password","forgotPasswordRequest","navigate","useNavigate","getMenuRoutesPermissionRes","getMenuRoutesPermissionError","getMenuRoutesPermissionPending","permission","isUserLoginPending","userLoginRes","userLoginResError","showPassword","setShowPassword","isShowForgotPasswordModal","setIsShowForgotPasswordModal","formData","setFormData","password","isOpen","setIsOpen","object","string","required","handleLoginResposnse","token","user","encryptUser","encryptValue","JSON","stringify","setDataOnLocalstorage","employeeActions","employeeDetails","Cookies","set","permissionActions","getMenuRoutesPermissionRequest","role_id","handleFormdata","name","href","src","alt","htmlFor","CustomButton","text","isLoading","classNames","handleClick","params","userLoginRequest","ForgotPasswordModal","isStyleObject","obj","OTPInput","_a","_b","_c","onPaste","_d","shouldAutoFocus","_e","inputType","renderSeparator","containerStyle","_f","skipDefaultStyles","_g","React","activeInput","setActiveInput","inputRefs","getOTPValue","toString","split","current","slice","focus","getPlaceholderValue","console","error","isInputValueValid","isNaN","Number","trim","handleChange","event","changeCodeAtFocus","focusInput","handleInputChange","nativeEvent","some","cellInput","handleOTPChange","preventDefault","handleBlur","handleKeyDown","key","includes","index","Math","max","min","select","otpValue","join","handlePaste","nextActiveInput","pastedData","clipboardData","getData","pos","shift","Object","assign","alignItems","undefined","Array","from","_","map","ref","element","onFocus","handleFocus","onBlur","onKeyDown","autoComplete","concat","textAlign","inputMode","onInput"],"sourceRoot":""}