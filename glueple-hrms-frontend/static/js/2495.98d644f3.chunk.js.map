{"version":3,"file":"static/js/2495.98d644f3.chunk.js","mappings":"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","sources":["components/admin/attendanceLock/AttendanceLockTable.js","components/admin/attendanceLock/CreateUpdateAttendanceLock.js","components/admin/attendanceLock/AttendanceLock.js"],"sourcesContent":["\r\nimport React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomTable } from '../../reuseableComponents'\r\nimport { getBadgeColor } from '../../../utils/common'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment'\r\nimport { useCustomTranslation } from '../../../translation'\r\nimport { Icon } from '../../commanComponent'\r\n\r\nconst AttendanceLockTable = (props) => {\r\n    const {t}=useCustomTranslation()\r\n    const {\r\n        allAttendanceLocks,\r\n        isLoading,\r\n        toggleCreateUpdateAttendanceLockModal,\r\n        handleAttendanceLockDeleteModal,\r\n        currentPage,\r\n        setCurrentPage\r\n    } = props\r\n    const [attendanceLockList, setAttendanceLock] = useState(allAttendanceLocks)\r\n\r\n\r\n    const handleUpdateAttendanceLock = (data) => {\r\n        toggleCreateUpdateAttendanceLockModal(data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setAttendanceLock(allAttendanceLocks)\r\n    }, [allAttendanceLocks])\r\n\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index+1}</span>\r\n        ),\r\n        is_lock: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_lock ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_lock ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n        action: item => (\r\n\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => {\r\n                                handleUpdateAttendanceLock(item);\r\n                            }}\r\n                        >\r\n                            <Icon className={\"bi bi-pencil-square me-1\"} />Update</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n    \r\n        )\r\n    }), [toggleCreateUpdateAttendanceLockModal]);\r\n\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'month', label: 'Month' },\r\n        { key: 'is_lock', label: 'Is Lock' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n    return (\r\n        <>\r\n            <CustomTable\r\n                data={attendanceLockList?.data}\r\n                fields={fields}\r\n                isLoading={isLoading}\r\n                pagination={true}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                totalPages={attendanceLockList?.totalPages}\r\n                tableName={\"Attendance Lock\"}\r\n                // onSearch={handleSearch}\r\n                scopedSlots={scopedSlots}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AttendanceLockTable\r\n","import React, { useEffect, useState } from 'react'\r\nimport { CustomButton, CustomError } from '../../globalComponents'\r\nimport { CustCheckbox, Input, Label } from '../../commanComponent'\r\nimport { validateSchema } from '../../../utils/ValidationHelper'\r\nimport {  addUpdateAttendanceLockSchema } from '../../../utils/ValidationSchema'\r\nimport { useCustomTranslation } from '../../../translation'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst CreateUpdateAttendanceLock = (props) => {\r\n    const { attendanceLockPending, updateAttendanceLockPending } = useSelector(state => state?.attendanceDashboard)\r\n    const {t}=useCustomTranslation()\r\n    const {\r\n        selectedAttendanceLockData,\r\n        openModel,\r\n        handleOpenClose,\r\n        handleCreateUpdateAttendanceLock\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [createUpdateAttendanceLockFormData, setCreateUpdateAttendanceLockFormData] = useState({\r\n        month: '',\r\n        is_lock: true\r\n    })\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e.target ? e.target : { value: e };\r\n\r\n        setCreateUpdateAttendanceLockFormData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n            return updatedState;\r\n        });\r\n\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitCreateUpdateAttendanceLock = async () => {\r\n        const validationResponse = await validateSchema(addUpdateAttendanceLockSchema, createUpdateAttendanceLockFormData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n                month,\r\n                is_lock\r\n            } = createUpdateAttendanceLockFormData\r\n            const params = {\r\n                month,\r\n                is_lock,\r\n                year:\"2025\"\r\n            }\r\n            \r\n            handleCreateUpdateAttendanceLock(params)\r\n            setErrors({})\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(()=>{\r\n        if(selectedAttendanceLockData){\r\n            setCreateUpdateAttendanceLockFormData({\r\n                month: selectedAttendanceLockData?.month,\r\n                is_lock: selectedAttendanceLockData?.is_lock\r\n            })\r\n        }\r\n    },[selectedAttendanceLockData])\r\n\r\n    const resetForm = () => {\r\n        setCreateUpdateAttendanceLockFormData({\r\n            month: '',\r\n            is_lock: true\r\n        })\r\n        setErrors({})\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n                tabIndex={-1}\r\n                style={{\r\n                    visibility: openModel ? 'visible' : 'hidden',\r\n                    width: \"800px\"\r\n                }}\r\n                id=\"interviewDetail\"\r\n            >\r\n                <div className=\"offcanvas-header\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">\r\n                    {selectedAttendanceLockData ? t(\"headings.updateAttendanceLock\"): t(\"headings.createAttendanceLock\")} \r\n                    </h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                        onClick={() => handleOpenClose()}\r\n                    />\r\n                </div>\r\n           \r\n\r\n                <div className=\"offcanvas-body myRequest \">\r\n                    <div className=\"formPanel\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.month/year\")} required={true} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <Input\r\n                                        type=\"month\"\r\n                                        value={createUpdateAttendanceLockFormData?.month}\r\n                                        name=\"month\"\r\n                                        onChange={(e) => handleFromChange(e)}\r\n                                    />\r\n                                    {errors?.month && (\r\n                                        <CustomError text={errors.month} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                      \r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                     <Label  text={t(\"labels.isLock\")} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <CustCheckbox\r\n                                        key={\"is_lock\"}\r\n                                        id={`is_lock`}\r\n                                        checked={createUpdateAttendanceLockFormData?.is_lock}\r\n                                        handleChange={(e) => handleFromChange(e)}\r\n                                        name={\"is_lock\"}\r\n                                    />\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"offcanvas-footer\">\r\n                    <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                        <CustomButton\r\n                            text={selectedAttendanceLockData ? t(\"btns.updateLock\") : t(\"btns.addLock\")}\r\n                            classNames={\"btn btn-org-gradient\"}\r\n                            handleClick={() => submitCreateUpdateAttendanceLock()}\r\n                            isLoading={selectedAttendanceLockData ? updateAttendanceLockPending : attendanceLockPending}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {openModel && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateUpdateAttendanceLock\r\n","import React, { useEffect, useState } from 'react'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { attendanceDashboardActions, } from '../../../core/resource/actions'\r\nimport AttendanceLockTable from './AttendanceLockTable'\r\nimport { pagination } from '../../../utils/Constants.config'\r\nimport { useCustomTranslation } from '../../../translation'\r\nimport CreateUpdateAttendanceLock from './CreateUpdateAttendanceLock'\r\n\r\nconst AttendanceLock = () => {\r\n    const dispatch = useDispatch()\r\n    const { t } = useCustomTranslation();\r\n\r\n    const {\r\n        attendanceLockPending,\r\n        attendanceLockRes,\r\n        attendanceLockError,\r\n\r\n        getAttendanceLockPending,\r\n        getAttendanceLockRes,\r\n        getAttendanceLockError,\r\n\r\n        updateAttendanceLockPending,\r\n        updateAttendanceLockRes,\r\n        updateAttendanceLockError,\r\n    } = useSelector(state => state.attendanceDashboard)\r\n\r\n\r\n    const [isOpenCreateUpdateAttendanceLock, setIsOpenCreateUpdateAttendanceLock] = useState(false)\r\n    const [selectedAttendanceLockData, setSelectedAttendanceLockData] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [allAttendanceLocks, setAllAttendanceLocks] = useState({})\r\n\r\n    /* Create Update AttendanceLock */\r\n    const toggleCreateUpdateAttendanceLockModal = (data) => {\r\n        if (!data) {\r\n            setSelectedAttendanceLockData('')\r\n        } else {\r\n            setSelectedAttendanceLockData(data)\r\n        }\r\n        setIsOpenCreateUpdateAttendanceLock(!isOpenCreateUpdateAttendanceLock)\r\n    }\r\n\r\n    const handleCreateUpdateAttendanceLock = (params) => {\r\n        if (selectedAttendanceLockData) {\r\n            params['_id'] = selectedAttendanceLockData?._id || selectedAttendanceLockData?.id\r\n            dispatch(attendanceDashboardActions.updateAttendanceLockRequest(params));\r\n        }\r\n        else {\r\n            dispatch(attendanceDashboardActions.attendanceLockRequest(params));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!attendanceLockPending) {\r\n            if (attendanceLockError) {\r\n                dispatch(attendanceDashboardActions.handleClearAttendanceDashboardStore(\"HANDLE_CLEAR_ATTENDANCE_LOCK_STORE\"))\r\n                return;\r\n            }\r\n            if (attendanceLockRes) {\r\n                if (attendanceLockRes?.code === 200) {\r\n                    dispatch(attendanceDashboardActions.handleClearAttendanceDashboardStore(\"HANDLE_CLEAR_ATTENDANCE_LOCK_STORE\"))\r\n                    getAllAttendanceLocks()\r\n                    setIsOpenCreateUpdateAttendanceLock(!isOpenCreateUpdateAttendanceLock)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        attendanceLockRes,\r\n        attendanceLockError,\r\n        attendanceLockPending\r\n    ]);\r\n\r\n    useEffect(() => {\r\n        if (!updateAttendanceLockPending) {\r\n            if (updateAttendanceLockError) {\r\n                dispatch(attendanceDashboardActions.handleClearAttendanceDashboardStore(\"HANDLE_CLEAR_UPDATE_ATTENDANCE_LOCK_STORE\"))\r\n                return;\r\n            }\r\n            if (updateAttendanceLockRes) {\r\n                if (updateAttendanceLockRes?.code === 200) {\r\n                    dispatch(attendanceDashboardActions.handleClearAttendanceDashboardStore(\"HANDLE_CLEAR_UPDATE_ATTENDANCE_LOCK_STORE\"))\r\n                    getAllAttendanceLocks()\r\n                    setIsOpenCreateUpdateAttendanceLock(!isOpenCreateUpdateAttendanceLock)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updateAttendanceLockRes,\r\n        updateAttendanceLockError,\r\n        updateAttendanceLockPending\r\n    ]);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        getAllAttendanceLocks()\r\n    }, [currentPage])\r\n\r\n    /* Get All AttendanceLocks Data */\r\n    const getAllAttendanceLocks = () => {\r\n        const params = {\r\n            page: currentPage,\r\n            limit: pagination.limit,\r\n        }\r\n        dispatch(attendanceDashboardActions.getAttendanceLockRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAttendanceLockPending) {\r\n            if (getAttendanceLockError) {\r\n                return;\r\n            }\r\n            if (getAttendanceLockRes) {\r\n                if (getAttendanceLockRes?.code === 200) {\r\n                    const getAttendanceLockData = getAttendanceLockRes?.data\r\n                    setAllAttendanceLocks(getAttendanceLockData)\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAttendanceLockRes,\r\n        getAttendanceLockError,\r\n        getAttendanceLockPending\r\n    ]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"d-flex  justify-content-end \">\r\n                <CustomButton\r\n                    classNames={\"btn btn-primary gradientBg\"}\r\n                    handleClick={() => toggleCreateUpdateAttendanceLockModal()}\r\n                    text={t(\"btns.createNewAttendanceLock\")}\r\n                />\r\n            </div>\r\n\r\n            <AttendanceLockTable\r\n                toggleCreateUpdateAttendanceLockModal={toggleCreateUpdateAttendanceLockModal}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                allAttendanceLocks={allAttendanceLocks}\r\n                isLoading={getAttendanceLockPending}\r\n\r\n            />\r\n\r\n            {isOpenCreateUpdateAttendanceLock && <CreateUpdateAttendanceLock\r\n                openModel={isOpenCreateUpdateAttendanceLock}\r\n                handleOpenClose={toggleCreateUpdateAttendanceLockModal}\r\n                handleCreateUpdateAttendanceLock={handleCreateUpdateAttendanceLock}\r\n                selectedAttendanceLockData={selectedAttendanceLockData}\r\n            />}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AttendanceLock\r\n\r\n"],"names":["props","t","useCustomTranslation","allAttendanceLocks","isLoading","toggleCreateUpdateAttendanceLockModal","handleAttendanceLockDeleteModal","currentPage","setCurrentPage","attendanceLockList","setAttendanceLock","useState","useEffect","scopedSlots","useMemo","sn","_","index","_jsx","children","is_lock","item","className","getBadgeColor","created_at","moment","format","action","_jsxs","type","onClick","Icon","_Fragment","CustomTable","data","fields","key","label","pagination","totalPages","tableName","attendanceLockPending","updateAttendanceLockPending","useSelector","state","attendanceDashboard","selectedAttendanceLockData","openModel","handleOpenClose","handleCreateUpdateAttendanceLock","errors","setErrors","createUpdateAttendanceLockFormData","setCreateUpdateAttendanceLockFormData","month","handleFromChange","e","fieldName","_e$target","name","target","value","checked","prevState","prevErrors","undefined","resetForm","tabIndex","style","visibility","width","id","Label","text","required","Input","onChange","CustomError","CustCheckbox","handleChange","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","addUpdateAttendanceLockSchema","isValid","year","submitCreateUpdateAttendanceLock","AttendanceLock","dispatch","useDispatch","attendanceLockRes","attendanceLockError","getAttendanceLockPending","getAttendanceLockRes","getAttendanceLockError","updateAttendanceLockRes","updateAttendanceLockError","isOpenCreateUpdateAttendanceLock","setIsOpenCreateUpdateAttendanceLock","setSelectedAttendanceLockData","setAllAttendanceLocks","attendanceDashboardActions","handleClearAttendanceDashboardStore","code","getAllAttendanceLocks","params","page","limit","getAttendanceLockRequest","getAttendanceLockData","AttendanceLockTable","CreateUpdateAttendanceLock","_id","updateAttendanceLockRequest","attendanceLockRequest"],"sourceRoot":""}