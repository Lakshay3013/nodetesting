{"version":3,"file":"static/js/2282.9580e6da.chunk.js","mappings":"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","sources":["components/admin/trainingCertificate/TrainingCertificatesTable.js","components/admin/trainingCertificate/CreateUpdatetrainingCertificate.js","components/admin/trainingCertificate/TrainingCertificate.js"],"sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomTable } from '../../reuseableComponents'\r\nimport { getBadgeColor } from '../../../utils/common'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment'\r\nimport { useCustomTranslation } from '../../../translation'\r\nimport { Icon } from '../../commanComponent'\r\n\r\nconst TrainingCertificatesTable = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        isLoading,\r\n        setSelectedTrainingCertificateData,\r\n        handleCreateUpdateTrainingCertificateModal,\r\n        handleTrainingCertificateDeleteModal,\r\n        currentPage,\r\n        setCurrentPage,\r\n        allTrainingCertificates\r\n    } = props\r\n    const [trainingCertificateList, setTrainingCertificateList] = useState('')\r\n\r\n\r\n    const handleUpdateTrainingCertificate = (data) => {\r\n        handleCreateUpdateTrainingCertificateModal(data)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTrainingCertificateList(allTrainingCertificates)\r\n    }, [allTrainingCertificates])\r\n\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n        action: item => (\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleUpdateTrainingCertificate(item)}\r\n                        >\r\n                            <Icon className={\"bi bi-pencil-square me-1\"} />Update</span>\r\n                    </li>\r\n                    <li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleTrainingCertificateDeleteModal(item.id)}\r\n                        >\r\n                            <Icon className={\"bi bi-trash me-1\"} />Delete</span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n\r\n        )\r\n    }), [setSelectedTrainingCertificateData, handleCreateUpdateTrainingCertificateModal]);\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'name', label: 'Training Certificates Name' },\r\n        { key: 'short_name', label: 'Short Name' },\r\n        { key: 'is_active', label: 'Status' },\r\n        { key: 'created_at', label: 'Created At' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n    return (\r\n        <>\r\n            <CustomTable\r\n                data={trainingCertificateList?.data}\r\n                fields={fields}\r\n                isLoading={isLoading}\r\n                pagination={true}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                totalPages={trainingCertificateList?.totalPages}\r\n                tableName={t(\"headings.trainingCertificates\")}\r\n                // onSearch={handleSearch}\r\n                scopedSlots={scopedSlots}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TrainingCertificatesTable\r\n","import React, { useEffect, useState } from 'react'\r\nimport { CustomButton, CustomError } from '../../globalComponents'\r\nimport { createShortName } from '../../../utils/common'\r\nimport { CustCheckbox, Input, Label } from '../../commanComponent'\r\nimport { validateSchema } from '../../../utils/ValidationHelper'\r\nimport { addUpdateTrainingCertificateSchema } from '../../../utils/ValidationSchema'\r\nimport { useSelector } from 'react-redux'\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst CreateUpdatetrainingCertificate = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const { addTrainingCertificatePending, updateTrainingCertificatePending } = useSelector(state => state?.trainingCertificate)\r\n    const {\r\n        selectedTrainingCertificateData,\r\n        openModel,\r\n        handleOpenClose,\r\n        handleCreateUpdateTrainingCertificate,\r\n    } = props\r\n    const [errors, setErrors] = useState({})\r\n    const [createUpdateTrainingCertificatesFormData, setCreateUpdateTrainingCertificatesFormData] = useState({\r\n        name: '',\r\n        short_name: '',\r\n        is_active: true\r\n    })\r\n\r\n    const handleFromChange = (e, fieldName) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value, type, checked } = e?.target ? e.target : { value: e };\r\n\r\n        setCreateUpdateTrainingCertificatesFormData(prevState => {\r\n            const updatedState = {\r\n                ...prevState,\r\n                [name]: type === 'checkbox' ? checked : value,\r\n            };\r\n            if (name === 'name') {\r\n                updatedState.short_name = createShortName(value);\r\n            }\r\n            return updatedState;\r\n        });\r\n\r\n        // Reset error for this field\r\n        setErrors(prevErrors => ({\r\n            ...prevErrors,\r\n            [name]: undefined,\r\n        }));\r\n    };\r\n\r\n    const submitCreateUpdateTrainingCertificate = async () => {\r\n        const validationResponse = await validateSchema(addUpdateTrainingCertificateSchema, createUpdateTrainingCertificatesFormData);\r\n        if (validationResponse.isValid) {\r\n            const {\r\n                name,\r\n                short_name,\r\n                is_active,\r\n            } = createUpdateTrainingCertificatesFormData\r\n            const params = {\r\n                name,\r\n                short_name,\r\n                is_active,\r\n\r\n            }\r\n            setErrors({})\r\n            handleCreateUpdateTrainingCertificate(params)\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return (() => {\r\n            resetForm()\r\n        })\r\n    }, [openModel])\r\n\r\n    useEffect(() => {\r\n        if (selectedTrainingCertificateData) {\r\n            setCreateUpdateTrainingCertificatesFormData({\r\n                name: selectedTrainingCertificateData?.name,\r\n                short_name: selectedTrainingCertificateData?.short_name,\r\n                is_active: selectedTrainingCertificateData?.is_active\r\n            })\r\n        }\r\n    }, [selectedTrainingCertificateData])\r\n\r\n    const resetForm = () => {\r\n        setCreateUpdateTrainingCertificatesFormData({\r\n            is_active: true,\r\n            name: '',\r\n            short_name: '',\r\n        })\r\n        setErrors({})\r\n    }\r\n    return (\r\n        <>\r\n        <div className={`offcanvas offcanvas-end  ${openModel ? 'show' : ''}`}\r\n            tabIndex={-1}\r\n            style={{\r\n                visibility: openModel ? 'visible' : 'hidden',\r\n                width: \"800px\"\r\n            }}\r\n            id=\"interviewDetail\"\r\n        >\r\n            <div className=\"offcanvas-header\">\r\n                <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{selectedTrainingCertificateData ? \"Update\" : \"Add\"} Training Certificates</h5>\r\n                <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                    onClick={() => handleOpenClose()}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"offcanvas-body myRequest \">\r\n                <div className=\"formPanel\">\r\n                    <div className=\"row\">\r\n\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.trainingCertificatesName\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    placeholder={t(\"placeholders.trainingCertificatesName\")}\r\n                                    value={createUpdateTrainingCertificatesFormData?.name}\r\n                                    name=\"name\"\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                                {errors?.name && (\r\n                                    <CustomError text={errors.name} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.shortName\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <input type=\"text\" className=\"form-control fs-7\"\r\n                                    name='short_name'\r\n                                    placeholder={t(\"placeholders.shortName\")}\r\n                                    value={createUpdateTrainingCertificatesFormData?.short_name}\r\n                                    onChange={(e) => handleFromChange(e)}\r\n                                />\r\n                                {errors?.short_name && (\r\n                                    <CustomError text={errors.short_name} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-3\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <Label text={t(\"labels.isActive\")} required={true} />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-9\">\r\n                            <div className=\"form-group mb-3\">\r\n                                <CustCheckbox\r\n                                    key={\"is_active\"}\r\n                                    id={`is_active`}\r\n                                    // label={\"Active\"}\r\n                                    checked={createUpdateTrainingCertificatesFormData?.is_active}\r\n                                    handleChange={(e) => handleFromChange(e)}\r\n                                    name={\"is_active\"}\r\n                                />\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </div>\r\n            <div className=\"offcanvas-footer\">\r\n                <div className=\"d-flex align-items-center justify-content-end gap-3\">\r\n                    <CustomButton\r\n                        text={selectedTrainingCertificateData ? t(\"btns.update\") : t(\"btns.submit\")}\r\n                        classNames={\"btn btn-org-gradient\"}\r\n                        handleClick={() => submitCreateUpdateTrainingCertificate()}\r\n                        isLoading={selectedTrainingCertificateData ? updateTrainingCertificatePending : addTrainingCertificatePending}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {openModel && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateUpdatetrainingCertificate\r\n","import React, { useEffect, useState } from 'react'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { trainingCertificatesActions } from '../../../core/resource/actions'\r\nimport { pagination } from '../../../utils/Constants.config'\r\nimport TrainingCertificatesTable from './TrainingCertificatesTable'\r\nimport CreateUpdatetrainingCertificate from './CreateUpdatetrainingCertificate'\r\nimport ApproveRejectModal from '../../modal/ApproveRejectModal'\r\nimport { useCustomTranslation } from '../../../translation'\r\n\r\nconst TrainingCertificate = () => {\r\n    const {t}=useCustomTranslation()\r\n    const dispatch = useDispatch()\r\n    const {\r\n        addTrainingCertificatePending,\r\n        addTrainingCertificateRes,\r\n        addTrainingCertificateError,\r\n\r\n        updateTrainingCertificatePending,\r\n        updateTrainingCertificateRes,\r\n        updateTrainingCertificateError,\r\n\r\n        deleteTrainingCertificatePending,\r\n        deleteTrainingCertificateRes,\r\n        deleteTrainingCertificateError,\r\n\r\n        getAllTrainingCertificatesPending,\r\n        getAllTrainingCertificatesRes,\r\n        getAllTrainingCertificatesError,\r\n\r\n    } = useSelector(state => state.trainingCertificate)\r\n\r\n    const [isOpenCreateUpdateTrainingCertificate, setIsOpenCreateUpdateTrainingCertificate] = useState(false)\r\n    const [selectedTrainingCertificateData, setSelectedTrainingCertificateData] = useState('')\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [isShowDeleteTrainingCertificateModal, setIsShowDeleteTrainingCertificateModal] = useState(false)\r\n    const [deleteTrainingCertificateId, setDeleteTrainingCertificateId] = useState('')\r\n    const [allTrainingCertificates, setAllTrainingCertificates] = useState('')\r\n\r\n    // Create Update TrainingCertificate.... \r\n    const handleCreateUpdateTrainingCertificateModal = (data) => {\r\n        if(!data){\r\n            setSelectedTrainingCertificateData('')\r\n        }else{\r\n            setSelectedTrainingCertificateData(data)\r\n        }\r\n        setIsOpenCreateUpdateTrainingCertificate(!isOpenCreateUpdateTrainingCertificate)\r\n    }\r\n\r\n    const handleCreateUpdateTrainingCertificate = (params) => {\r\n        if (selectedTrainingCertificateData) {\r\n            params['_id'] = selectedTrainingCertificateData?.id\r\n            dispatch(trainingCertificatesActions.updateTrainingCertificateRequest(params));\r\n        }\r\n        else {\r\n            dispatch(trainingCertificatesActions.addTrainingCertificateRequest(params));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!addTrainingCertificatePending) {\r\n            if (addTrainingCertificateError) {\r\n                dispatch(trainingCertificatesActions.handleClearTrainingCertificateStore(\"HANDLE_CLEAR_ADD_TRAINING_CERTIFICATE_STORE\"))\r\n                return;\r\n            }\r\n            if (addTrainingCertificateRes) {\r\n                if (addTrainingCertificateRes?.code === 200) {\r\n                    dispatch(trainingCertificatesActions.handleClearTrainingCertificateStore(\"HANDLE_CLEAR_ADD_TRAINING_CERTIFICATE_STORE\"))\r\n                    getAllTrainingCertificates()\r\n                    setIsOpenCreateUpdateTrainingCertificate(!isOpenCreateUpdateTrainingCertificate)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        addTrainingCertificateRes,\r\n        addTrainingCertificateError,\r\n        addTrainingCertificatePending\r\n    ]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!updateTrainingCertificatePending) {\r\n            if (updateTrainingCertificateError) {\r\n                dispatch(trainingCertificatesActions.handleClearTrainingCertificateStore(\"HANDLE_CLEAR_UPDATE_TRAINING_CERTIFICATE_STORE\"))\r\n                return;\r\n            }\r\n            if (updateTrainingCertificateRes) {\r\n                if (updateTrainingCertificateRes?.code === 200) {\r\n                    dispatch(trainingCertificatesActions.handleClearTrainingCertificateStore(\"HANDLE_CLEAR_UPDATE_TRAINING_CERTIFICATE_STORE\"))\r\n                    getAllTrainingCertificates()\r\n                    setIsOpenCreateUpdateTrainingCertificate(!isOpenCreateUpdateTrainingCertificate)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updateTrainingCertificateRes,\r\n        updateTrainingCertificateError,\r\n        updateTrainingCertificatePending\r\n    ]);\r\n\r\n    //GET ALL TrainingCertificates DATA\r\n    useEffect(() => {\r\n        getAllTrainingCertificates()\r\n    }, [currentPage])\r\n\r\n    const getAllTrainingCertificates = () => {\r\n        const params = {\r\n            page: currentPage,\r\n            limit: pagination.limit,\r\n        }\r\n        dispatch(trainingCertificatesActions.getAllTrainingCertificatesRequest(params));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAllTrainingCertificatesPending) {\r\n            if (getAllTrainingCertificatesError) {\r\n                return;\r\n            }\r\n            if (getAllTrainingCertificatesRes) {\r\n                if (getAllTrainingCertificatesRes?.code === 200) {\r\n                    setAllTrainingCertificates(getAllTrainingCertificatesRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAllTrainingCertificatesRes,\r\n        getAllTrainingCertificatesError,\r\n        getAllTrainingCertificatesPending\r\n    ]);\r\n\r\n\r\n\r\n    // DELETE TrainingCertificate ............ \r\n    const handleTrainingCertificateDeleteModal = (id) => {\r\n        setDeleteTrainingCertificateId(id)\r\n        setIsShowDeleteTrainingCertificateModal(!isShowDeleteTrainingCertificateModal)\r\n    }\r\n\r\n    const handleDeleteTrainingCertificate = (type) => {\r\n        if (type) {\r\n            const params = {\r\n                _id: deleteTrainingCertificateId\r\n            }\r\n            dispatch(trainingCertificatesActions?.deleteTrainingCertificateRequest(params))\r\n\r\n        } else {\r\n            setIsShowDeleteTrainingCertificateModal(!isShowDeleteTrainingCertificateModal)\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!deleteTrainingCertificatePending) {\r\n            if (deleteTrainingCertificateError) {\r\n                dispatch(trainingCertificatesActions.handleClearTrainingCertificateStore(\"HANDLE_CLEAR_DELETE_TRAINING_CERTIFICATE_STORE\"))\r\n                return;\r\n            }\r\n            if (deleteTrainingCertificateRes) {\r\n                if (deleteTrainingCertificateRes?.code === 200) {\r\n                    setIsShowDeleteTrainingCertificateModal(!isShowDeleteTrainingCertificateModal)\r\n                    if(currentPage >1 && allTrainingCertificates?.data?.length===1){\r\n                        setCurrentPage((pre=> pre -= 1 ))\r\n                    }else{\r\n                        getAllTrainingCertificates()\r\n                    }\r\n                    dispatch(trainingCertificatesActions.handleClearTrainingCertificateStore(\"HANDLE_CLEAR_DELETE_TRAINING_CERTIFICATE_STORE\"))\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        deleteTrainingCertificateRes,\r\n        deleteTrainingCertificateError,\r\n        deleteTrainingCertificatePending\r\n    ]);\r\n    return (\r\n        <>\r\n            <div className=\"d-flex  justify-content-end \">\r\n                <CustomButton\r\n                    classNames={\"btn btn-primary gradientBg\"}\r\n                    handleClick={() => handleCreateUpdateTrainingCertificateModal()}\r\n                    text={t(\"btns.createTrainingCertificate\")}\r\n                />\r\n            </div>\r\n            <CreateUpdatetrainingCertificate\r\n                openModel={isOpenCreateUpdateTrainingCertificate}\r\n                handleOpenClose={handleCreateUpdateTrainingCertificateModal}\r\n                handleCreateUpdateTrainingCertificate={handleCreateUpdateTrainingCertificate}\r\n                selectedTrainingCertificateData={selectedTrainingCertificateData}\r\n            />\r\n            <TrainingCertificatesTable\r\n                setSelectedTrainingCertificateData={setSelectedTrainingCertificateData}\r\n                handleCreateUpdateTrainingCertificateModal={handleCreateUpdateTrainingCertificateModal}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                handleTrainingCertificateDeleteModal={handleTrainingCertificateDeleteModal}\r\n                allTrainingCertificates={allTrainingCertificates}\r\n            />\r\n\r\n            {isShowDeleteTrainingCertificateModal && (\r\n                <ApproveRejectModal\r\n                    onApproveReject={handleDeleteTrainingCertificate}\r\n                    isShow={isShowDeleteTrainingCertificateModal}\r\n                    desc={t(\"alerts.deletePopup.desc\").replace('$1',\"Training Certificate\")}\r\n                    btnRightLoading={deleteTrainingCertificatePending}\r\n                    btnTextRight={t(\"btns.delete\")}\r\n                    btnTextLeft={t(\"btns.cancel\")}\r\n\r\n                />)\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TrainingCertificate\r\n"],"names":["props","t","useCustomTranslation","isLoading","setSelectedTrainingCertificateData","handleCreateUpdateTrainingCertificateModal","handleTrainingCertificateDeleteModal","currentPage","setCurrentPage","allTrainingCertificates","trainingCertificateList","setTrainingCertificateList","useState","useEffect","scopedSlots","useMemo","sn","_","index","_jsx","children","is_active","item","className","getBadgeColor","created_at","moment","format","action","_jsxs","type","onClick","Icon","id","_Fragment","CustomTable","data","fields","key","label","pagination","totalPages","tableName","addTrainingCertificatePending","updateTrainingCertificatePending","useSelector","state","trainingCertificate","selectedTrainingCertificateData","openModel","handleOpenClose","handleCreateUpdateTrainingCertificate","errors","setErrors","createUpdateTrainingCertificatesFormData","setCreateUpdateTrainingCertificatesFormData","name","short_name","handleFromChange","e","fieldName","_e$target","target","value","checked","prevState","updatedState","createShortName","prevErrors","undefined","resetForm","tabIndex","style","visibility","width","Label","text","required","Input","placeholder","onChange","CustomError","CustCheckbox","handleChange","CustomButton","classNames","handleClick","async","validationResponse","validateSchema","addUpdateTrainingCertificateSchema","isValid","params","submitCreateUpdateTrainingCertificate","TrainingCertificate","dispatch","useDispatch","addTrainingCertificateRes","addTrainingCertificateError","updateTrainingCertificateRes","updateTrainingCertificateError","deleteTrainingCertificatePending","deleteTrainingCertificateRes","deleteTrainingCertificateError","getAllTrainingCertificatesPending","getAllTrainingCertificatesRes","getAllTrainingCertificatesError","isOpenCreateUpdateTrainingCertificate","setIsOpenCreateUpdateTrainingCertificate","isShowDeleteTrainingCertificateModal","setIsShowDeleteTrainingCertificateModal","deleteTrainingCertificateId","setDeleteTrainingCertificateId","setAllTrainingCertificates","trainingCertificatesActions","handleClearTrainingCertificateStore","code","getAllTrainingCertificates","page","limit","getAllTrainingCertificatesRequest","_allTrainingCertifica","length","pre","CreateUpdatetrainingCertificate","updateTrainingCertificateRequest","addTrainingCertificateRequest","TrainingCertificatesTable","ApproveRejectModal","onApproveReject","_id","deleteTrainingCertificateRequest","isShow","desc","replace","btnRightLoading","btnTextRight","btnTextLeft"],"sourceRoot":""}