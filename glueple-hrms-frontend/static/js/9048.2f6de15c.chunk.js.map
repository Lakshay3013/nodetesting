{"version":3,"file":"static/js/9048.2f6de15c.chunk.js","mappings":"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","sources":["components/modal/ApproveRejectModal.js","components/payrollAdmin/payRuns/attendanceTracking/EmployeeAttendanceFilters.js","components/payrollAdmin/payRuns/attendanceTracking/EmpAttendanceTable.js","components/payrollAdmin/payRuns/attendanceTracking/EmployeeAttendanceTracking.js"],"sourcesContent":["import React from 'react'\r\nimport Lottieplayer from '../commanComponent/Lottieplayer'\r\nimport backup from '../../../src/images/Backup.json'\r\nimport { CustomButton } from '../globalComponents'\r\nimport PropTypes from 'prop-types'\r\nimport { useCustomTranslation } from '../../translation'\r\n\r\n/**\r\n * ApproveRejectModal component.\r\n * @param {string} [title=\"Are You Sure?\"] - Title of the modal (optional, defaults to \"Are You Sure?\")\r\n * @param {string} [desc] - Description text (optional).\r\n * @param {function} onApproveReject - Callback function for handling approve/reject actions (required).\r\n * @param {boolean} isShow - Boolean flag to show or hide the modal (required).\r\n * @param {boolean} [btnRightLoading=false] - Boolean flag to show loading state for the right button (optional).\r\n * @param {string} [btnTextLeft=\"Cancel\"] - Custom text for the left button (optional).\r\n * @param {string} [btnTextRight=\"Confirm\"] - Custom text for the right button (optional).\r\n * @returns {void}\r\n */\r\nconst ApproveRejectModal = (\r\n  {  \r\n    title ,               \r\n    desc = \"\",                           \r\n    onApproveReject,                      \r\n    isShow,                               \r\n    btnLeftLoading = false,               \r\n    btnRightLoading = false,              \r\n    btnTextLeft ,               \r\n    btnTextRight     \r\n}\r\n) => {\r\n    const {t} =useCustomTranslation()\r\n    return (\r\n        <>\r\n            <div className=\"modal fade attendanceViewodal\" id=\"sureMdl\" style={{ display: isShow ? \"unset !important\" : \"none !important\", opacity: isShow ? \"unset\" : \"0\" }}>\r\n                <div className=\"modal-dialog modal-dialog-centered\">\r\n                    <div className=\"modal-content rounded-1 border-0\">\r\n                        <div className=\"modal-body \">\r\n                            <div className=\"text-center suremodalCon\">\r\n                                <div className=\"d-flex justify-content-center\">\r\n                                    <Lottieplayer lottieUrl={backup} Lottiestyle={{ width: \"90px\", height: \"90px\" }} />\r\n                                </div>\r\n                                <h6 className=\"fw-semibold mb-2\">{title?title:t(\"alerts.deletePopup.title\")}</h6>\r\n                                <p className=\"mb-5 px-4 text-center\">{desc ? desc : \"\"}\r\n                                </p>\r\n                                <div className=\"d-flex justify-content-center gap-3\">\r\n                                    <CustomButton\r\n                                        classNames={\"btn btn-danger\"}\r\n                                        isLoading={btnLeftLoading}\r\n                                        text={btnTextLeft?btnTextLeft:t(\"btns.reject\") }\r\n                                        handleClick={() => onApproveReject(false)}\r\n                                    />\r\n                                    <CustomButton\r\n                                        classNames={\"btn btn-success\"}\r\n                                        isLoading={btnRightLoading}\r\n                                        text={btnTextRight?btnTextRight:t(\"btns.confirm\")}\r\n                                        handleClick={() => onApproveReject(true)}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {isShow && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n// Add PropTypes validation\r\nApproveRejectModal.propTypes = {\r\n    title: PropTypes.string,                     \r\n    desc: PropTypes.string,                       \r\n    onApproveReject: PropTypes.func.isRequired,   \r\n    isShow: PropTypes.bool.isRequired,            \r\n    btnRightLoading: PropTypes.bool,                         \r\n    btnTextLeft: PropTypes.string,                \r\n    btnTextRight: PropTypes.string,   \r\n};\r\n\r\nexport default ApproveRejectModal\r\n","import React, { useState } from 'react'\r\nimport {Label } from '../../../commanComponent'\r\nimport CustomSelect from '../../../commanComponent/CustomSelect'\r\nimport { CustomDateRangePicker } from '../../../globalComponents'\r\nimport { useCustomTranslation } from '../../../../translation'\r\n\r\nconst EmployeeAttendanceFilters = (props) => {\r\n    const { t } = useCustomTranslation()\r\n    const {\r\n        attendanceType,\r\n        setAttendanceType,\r\n        startDate,\r\n        endDate,\r\n        handleDateRangeChange,\r\n        allLeaveConstantData,\r\n    } = props\r\n\r\n    return (\r\n        <>\r\n            <div className=\"formPanel cardBox w-100\">\r\n                <div className=\"row\">\r\n\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"form-group mb-2\">\r\n                            <Label text={t(\"labels.date\")} />\r\n                            <div className=\"selectDate \">\r\n                                <CustomDateRangePicker\r\n                                    onDateRangeChange={(dateRange) => handleDateRangeChange(dateRange)}\r\n                                    endDefaultDate={endDate}\r\n                                    startDefaultDate={startDate}\r\n                                    // maxDisableDates={endDate}\r\n                                    maxDisableDates={endDate}\r\n                                    minDisableDates={startDate}\r\n                                />\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-4\">\r\n                        <div className=\"form-group mb-2\">\r\n                            <Label text={t(\"labels.attendanceType\")} />\r\n                            <CustomSelect\r\n                                data={allLeaveConstantData?.[\"attendanceTrackingType\"]}\r\n                                placeholder={t(\"placeholders.attendanceType\")}\r\n                                value={attendanceType || ''}\r\n                                handleChange={(selectedOption) => setAttendanceType(selectedOption)}\r\n\r\n\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    {/* <div className=\"col-md-4\">\r\n                        <div className=\"form-group mb-2\">\r\n                            <Label text={t(\"labels.employees\")} />\r\n                            <CustomSelect\r\n                                data={allEmployeeList}\r\n                                placeholder={t(\"placeholders.employees\")}\r\n                                value={filterFormData?.employees || ''}\r\n                                handleChange={(selectedOption) => handleFilterFormData(selectedOption, \"employees\")}\r\n                                name=\"employees\"\r\n                                isMulti={true}\r\n                                selectAllText={t(\"labels.selectAll\")}\r\n                            />\r\n\r\n                        </div>\r\n                    </div> */}\r\n                </div>\r\n                {/* <div className='d-flex justify-content-end'>\r\n\r\n                    <CustomButton\r\n                        classNames={\"btn btn-primary gradientBg\"}\r\n                        // handleClick={() => handleFilterEmployees()}\r\n                        text={t(\"btns.filter\")}\r\n                    />\r\n                </div> */}\r\n\r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EmployeeAttendanceFilters\r\n","import React, { useMemo } from 'react'\r\nimport { CustomTable } from '../../../reuseableComponents';\r\nimport { checkAttendanceStatus, dateFormate, } from '../../../../utils/common';\r\nimport CustomSelect from '../../../commanComponent/CustomSelect';\r\nimport { Input } from '../../../commanComponent';\r\nimport moment from 'moment';\r\nimport { convertToTS } from '../../../../utils/AppHelper';\r\nimport { CustomButton } from '../../../globalComponents';\r\n\r\nconst EmpAttendanceTable = (props) => {\r\n    const { allLeaveConstantData, currentPage, setCurrentPage, attendanceStatusData, attendanceType, handleChangeStatus, handlePunchInOut } = props\r\n    const employeeField = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'attendance_date', label: 'Attendance Date' },\r\n        { key: 'first_half_status', label: 'First Half Status' },\r\n        { key: 'second_half_status', label: 'Second Half Status' },\r\n        // { key: 'attendance_status', label: 'Attendance Status' },\r\n        { key: 'action', label: 'Action' }\r\n    ];\r\n\r\n    const employeeScopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index + 1}</span>\r\n        ),\r\n        attendance_date: (item, index) => (\r\n            <span >{dateFormate(item?.attendance_date)}</span>\r\n        ),\r\n        first_half_status: (item) => (\r\n            <span className={`font-weight-bold ${checkAttendanceStatus(item?.first_half_status)}`}\r\n            >{item?.first_half_status}</span>\r\n        ),\r\n        second_half_status: (item) => (\r\n            <span className={checkAttendanceStatus(item?.second_half_status)}\r\n            >{item?.second_half_status}</span>\r\n        ),\r\n\r\n\r\n        action: item => (<>\r\n            {attendanceType?.value === \"punchInTime_punchOutTime\" ? <span className='d-flex gap-1'>\r\n                <Input\r\n                    type=\"time\"\r\n                    value={moment(item?.first_check_in_time, \"YYYY-MM-DD HH:mm:ss\").format(\"HH:mm:ss\")}\r\n                    name=\"first_check_in_time\"\r\n                    onChange={(e) => handlePunchInOut(e,\"\", item)}\r\n                    // min=\"00:00:00\"\r\n                    step=\"2\"\r\n                />\r\n                <Input\r\n                    type=\"time\"\r\n                    value={moment(item?.last_check_out_time, \"YYYY-MM-DD HH:mm:ss\").format(\"HH:mm:ss\")}\r\n                    name=\"last_check_out_time\"\r\n                    onChange={(e) => handlePunchInOut(e,\"\", item)}\r\n                    step=\"2\"\r\n                />\r\n                <div\r\n                    className=\"actionGroup \"\r\n                    onClick={() => handleChangeStatus( \"punchInTime_punchOutTime\",item )}>\r\n                    <img\r\n                        src=\"/images/approveIcon.svg\"\r\n                        alt=\"Approve Icon\"\r\n                        className='mt-1'\r\n                        width={70}\r\n                    />\r\n                </div>\r\n            </span> : <span className='d-flex gap-2'>\r\n                <div className='w-50'>\r\n                <CustomSelect\r\n                    data={allLeaveConstantData?.[\"presentStatus\"]}\r\n                    value={{ label: item?.attendance_status, value: item?.attendance_status } || ''}\r\n                    handleChange={(selectedOption) => handlePunchInOut(selectedOption,\"attendance_status\",item)}\r\n                />\r\n                </div>\r\n                <div\r\n                    className=\"actionGroup \"\r\n                    onClick={() => handleChangeStatus( \"present_absent\",item )}>\r\n                    <img\r\n                        src=\"/images/approveIcon.svg\"\r\n                        alt=\"Approve Icon\"\r\n                        className='mt-1'\r\n                        width={30}\r\n                    />\r\n                </div>\r\n            </span>}\r\n        </>\r\n        )\r\n    }), [attendanceStatusData, currentPage, attendanceType]);\r\n    return (\r\n        <>\r\n            <CustomTable\r\n                data={attendanceStatusData}\r\n                fields={employeeField}\r\n                // isLoading={isLoading}\r\n                pagination={true}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                totalPages={attendanceStatusData?.totalPages}\r\n                // tableName={\"\"}\r\n                // onSearch={handleSearch}\r\n                isHeader={false}\r\n                tableStyle={{ padding: \"0px\", boxShadow: \"none\" }}\r\n                scopedSlots={employeeScopedSlots}\r\n            />\r\n            \r\n        </>\r\n    )\r\n}\r\n\r\nexport default EmpAttendanceTable\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport {  leaveAction, payrollActions } from '../../../../core/resource/actions';\r\nimport EmployeeAttendanceFilters from './EmployeeAttendanceFilters';\r\nimport moment from 'moment';\r\nimport EmpAttendanceTable from './EmpAttendanceTable';\r\nimport { CustomButton } from '../../../globalComponents';\r\nimport ApproveRejectModal from '../../../modal/ApproveRejectModal';\r\nimport { useCustomTranslation } from '../../../../translation';\r\n\r\nconst EmployeeAttendanceTracking = () => {\r\n    const navigate = useNavigate()\r\n    const { t } = useCustomTranslation()\r\n    const { id, monthYear } = useParams();\r\n    const dispatch = useDispatch()\r\n    const [attendanceStatusData, setAttendanceStatusData] = useState([])\r\n    const [startDate, setStartDate] = useState();\r\n    const [endDate, setEndDate] = useState()\r\n    const [attendanceType, setAttendanceType] = useState({})\r\n    const [allLeaveConstantData, setAllLeaveConstantData] = useState([])\r\n    const [updateAttendanceStatusPayload, setUpdateAttendanceStatusPayload] = useState('')\r\n    const [isShowChangeStatusModal, setIsShowChangeStatusModal] = useState(false)\r\n    // const [minDate,setMinDate]=(moment()\r\n    // const [maxDate,setMaxDate]=()\r\n    const {\r\n        getAttendanceStatusPending,\r\n        getAttendanceStatusRes,\r\n        getAttendanceStatusError,\r\n\r\n        updateAttendanceTrackingPending,\r\n        updateAttendanceTrackingRes,\r\n        updateAttendanceTrackingError,\r\n\r\n        selectedEmployeeData,\r\n\r\n    } = useSelector(state => state.payroll)\r\n\r\n    const {\r\n\r\n        getLeaveConstantDataPending,\r\n        getLeaveConstantDataRes,\r\n        getLeaveConstantDataError,\r\n\r\n    } = useSelector(state => state.leave);\r\n\r\n    useEffect(() => {\r\n        getAttendanceStatus()\r\n        getLeaveConstantData()\r\n    }, [id])\r\n\r\n    useEffect(()=>{\r\n        setStartDate(moment(monthYear, \"YYYY-MM\").startOf(\"month\").format(\"YYYY-MM-DD\"))\r\n        setEndDate(moment(monthYear, \"YYYY-MM\").endOf(\"month\").format(\"YYYY-MM-DD\"))\r\n    },[monthYear])\r\n\r\n    /* Get Attendance Status  */\r\n    const getAttendanceStatus = (filterStartDate, filterEndDate) => {\r\n        const payload = {\r\n            emp_id: id || '',\r\n            start_date: filterStartDate && moment(filterStartDate).format('YYYY-MM-DD') || startDate,\r\n            end_date: filterEndDate && moment(filterEndDate).format('YYYY-MM-DD') || endDate\r\n\r\n        }\r\n        dispatch(payrollActions.getAttendanceStatusRequest(payload));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getAttendanceStatusPending) {\r\n            if (getAttendanceStatusError) {\r\n                return;\r\n            }\r\n            if (getAttendanceStatusRes) {\r\n                if (getAttendanceStatusRes?.code === 200) {\r\n                    setAttendanceStatusData(getAttendanceStatusRes?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getAttendanceStatusRes,\r\n        getAttendanceStatusError,\r\n        getAttendanceStatusPending\r\n    ]);\r\n\r\n    /* Get Leave Constant Data */\r\n    const getLeaveConstantData = () => {\r\n        dispatch(leaveAction.getLeaveConstantDataRequest());\r\n    }\r\n    useEffect(() => {\r\n        if (!getLeaveConstantDataPending) {\r\n            if (getLeaveConstantDataError) {\r\n                return;\r\n            }\r\n            if (getLeaveConstantDataRes) {\r\n                if (getLeaveConstantDataRes?.code === 200) {\r\n                    const getLeaveConstantData = getLeaveConstantDataRes?.data\r\n                    setAllLeaveConstantData(getLeaveConstantData)\r\n                    if (Object.keys(getLeaveConstantData).includes(\"attendanceTrackingType\")) {\r\n                        setAttendanceType(getLeaveConstantData?.attendanceTrackingType[0])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getLeaveConstantDataRes,\r\n        getLeaveConstantDataError,\r\n        getLeaveConstantDataPending\r\n    ]);\r\n\r\n\r\n\r\n    const handleDateRangeChange = (dateRange) => {\r\n        setStartDate(dateRange[0])\r\n        setEndDate(dateRange[1])\r\n        getAttendanceStatus(dateRange[0], dateRange[1])\r\n    }\r\n\r\n    const navigateToBack = () => {\r\n        navigate(\"/pay-runs\")\r\n    }\r\n\r\n    const handleChangeStatus = (statusType, selectedData,) => {\r\n        let payload = {\r\n            emp_id: id,\r\n            type: attendanceType?.value,\r\n\r\n        }\r\n        if (statusType === \"present_absent\") {\r\n            payload = {\r\n                ...payload,\r\n                attendance_date: selectedData?.attendance_date,\r\n                updated_status: selectedData?.attendance_status,\r\n            }\r\n\r\n        } else if (statusType === \"punchInTime_punchOutTime\") {\r\n            payload = {\r\n                ...payload,\r\n                attendance_date: selectedData?.attendance_date,\r\n                punch_in_time: selectedData?.first_check_in_time,\r\n                punch_out_time: selectedData?.last_check_out_time,\r\n            }\r\n        } else if (statusType === \"submit\") {\r\n            payload = {\r\n                ...payload,\r\n                attendance_details: attendanceStatusData,\r\n            }\r\n        }\r\n\r\n        setUpdateAttendanceStatusPayload(payload)\r\n        toggleAttendanceStatus()\r\n    }\r\n    const handlePunchInOut = (e, fieldName, selectedData) => {\r\n        const name = fieldName || e.target?.name;\r\n        const { value } = e?.target ? e.target : { value: e?.value };\r\n\r\n        const tempAttendanceStatus = attendanceStatusData.map((item) => {\r\n            if (item?.id === selectedData?.id) {\r\n                if (attendanceType?.value === \"punchInTime_punchOutTime\") {\r\n                    return { ...item, [name]: `${selectedData?.attendance_date} ${value}` };\r\n                } else {\r\n                    return { ...item, [name]: value };\r\n                }\r\n            }\r\n            return item;\r\n        });\r\n        setAttendanceStatusData(tempAttendanceStatus)\r\n    }\r\n\r\n    const toggleAttendanceStatus = () => {\r\n        setIsShowChangeStatusModal(!isShowChangeStatusModal)\r\n    }\r\n\r\n    const handleApproveRejectAttendanceStatus = (type) => {\r\n        if (type) {\r\n            dispatch(payrollActions?.updateAttendanceTrackingRequest(updateAttendanceStatusPayload))\r\n        } else {\r\n            toggleAttendanceStatus()\r\n        }\r\n    }\r\n\r\n    /* Update Attendance Tracking */\r\n    useEffect(() => {\r\n        if (!updateAttendanceTrackingPending) {\r\n            if (updateAttendanceTrackingError) {\r\n                return;\r\n            }\r\n            if (updateAttendanceTrackingRes) {\r\n                if (updateAttendanceTrackingRes?.code === 200) {\r\n                    dispatch(payrollActions.handleClearPayrollStore(\"HANDLE_CLEAR_UPDATE_ATTENDANCE_TRACKING_STORE\"))\r\n                    toggleAttendanceStatus()\r\n                    getAttendanceStatus()\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        updateAttendanceTrackingRes,\r\n        updateAttendanceTrackingError,\r\n        updateAttendanceTrackingPending\r\n    ]);\r\n\r\n    return (\r\n        <>\r\n            <CustomButton\r\n                classNames={\"btn btn-org-gradient mb-2\"}\r\n                handleClick={() => navigateToBack()}\r\n                text={\"Back\"}\r\n\r\n            />\r\n            <div className=\"tab-pane fade show active\" id=\"receivedFeedback\">\r\n                <div className=\"cardBox myRequest mb-3\">\r\n                    <div className=\"d-flex align-items-center mb-3\">\r\n                        <img\r\n                            src=\"/images/kpi-guidline.svg\"\r\n                            alt=\"\"\r\n                            width={40}\r\n                            className=\"me-2 fw-bold\"\r\n                        />\r\n                        <div className=\" mb-2 mt-3\">\r\n                            <h3 className='underlineHead' style={{ fontSize: \"18px\",color:\"#00376A !important\" }}>\r\n                                {selectedEmployeeData?.name}{\" \"}{`(${selectedEmployeeData?.emp_id})`}\r\n                            </h3>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"cardHead d-flex justify-content-between\">\r\n                        <EmployeeAttendanceFilters\r\n                            attendanceType={attendanceType}\r\n                            setAttendanceType={setAttendanceType}\r\n                            startDate={startDate}\r\n                            endDate={endDate}\r\n                            handleDateRangeChange={handleDateRangeChange}\r\n                            allLeaveConstantData={allLeaveConstantData}\r\n                            \r\n                        />\r\n                    </div>\r\n                    <EmpAttendanceTable\r\n                        attendanceStatusData={attendanceStatusData}\r\n                        allLeaveConstantData={allLeaveConstantData}\r\n                        attendanceType={attendanceType}\r\n                        handleChangeStatus={handleChangeStatus}\r\n                        handlePunchInOut={handlePunchInOut}\r\n                    />\r\n                    <div className='d-flex justify-content-end'>\r\n                        <CustomButton\r\n                            classNames={\"btn btn-primary mb-2\"}\r\n                            handleClick={() => handleChangeStatus(\"submit\")}\r\n                            text={\"Submit\"}\r\n\r\n                        />\r\n                    </div>\r\n                    {isShowChangeStatusModal && (\r\n                        <ApproveRejectModal\r\n                            onApproveReject={handleApproveRejectAttendanceStatus}\r\n                            isShow={isShowChangeStatusModal}\r\n                            desc={t(\"alerts.ApproveRejectPopup.desc\").replace('$1', \"Change Attendance Status\")}\r\n                            // btnRightLoading={deleteDepartmentPending}\r\n                            btnTextRight={t(\"btns.submit\")}\r\n                            btnTextLeft={t(\"btns.cancel\")}\r\n                        />)\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default EmployeeAttendanceTracking\r\n"],"names":["_ref","title","desc","onApproveReject","isShow","btnLeftLoading","btnRightLoading","btnTextLeft","btnTextRight","t","useCustomTranslation","_jsxs","_Fragment","children","_jsx","className","id","style","display","opacity","Lottieplayer","lottieUrl","backup","Lottiestyle","width","height","CustomButton","classNames","isLoading","text","handleClick","props","attendanceType","setAttendanceType","startDate","endDate","handleDateRangeChange","allLeaveConstantData","Label","CustomDateRangePicker","onDateRangeChange","dateRange","endDefaultDate","startDefaultDate","maxDisableDates","minDisableDates","CustomSelect","data","placeholder","value","handleChange","selectedOption","currentPage","setCurrentPage","attendanceStatusData","handleChangeStatus","handlePunchInOut","employeeScopedSlots","useMemo","sn","_","index","attendance_date","item","dateFormate","first_half_status","checkAttendanceStatus","second_half_status","action","Input","type","moment","first_check_in_time","format","name","onChange","e","step","last_check_out_time","onClick","src","alt","label","attendance_status","CustomTable","fields","key","pagination","totalPages","isHeader","tableStyle","padding","boxShadow","scopedSlots","EmployeeAttendanceTracking","navigate","useNavigate","monthYear","useParams","dispatch","useDispatch","setAttendanceStatusData","useState","setStartDate","setEndDate","setAllLeaveConstantData","updateAttendanceStatusPayload","setUpdateAttendanceStatusPayload","isShowChangeStatusModal","setIsShowChangeStatusModal","getAttendanceStatusPending","getAttendanceStatusRes","getAttendanceStatusError","updateAttendanceTrackingPending","updateAttendanceTrackingRes","updateAttendanceTrackingError","selectedEmployeeData","useSelector","state","payroll","getLeaveConstantDataPending","getLeaveConstantDataRes","getLeaveConstantDataError","leave","useEffect","getAttendanceStatus","getLeaveConstantData","startOf","endOf","filterStartDate","filterEndDate","payload","emp_id","start_date","end_date","payrollActions","getAttendanceStatusRequest","code","leaveAction","getLeaveConstantDataRequest","Object","keys","includes","attendanceTrackingType","statusType","selectedData","updated_status","punch_in_time","punch_out_time","attendance_details","toggleAttendanceStatus","handleClearPayrollStore","fontSize","color","EmployeeAttendanceFilters","EmpAttendanceTable","fieldName","_e$target","target","tempAttendanceStatus","map","ApproveRejectModal","updateAttendanceTrackingRequest","replace"],"sourceRoot":""}