{"version":3,"file":"static/js/4399.6cb2d9fc.chunk.js","mappings":"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","sources":["../node_modules/src/index.tsx","components/auth/login/ForgotPasswordModal.js","components/auth/login/Login.js"],"sourcesContent":["import React from 'react';\n\ntype AllowedInputTypes = 'password' | 'text' | 'number' | 'tel';\n\ntype InputProps = Required<\n  Pick<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    | 'value'\n    | 'onChange'\n    | 'onFocus'\n    | 'onBlur'\n    | 'onKeyDown'\n    | 'onPaste'\n    | 'aria-label'\n    | 'autoComplete'\n    | 'style'\n    | 'inputMode'\n    | 'onInput'\n  > & {\n    ref: React.RefCallback<HTMLInputElement>;\n    placeholder: string | undefined;\n    className: string | undefined;\n    type: AllowedInputTypes;\n  }\n>;\n\ninterface OTPInputProps {\n  /** Value of the OTP input */\n  value?: string;\n  /** Number of OTP inputs to be rendered */\n  numInputs?: number;\n  /** Callback to be called when the OTP value changes */\n  onChange: (otp: string) => void;\n  /** Callback to be called when pasting content into the component */\n  onPaste?: (event: React.ClipboardEvent<HTMLDivElement>) => void;\n  /** Function to render the input */\n  renderInput: (inputProps: InputProps, index: number) => React.ReactNode;\n  /** Whether the first input should be auto focused */\n  shouldAutoFocus?: boolean;\n  /** Placeholder for the inputs */\n  placeholder?: string;\n  /** Function to render the separator */\n  renderSeparator?: ((index: number) => React.ReactNode) | React.ReactNode;\n  /** Style for the container */\n  containerStyle?: React.CSSProperties | string;\n  /** Style for the input */\n  inputStyle?: React.CSSProperties | string;\n  /** The type that will be passed to the input being rendered */\n  inputType?: AllowedInputTypes;\n  /** Do not apply the default styles to the inputs, will be removed in future versions */\n  skipDefaultStyles?: boolean; // TODO: Remove in next major release\n}\n\nconst isStyleObject = (obj: unknown) => typeof obj === 'object' && obj !== null;\n\nconst OTPInput = ({\n  value = '',\n  numInputs = 4,\n  onChange,\n  onPaste,\n  renderInput,\n  shouldAutoFocus = false,\n  inputType = 'text',\n  renderSeparator,\n  placeholder,\n  containerStyle,\n  inputStyle,\n  skipDefaultStyles = false,\n}: OTPInputProps) => {\n  const [activeInput, setActiveInput] = React.useState(0);\n  const inputRefs = React.useRef<Array<HTMLInputElement | null>>([]);\n\n  const getOTPValue = () => (value ? value.toString().split('') : []);\n\n  const isInputNum = inputType === 'number' || inputType === 'tel';\n\n  React.useEffect(() => {\n    inputRefs.current = inputRefs.current.slice(0, numInputs);\n  }, [numInputs]);\n\n  React.useEffect(() => {\n    if (shouldAutoFocus) {\n      inputRefs.current[0]?.focus();\n    }\n  }, [shouldAutoFocus]);\n\n  const getPlaceholderValue = () => {\n    if (typeof placeholder === 'string') {\n      if (placeholder.length === numInputs) {\n        return placeholder;\n      }\n\n      if (placeholder.length > 0) {\n        console.error('Length of the placeholder should be equal to the number of inputs.');\n      }\n    }\n    return undefined;\n  };\n\n  const isInputValueValid = (value: string) => {\n    const isTypeValid = isInputNum ? !isNaN(Number(value)) : typeof value === 'string';\n    return isTypeValid && value.trim().length === 1;\n  };\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    if (isInputValueValid(value)) {\n      changeCodeAtFocus(value);\n      focusInput(activeInput + 1);\n    }\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { nativeEvent } = event;\n    const value = event.target.value;\n\n    if (!isInputValueValid(value)) {\n      // Pasting from the native autofill suggestion on a mobile device can pass\n      // the pasted string as one long input to one of the cells. This ensures\n      // that we handle the full input and not just the first character.\n      if (value.length === numInputs) {\n        const hasInvalidInput = value.split('').some((cellInput) => !isInputValueValid(cellInput));\n        if (!hasInvalidInput) {\n          handleOTPChange(value.split(''));\n          focusInput(numInputs - 1);\n        }\n      }\n\n      // @ts-expect-error - This was added previously to handle and edge case\n      // for dealing with keyCode \"229 Unidentified\" on Android. Check if this is\n      // still needed.\n      if (nativeEvent.data === null && nativeEvent.inputType === 'deleteContentBackward') {\n        event.preventDefault();\n        changeCodeAtFocus('');\n        focusInput(activeInput - 1);\n      }\n\n      // Clear the input if it's not valid value because firefox allows\n      // pasting non-numeric characters in a number type input\n      event.target.value = '';\n    }\n  };\n\n  const handleFocus = (event: React.FocusEvent<HTMLInputElement>) => (index: number) => {\n    setActiveInput(index);\n    event.target.select();\n  };\n\n  const handleBlur = () => {\n    setActiveInput(activeInput - 1);\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const otp = getOTPValue();\n    if ([event.code, event.key].includes('Backspace')) {\n      event.preventDefault();\n      changeCodeAtFocus('');\n      focusInput(activeInput - 1);\n    } else if (event.code === 'Delete') {\n      event.preventDefault();\n      changeCodeAtFocus('');\n    } else if (event.code === 'ArrowLeft') {\n      event.preventDefault();\n      focusInput(activeInput - 1);\n    } else if (event.code === 'ArrowRight') {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    }\n    // React does not trigger onChange when the same value is entered\n    // again. So we need to focus the next input manually in this case.\n    else if (event.key === otp[activeInput]) {\n      event.preventDefault();\n      focusInput(activeInput + 1);\n    } else if (\n      event.code === 'Spacebar' ||\n      event.code === 'Space' ||\n      event.code === 'ArrowUp' ||\n      event.code === 'ArrowDown'\n    ) {\n      event.preventDefault();\n    }\n  };\n\n  const focusInput = (index: number) => {\n    const activeInput = Math.max(Math.min(numInputs - 1, index), 0);\n\n    if (inputRefs.current[activeInput]) {\n      inputRefs.current[activeInput]?.focus();\n      inputRefs.current[activeInput]?.select();\n      setActiveInput(activeInput);\n    }\n  };\n\n  const changeCodeAtFocus = (value: string) => {\n    const otp = getOTPValue();\n    otp[activeInput] = value[0];\n    handleOTPChange(otp);\n  };\n\n  const handleOTPChange = (otp: Array<string>) => {\n    const otpValue = otp.join('');\n    onChange(otpValue);\n  };\n\n  const handlePaste = (event: React.ClipboardEvent<HTMLInputElement>) => {\n    event.preventDefault();\n\n    const otp = getOTPValue();\n    let nextActiveInput = activeInput;\n\n    // Get pastedData in an array of max size (num of inputs - current position)\n    const pastedData = event.clipboardData\n      .getData('text/plain')\n      .slice(0, numInputs - activeInput)\n      .split('');\n\n    // Prevent pasting if the clipboard data contains non-numeric values for number inputs\n    if (isInputNum && pastedData.some((value) => isNaN(Number(value)))) {\n      return;\n    }\n\n    // Paste data from focused input onwards\n    for (let pos = 0; pos < numInputs; ++pos) {\n      if (pos >= activeInput && pastedData.length > 0) {\n        otp[pos] = pastedData.shift() ?? '';\n        nextActiveInput++;\n      }\n    }\n\n    focusInput(nextActiveInput);\n    handleOTPChange(otp);\n  };\n\n  return (\n    <div\n      style={Object.assign({ display: 'flex', alignItems: 'center' }, isStyleObject(containerStyle) && containerStyle)}\n      className={typeof containerStyle === 'string' ? containerStyle : undefined}\n      onPaste={onPaste}\n    >\n      {Array.from({ length: numInputs }, (_, index) => index).map((index) => (\n        <React.Fragment key={index}>\n          {renderInput(\n            {\n              value: getOTPValue()[index] ?? '',\n              placeholder: getPlaceholderValue()?.[index] ?? undefined,\n              ref: (element) => (inputRefs.current[index] = element),\n              onChange: handleChange,\n              onFocus: (event) => handleFocus(event)(index),\n              onBlur: handleBlur,\n              onKeyDown: handleKeyDown,\n              onPaste: handlePaste,\n              autoComplete: 'off',\n              'aria-label': `Please enter OTP character ${index + 1}`,\n              style: Object.assign(\n                !skipDefaultStyles ? ({ width: '1em', textAlign: 'center' } as const) : {},\n                isStyleObject(inputStyle) ? inputStyle : {}\n              ),\n              className: typeof inputStyle === 'string' ? inputStyle : undefined,\n              type: inputType,\n              inputMode: isInputNum ? 'numeric' : 'text',\n              onInput: handleInputChange,\n            },\n            index\n          )}\n          {index < numInputs - 1 && (typeof renderSeparator === 'function' ? renderSeparator(index) : renderSeparator)}\n        </React.Fragment>\n      ))}\n    </div>\n  );\n};\n\nexport type { OTPInputProps, InputProps, AllowedInputTypes };\nexport default OTPInput;\n","import React, { useEffect, useState } from 'react'\r\nimport { CustomButton, CustomError } from '../../globalComponents'\r\nimport { useCustomTranslation } from '../../../translation'\r\nimport { Input, Label } from '../../commanComponent'\r\nimport { validateSchema } from '../../../utils/ValidationHelper'\r\nimport OtpInput from 'react-otp-input';\r\nimport { resetPasswordSchema } from '../../../utils/ValidationSchema'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { authActions } from '../../../core/resource/actions'\r\n\r\nconst ForgotPasswordModal = (\r\n    {\r\n        isShow,\r\n        btnLeftLoading = false,\r\n        btnRightLoading = false,\r\n        btnTextLeft,\r\n        btnTextRight,\r\n        toggleForgotPasswordModal\r\n    }\r\n) => {\r\n    const dispatch = useDispatch();\r\n    const {\r\n        forgotPasswordPending,\r\n        forgotPasswordRes,\r\n        forgotPasswordError,\r\n\r\n        sendOtpPending,\r\n        sendOtpRes,\r\n        sendOtpError,\r\n\r\n        verifyOtpPending,\r\n        verifyOtpRes,\r\n        verifyOtpError,\r\n\r\n    } = useSelector(state => state.auth);\r\n    const { t } = useCustomTranslation()\r\n    const [otpSent, setOtpSent] = useState(false)\r\n    const [buttonOTP, setButtonOTP] = useState(false);\r\n    const [otpVerify, setOtpVerify] = useState(false)\r\n    const [email, setEmail] = useState('')\r\n    const [otp, setOtp] = useState('')\r\n    const [newPassword, setNewPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [passwordShown, setPasswordShown] = useState(false);\r\n    const [passwordShown1, setPasswordShown1] = useState(false);\r\n    const [minutes, setMinutes] = useState(0);\r\n    const [seconds, setSeconds] = useState(0);\r\n\r\n    const sendOtpFun = async () => {\r\n        let data = {\r\n            email_mobile: email\r\n        }\r\n\r\n        dispatch(authActions.sendOtpRequest(data))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!sendOtpPending) {\r\n            if (sendOtpError) {\r\n                dispatch(authActions.handleClearAuthStore(\"HANDLE_CLEAR_SEND_OTP_STORE\"))\r\n                return;\r\n            }\r\n            if (sendOtpRes) {\r\n                if (sendOtpRes?.code === 200) {\r\n                    dispatch(authActions.handleClearAuthStore(\"HANDLE_CLEAR_SEND_OTP_STORE\"))\r\n                    setOtpSent(true)\r\n                    setMinutes(0)\r\n                    setSeconds(59)\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        sendOtpRes,\r\n        sendOtpError,\r\n        sendOtpPending\r\n    ]);\r\n\r\n    const onClose = () => {\r\n        toggleForgotPasswordModal();\r\n        setOtpSent(false);\r\n        setOtpVerify(false);\r\n        setButtonOTP(false);\r\n        setOtp('');\r\n        setEmail('')\r\n    };\r\n\r\n    const onEmailChange = (e) => {\r\n        setEmail(e.target.value)\r\n        setOtpSent(false);\r\n        setOtpVerify(false);\r\n    };\r\n\r\n    const checkOtp = async e => {\r\n        setOtp(e);\r\n        if (e.length === 6) {\r\n            let data = {\r\n                email_mobile: email,\r\n                otp: e,\r\n                otp_id: ''\r\n            };\r\n            dispatch(authActions.verifyOtpRequest(data))\r\n\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!verifyOtpPending) {\r\n            if (verifyOtpError) {\r\n                dispatch(authActions.handleClearAuthStore(\"HANDLE_CLEAR_VERIFY_OTP_STORE\"))\r\n                setButtonOTP(false);\r\n                setOtpVerify(false);\r\n                return;\r\n            }\r\n            if (verifyOtpRes) {\r\n                if (verifyOtpRes?.code === 200) {\r\n                    dispatch(authActions.handleClearAuthStore(\"HANDLE_CLEAR_VERIFY_OTP_STORE\"))\r\n                    setButtonOTP(true);\r\n                    setOtpVerify(true);\r\n                    setNewPassword('');\r\n                    setConfirmPassword('');\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        verifyOtpRes,\r\n        verifyOtpError,\r\n        verifyOtpPending\r\n    ]);\r\n\r\n    const forgotPasswordFun = async () => {\r\n        let data = {\r\n            email_mobile: email,\r\n            new_password: newPassword,\r\n            confirm_password: confirmPassword,\r\n\r\n        }\r\n        dispatch(authActions.forgotPasswordRequest(data))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!forgotPasswordPending) {\r\n            if (forgotPasswordError) {\r\n                dispatch(authActions.handleClearAuthStore(\"HANDLE_CLEAR_FORGOT_PASSWORD_STORE\"))\r\n                return;\r\n            }\r\n            if (forgotPasswordRes) {\r\n                if (forgotPasswordRes?.code === 200) {\r\n                    dispatch(authActions.handleClearAuthStore(\"HANDLE_CLEAR_FORGOT_PASSWORD_STORE\"))\r\n                    setOtpSent(false)\r\n                    setOtpVerify(false)\r\n                    setEmail(\"\")\r\n                    toggleForgotPasswordModal()\r\n\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        forgotPasswordRes,\r\n        forgotPasswordError,\r\n        forgotPasswordPending\r\n    ]);\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            if (seconds > 0) {\r\n                setSeconds(seconds - 1);\r\n            }\r\n\r\n            if (seconds === 0) {\r\n                if (minutes === 0) {\r\n                    clearInterval(interval);\r\n                } else {\r\n                    setSeconds(59);\r\n                    setMinutes(minutes - 1);\r\n                }\r\n            }\r\n        }, 1000);\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n    });\r\n    return (\r\n        <>\r\n            <div className=\"modal fade \" id='' style={{ display: isShow ? \"unset !important\" : \"none !important\", opacity: isShow ? \"unset\" : \"0\" }}>\r\n                <div className=\"modal-dialog modal-dialog-centered\">\r\n                    <div class=\"modal-content rounded-1 \">\r\n                        <div class=\"modal-header \">\r\n                            <h1 class=\"modal-title fs-5 fw-bold text-primary\">{t(\"headings.forgotPassword\")}</h1>\r\n                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\" onClick={() => toggleForgotPasswordModal()}></button>\r\n                        </div>\r\n                        <div class=\"modal-body pt-0\">\r\n                            <form className='mt-2 mb-2'>\r\n                                <div className=\"form-group\">\r\n                                    <label for=\"exampleInputEmail1\">Email Address</label>\r\n                                    <input type=\"email\" className=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\" onChange={(e) => onEmailChange(e)} value={email} placeholder=\"Enter registered email\" />\r\n                                </div>\r\n                                {otpSent &&\r\n                                    <div className=\"form-group\">\r\n                                        <label for=\"otp\">Enter OTP {buttonOTP ? (\r\n                                            <a className=\"badge badge-success text-lg\" style={{ marginLeft: \"5px\", color: \"white\" }}>\r\n                                                Verified\r\n                                            </a>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}</label>\r\n                                        <td\r\n                                            style={{\r\n                                                paddingTop: '1.5%',\r\n                                                paddingBottom: '1.5%',\r\n                                            }}\r\n                                        >\r\n                                            <OtpInput\r\n                                                className=\"otp-spacing\"\r\n                                                inputStyle={{\r\n                                                    width: '50%',\r\n                                                    height: '150%',\r\n                                                    color: '#212529',\r\n                                                    backgroundClip: 'padding-box',\r\n                                                    border: '1px solid #ced4da',\r\n                                                    borderRadius: '0.375rem',\r\n                                                    backgroundColor: buttonOTP\r\n                                                        ? 'lightgray'\r\n                                                        : '#fff',\r\n                                                }}\r\n                                                isDisabled={buttonOTP}\r\n                                                value={otp}\r\n                                                onChange={e => checkOtp(e)}\r\n                                                numInputs={6}\r\n                                                separator={<span></span>}\r\n                                                isInputNum={true}\r\n                                                renderInput={props => <input {...props} />}\r\n                                            />\r\n                                        </td>\r\n                                    </div>\r\n                                }\r\n                                {otpVerify &&\r\n                                    <>\r\n                                        <div className=\"form-group\">\r\n                                            <label for=\"newpassword\">New Password</label>\r\n                                            <div className=\"position-relative eyeContt2\">\r\n                                                <input className=\"form-control\" type={passwordShown ? \"text\" : \"password\"} onChange={(e) => setNewPassword(e.target.value)} value={newPassword} placeholder=\"New Password\" />\r\n                                                <i class=\"fa fa-eye\" aria-hidden=\"true\" style={{ left: '435px' }} onClick={() => setPasswordShown(passwordShown ? false : true)}></i>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <label for=\"confirmpassword\">Confirm Password</label>\r\n                                            <div className=\"position-relative eyeContt2\">\r\n                                                <input type={passwordShown1 ? \"text\" : \"password\"} className=\"form-control\" onChange={(e) => setConfirmPassword(e.target.value)} value={confirmPassword} placeholder=\"Confirm Password\" />\r\n                                                <i class=\"fa fa-eye\" aria-hidden=\"true\" style={{ left: '435px' }} onClick={() => setPasswordShown1(passwordShown1 ? false : true)}></i>\r\n                                            </div>\r\n                                        </div>\r\n                                    </>\r\n                                }\r\n                                {otpSent === false &&\r\n                                    <button\r\n                                        type=\"button\" className=\"btn btn-primary mt-3\"\r\n                                        onClick={() => sendOtpFun()}\r\n                                    >Send OTP\r\n                                    </button>\r\n                                }\r\n                                {/* {otpSent == true && otpVerify == false &&\r\n                            <button type=\"button\" className=\"btn btn-primary\" onClick={otpVerifyFun}>Verify OTP</button>\r\n                        } */}\r\n                            </form>\r\n                        </div>\r\n                        <div class=\"modal-footer pt-0\">\r\n                            {otpSent === true && otpVerify === false &&\r\n                                <button type=\"button\" className=\"btn btn-primary\" onClick={minutes > 0 || seconds > 0 ? null : sendOtpFun}>{minutes > 0 || seconds > 0 ? (<> {minutes < 10 ? `0${minutes}` : minutes}:\r\n                                    {seconds < 10 ? `0${seconds}` : seconds}</>) : 'Resend OTP'}</button>\r\n                            }\r\n                            {otpVerify === true &&\r\n                                <button type=\"button\" className=\"btn btn-primary\" onClick={forgotPasswordFun}>Change Password</button>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {isShow && <div className=\"modal-backdrop fade show\"></div>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ForgotPasswordModal\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./Login.css\";\r\nimport { object, string, } from \"yup\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { authActions, employeeActions, notificationActions } from '../../../core/resource/actions';\r\nimport { notify } from \"../../globalComponents/ToastNotification\";\r\nimport { getDataFromLocalstorage, getLocalDataAsObject, setDataOnLocalstorage } from \"../../../utils/AppHelper\";\r\nimport Cookies from 'js-cookie';\r\nimport { decryptValue, encryptValue } from \"../../../utils/common\";\r\nimport { CustomButton } from \"../../globalComponents\";\r\nimport ForgotPasswordModal from \"./ForgotPasswordModal\";\r\n\r\nconst Login = (props) => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const { isUserLoginPending, userLoginRes, userLoginResError } = useSelector(state => state.auth);\r\n  const [showPassword, setShowPassword] = useState(false)\r\n  const [isShowForgotPasswordModal, setIsShowForgotPasswordModal] = useState(false)\r\n  const [formData, setFormData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n\r\n  const togglePasswordVisiblity = () => {\r\n    setPasswordShown(passwordShown ? false : true);\r\n  };\r\n  let FormSchema = object({\r\n    email: string().required(),\r\n    password: string().required(),\r\n  });\r\n  const saveUser = async () => {\r\n    // await login({\r\n    //   body: { email: formData?.email, password: formData?.password },\r\n    // });\r\n  };\r\n\r\n  const handleOnLogin = async (filePayload = null) => {\r\n    const params = {\r\n      email: formData?.email,\r\n      password: formData?.password,\r\n    };\r\n    dispatch(authActions.userLoginRequest(params));\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleLoginResposnse()\r\n  }, [\r\n    isUserLoginPending,\r\n    userLoginRes,\r\n    userLoginResError,\r\n  ]);\r\n\r\n  const handleLoginResposnse = async () => {\r\n    if (!isUserLoginPending) {\r\n      if (userLoginResError) {\r\n        dispatch(authActions.handleClearAuthStore('HANDLE_CLEAR_LOGIN_STORE'))\r\n        return;\r\n      }\r\n      if (userLoginRes) {\r\n        if (userLoginRes?.code == 200) {\r\n          let { token, user } = userLoginRes && userLoginRes?.data\r\n\r\n          let encryptUser = encryptValue(JSON.stringify(user))\r\n          await setDataOnLocalstorage(encryptUser, \"user\");\r\n          await setDataOnLocalstorage(token, \"authtoken\");\r\n          console.log(user, \"user-----------\")\r\n          dispatch(employeeActions.employeeDetails(user))\r\n\r\n          // let params = {\r\n          //   path: '/',      \r\n          //   secure: true,  \r\n          //   sameSite: 'Strict', \r\n          // }\r\n          Cookies.set('authtoken', token);\r\n          Cookies.set(\"authData\", JSON.stringify(user));\r\n          dispatch(authActions.handleClearAuthStore('HANDLE_CLEAR_LOGIN_STORE'))\r\n          navigate('/attendance-dashboard')\r\n\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleFormdata = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const isViewModalOpen = () => {\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  const toggleForgotPasswordModal = () => {\r\n    setIsShowForgotPasswordModal(!isShowForgotPasswordModal)\r\n  }\r\n\r\n  return (\r\n\r\n    <div className=\"mittContent\">\r\n      <div className=\"glueplelogo\">\r\n        <a href=\"\">\r\n          <img src=\"images/glueple-logo.png\" alt=\"\" width={120} />\r\n        </a>\r\n      </div>\r\n      <div className=\"inner-content\">\r\n        <div className=\"leftContent\">\r\n          <figure className=\"position-relative\">\r\n            <img src=\"images/img.png\" alt=\"\" />\r\n            <span className=\"icon1\">\r\n              {\" \"}\r\n              <img src=\"images/attendance.png\" alt=\"\" width={70} />\r\n            </span>\r\n            <span className=\"icon2\">\r\n              {\" \"}\r\n              <img src=\"images/human-resources.png\" alt=\"\" width={70} />\r\n            </span>\r\n            <span className=\"icon3\">\r\n              {\" \"}\r\n              <img src=\"images/payroll.png\" alt=\"\" width={70} />\r\n            </span>\r\n            <span className=\"icon4\">\r\n              {\" \"}\r\n              <img src=\"images/hiring.png\" alt=\"\" width={60} />\r\n            </span>\r\n            <span className=\"icon5\">\r\n              {\" \"}\r\n              <img src=\"images/human-resources-srch.png\" alt=\"\" width={60} />\r\n            </span>\r\n            <span className=\"icon6\">\r\n              {\" \"}\r\n              <img src=\"images/market-analysis.png\" alt=\"\" width={65} />\r\n            </span>\r\n            <span className=\"icon7\">\r\n              <img src=\"images/employee.png\" alt=\"\" width={50} />\r\n              Streamline Your Workforce\r\n            </span>\r\n          </figure>\r\n        </div>\r\n        <div className=\"rightTxt position-relative\">\r\n          <div className=\"loginFormBox\">\r\n            <div className=\"text-start\">\r\n              <h3 className=\"mb-2\">Login</h3>\r\n              <p className=\"\">\r\n                Human Resource Management System\r\n              </p>\r\n            </div>\r\n            <form>\r\n              <div className=\"mb-4\">\r\n                <label className=\"form-label\">Enter Email or Employee ID</label>\r\n                <input\r\n                  className=\"form-control w-100\"\r\n                  type=\"email\"\r\n                  placeholder=\"Email / Employee ID\"\r\n                  name=\"email\"\r\n                  onChange={(e) => handleFormdata(e)}\r\n                  value={formData.email}\r\n                />\r\n              </div>\r\n              <div className=\"mb-1\">\r\n                <label className=\"form-label\">Password</label>\r\n                <div className=\"position-relative\">\r\n                  <input\r\n                    className=\"form-control w-100 pe-5\"\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    placeholder=\"Enter Password\"\r\n                    name=\"password\"\r\n                    value={formData.password}\r\n                    onChange={(e) => handleFormdata(e)}\r\n                  />\r\n                  <span className=\"eyeInput\" onClick={() => setShowPassword(!showPassword)}>\r\n                    {showPassword ? <img src=\"images/eye-open.svg\" alt=\"\" width={20} /> : <img src=\"images/eye-hide.svg\" alt=\"\" width={20} />}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div className=\"forgotTxt\">\r\n                <div className=\"customCheckbox\">\r\n                  <input type=\"checkbox\" id=\"termCheck\" />\r\n                  <label htmlFor=\"termCheck\">Remember me</label>\r\n                </div>\r\n                {/* <span onClick={() => toggleForgotPasswordModal()}>Forgot Password</span> */}\r\n              </div>\r\n              <div className=\"text-center my-2 mt-4\">\r\n                <CustomButton\r\n                  text=\"Login\"\r\n                  isLoading={isUserLoginPending}\r\n                  classNames={'btn btn-login'}\r\n                  handleClick={handleOnLogin}\r\n                />\r\n              </div>\r\n              <strong className=\"fs-8 mt-4 text-center d-block\">\r\n                © Copyright Powered by @QDegrees.com\r\n              </strong>\r\n              <a href=\"https://www.qdegrees.com\" target=\"_blank\" className=\"text-center d-block\">\r\n                <img src=\"images/qdegreesLogo.png\" alt=\"\" width={80} />\r\n              </a>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {isShowForgotPasswordModal &&<ForgotPasswordModal\r\n        isShow={isShowForgotPasswordModal}\r\n        toggleForgotPasswordModal={toggleForgotPasswordModal}\r\n      />}\r\n\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"names":["isStyleObject","obj","OTPInput","_a","_b","value","_c","numInputs","onChange","onPaste","renderInput","_d","shouldAutoFocus","_e","inputType","renderSeparator","placeholder","containerStyle","inputStyle","_f","skipDefaultStyles","_g","React","activeInput","setActiveInput","inputRefs","getOTPValue","toString","split","isInputNum","current","slice","focus","getPlaceholderValue","length","console","error","isInputValueValid","isNaN","Number","trim","handleChange","event","target","changeCodeAtFocus","focusInput","handleInputChange","nativeEvent","some","cellInput","handleOTPChange","data","preventDefault","handleBlur","handleKeyDown","otp","code","key","includes","index","Math","max","min","select","otpValue","join","handlePaste","nextActiveInput","pastedData","clipboardData","getData","pos","shift","style","Object","assign","display","alignItems","className","undefined","Array","from","_","map","ref","element","onFocus","handleFocus","onBlur","onKeyDown","autoComplete","concat","width","textAlign","type","inputMode","onInput","_ref","isShow","btnLeftLoading","btnRightLoading","btnTextLeft","btnTextRight","toggleForgotPasswordModal","dispatch","useDispatch","forgotPasswordPending","forgotPasswordRes","forgotPasswordError","sendOtpPending","sendOtpRes","sendOtpError","verifyOtpPending","verifyOtpRes","verifyOtpError","useSelector","state","auth","t","useCustomTranslation","otpSent","setOtpSent","useState","buttonOTP","setButtonOTP","otpVerify","setOtpVerify","email","setEmail","setOtp","newPassword","setNewPassword","confirmPassword","setConfirmPassword","passwordShown","setPasswordShown","passwordShown1","setPasswordShown1","minutes","setMinutes","seconds","setSeconds","sendOtpFun","async","email_mobile","authActions","sendOtpRequest","useEffect","handleClearAuthStore","interval","setInterval","clearInterval","_jsxs","_Fragment","children","_jsx","id","opacity","class","onClick","for","e","onEmailChange","marginLeft","color","paddingTop","paddingBottom","OtpInput","height","backgroundClip","border","borderRadius","backgroundColor","isDisabled","otp_id","verifyOtpRequest","checkOtp","separator","props","left","new_password","confirm_password","forgotPasswordRequest","navigate","useNavigate","isUserLoginPending","userLoginRes","userLoginResError","showPassword","setShowPassword","isShowForgotPasswordModal","setIsShowForgotPasswordModal","formData","setFormData","password","isOpen","setIsOpen","object","string","required","handleLoginResposnse","token","user","encryptUser","encryptValue","JSON","stringify","setDataOnLocalstorage","log","employeeActions","employeeDetails","Cookies","set","handleFormdata","name","href","src","alt","htmlFor","CustomButton","text","isLoading","classNames","handleClick","params","userLoginRequest","ForgotPasswordModal"],"sourceRoot":""}