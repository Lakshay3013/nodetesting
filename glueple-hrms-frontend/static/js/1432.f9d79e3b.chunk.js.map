{"version":3,"file":"static/js/1432.f9d79e3b.chunk.js","mappings":"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","sources":["components/admin/holiday/HolidayCalenderList.js","components/admin/holiday/HolidayTable.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Calender from '../../calendar/Calender'\r\nimport HolidayTable from './HolidayTable'\r\nimport { holidaysActions } from '../../../core/resource/actions'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport moment from 'moment'\r\n\r\nconst HolidayCalenderList = () => {\r\n    const dispatch = useDispatch();\r\n    const {\r\n        getHolidayRes,\r\n        getHolidayPending,\r\n        getHolidayError,\r\n    } = useSelector(state => state.holiday)\r\n    const [allHolidayListData, setAllHolidayListData] = useState([])\r\n    const [currentDate, setCurrentDate] = useState(moment());\r\n\r\n    useEffect(() => {\r\n        getAllHoliday()\r\n    }, [])\r\n\r\n    const getAllHoliday = () => {\r\n        dispatch(holidaysActions.getHolidayRequest());\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!getHolidayPending) {\r\n            if (getHolidayError) {\r\n                return;\r\n            }\r\n            if (getHolidayRes) {\r\n                if (getHolidayRes?.code === 200) {\r\n                    const getAllHolidayResData = getHolidayRes?.data\r\n                    setAllHolidayListData(getAllHolidayResData)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getHolidayRes,\r\n        getHolidayError,\r\n        getHolidayPending\r\n    ]);\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    return (\r\n        <>\r\n            <Calender\r\n                setCurrentDate={setCurrentDate}\r\n                currentDate={currentDate}\r\n                attendanceDetails={allHolidayListData}\r\n                handleOpenClose={''}\r\n                calenderType={\"holiday\"}\r\n            />\r\n            <HolidayTable\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                allHolidayListData={allHolidayListData}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HolidayCalenderList\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport { CustomTable } from '../../reuseableComponents'\r\nimport { getBadgeColor, isPermission } from '../../../utils/common'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment'\r\nimport { useCustomTranslation } from '../../../translation'\r\nimport { all } from 'axios'\r\nimport { Icon } from '../../commanComponent'\r\n\r\nconst HolidayTable = (props) => {\r\n    const {t}=useCustomTranslation()\r\n    const {\r\n        setSelectedHolidayData,\r\n        toggleCreateUpdateHolidayModal,\r\n        currentPage,\r\n        setCurrentPage,\r\n        allHolidayListData,\r\n        isLoading,\r\n        toggleHolidayDeleteModal,\r\n        viewType\r\n    } = props\r\n    const updateHolidayPer = isPermission(\"update_holiday\")\r\n    const deleteHolidayPer = isPermission(\"delete_holiday\")\r\n\r\n    const handleUpdateHoliday = (data) => {\r\n        toggleCreateUpdateHolidayModal(data)\r\n    }\r\n\r\n\r\n    const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (\r\n            <span>{index+1}</span>\r\n        ),\r\n        is_active: item => (\r\n            <span\r\n                className={`badge ${getBadgeColor(item.is_active ? \"Active\" : \"Inactive\")}`}\r\n            >\r\n                {item.is_active ? \"Active\" : \"Inactive\"}\r\n            </span>\r\n        ),\r\n        days: item =>  moment(item.to_date).diff(moment(item.from_date), 'days')+1,\r\n        created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n        from_date: item => moment(item.from_date).format(\"DD-MM-YYYY\"),\r\n        to_date: item => moment(item.to_date).format(\"DD-MM-YYYY\"),\r\n        action: item => (\r\n            <div className=\"btn-group actionDrp\">\r\n                <button type=\"button\" className=\"btn dropdown-toggle-split\"\r\n                    data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                    <i className=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul className=\"dropdown-menu\">\r\n                {viewType ===\"admin\" &&updateHolidayPer &&<li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => handleUpdateHoliday(item)}\r\n                        >\r\n                            <Icon className={\"bi bi-pencil-square me-1\"} />Update</span>\r\n                    </li>}\r\n                     {deleteHolidayPer &&<li>\r\n                        <span className=\"dropdown-item\"\r\n                            onClick={() => toggleHolidayDeleteModal(item._id)}\r\n                        >\r\n                            <Icon className={\"bi bi-trash me-1\"} />Delete</span>\r\n                    </li>}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }), [setSelectedHolidayData,toggleCreateUpdateHolidayModal]);\r\n\r\n\r\n    const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'name', label: 'Holiday Name' },\r\n        { key: 'from_date', label: 'Holiday From' },\r\n        { key: 'to_date', label: 'Holiday To' },\r\n        { key: 'days', label: 'Days' },\r\n       ((updateHolidayPer||deleteHolidayPer) && { key: 'action', label: 'Action'    })\r\n    ];\r\n  return (\r\n    <>\r\n      <CustomTable\r\n                data={allHolidayListData}\r\n                fields={fields}\r\n                isLoading={isLoading}\r\n                pagination={true}\r\n                currentPage={currentPage}\r\n                setCurrentPage={setCurrentPage}\r\n                tableName={\"Holiday\"}\r\n                // onSearch={handleSearch}\r\n                scopedSlots={scopedSlots}\r\n            />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HolidayTable\r\n"],"names":["HolidayCalenderList","dispatch","useDispatch","getHolidayRes","getHolidayPending","getHolidayError","useSelector","state","holiday","allHolidayListData","setAllHolidayListData","useState","currentDate","setCurrentDate","moment","useEffect","getAllHoliday","holidaysActions","getHolidayRequest","code","getAllHolidayResData","data","currentPage","setCurrentPage","_jsxs","_Fragment","children","_jsx","Calender","attendanceDetails","handleOpenClose","calenderType","HolidayTable","props","t","useCustomTranslation","setSelectedHolidayData","toggleCreateUpdateHolidayModal","isLoading","toggleHolidayDeleteModal","viewType","updateHolidayPer","isPermission","deleteHolidayPer","scopedSlots","useMemo","sn","_","index","is_active","item","className","getBadgeColor","days","to_date","diff","from_date","created_at","format","action","type","onClick","Icon","_id","fields","key","label","CustomTable","pagination","tableName"],"sourceRoot":""}