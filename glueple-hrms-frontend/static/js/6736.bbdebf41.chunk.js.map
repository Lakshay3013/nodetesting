{"version":3,"file":"static/js/6736.bbdebf41.chunk.js","mappings":"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","sources":["components/admin/EmailTemplate/EmailTemplate.js","components/modal/admin/emailTemplate/CreateAndUpdateEmailTemplate.js","components/admin/EmailTemplate/EmailActionData.js","view/EmailTemplate.js"],"sourcesContent":["import React, { useEffect, useState,useMemo } from 'react'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport moment from 'moment-timezone'\r\nimport { useDispatch } from 'react-redux'\r\nimport { getBadgeColor } from '../../../utils/common'\r\nimport CustomTable from '../../reuseableComponents/customTable/CustomTable'\r\n\r\nconst EmailTemplatedata = (props) => {\r\n    const { TemplateList,isLoading,toggleOffcanvas,currentPage,setCurrentPage,setSelectedTemplateData,onHandleDeleteModal,onHandleViewModal} = props\r\n\r\n    const [templateList, settemplate] = useState(TemplateList)\r\n\r\n    useEffect(() => {\r\n      settemplate(TemplateList)\r\n    }, [TemplateList])\r\n\r\n      const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'template_name', label: 'Template Name' },\r\n        { key: 'email_title', label: 'Subject' },\r\n        { key: 'email_type', label: 'Email For' },\r\n        { key: 'is_active', label: 'Status' },\r\n        { key: 'created_at', label: 'Created At' },\r\n        { key: 'action', label :'Action' }\r\n      ];\r\n\r\n      const updateEmailTemplate = (data) => {\r\n        setSelectedTemplateData(data)\r\n        toggleOffcanvas()\r\n      }\r\n\r\n      const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (         \r\n           <span>{index+1}</span> \r\n        ),\r\n        is_active: item => (        \r\n          <span\r\n            className={`badge ${getBadgeColor(item.is_active? \"Active\":\"Inactive\")}`}\r\n            // style={{ color: '#fff', padding: x'0.5rem' }}\r\n          >\r\n            {item.is_active? \"Active\":\"Inactive\"}\r\n          </span>\r\n        ),\r\n        created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n        action: item => (\r\n          <div className=\"actionGroup d-flex gap-2\">\r\n            <CustomButton\r\n              text=\"View\"\r\n              handleClick={() => onHandleViewModal(item)}\r\n              classNames=\"btn btn-success\"\r\n            />\r\n            <CustomButton\r\n              text=\"Update\"\r\n              classNames=\"btn btn-primary\"\r\n              handleClick={() => {\r\n                updateEmailTemplate(item);\r\n              }}\r\n            />\r\n            <CustomButton\r\n              text=\"Delete\"\r\n              handleClick={() => onHandleDeleteModal(item?.id)}\r\n              classNames=\"btn btn-danger\"\r\n            />\r\n          </div>\r\n        )\r\n      }), [setSelectedTemplateData, toggleOffcanvas, onHandleDeleteModal,onHandleViewModal]);\r\n  \r\n  return (\r\n    <>\r\n    <CustomTable\r\n        data={templateList?.data}\r\n        fields={fields}\r\n        isLoading={isLoading}\r\n        pagination={true}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n        totalPages={templateList?.totalPages}\r\n        tableName={\"Email Template\"}\r\n        // onSearch={handleSearch}\r\n        scopedSlots={scopedSlots}\r\n        />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EmailTemplatedata\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { CustomButton } from '../../../globalComponents';\r\nimport { emailTemplateAction } from '../../../../core/resource/actions';\r\nimport { toast } from 'react-toastify';\r\nimport { addEmailTemplatechema } from '../../../../utils/ValidationSchema';\r\nimport { validateSchema } from '../../../../utils/ValidationHelper';\r\nimport CustomError from '../../../globalComponents/CustomError';\r\n\r\nimport Customckediter from './Customckediter'\r\n\r\nconst CreateAndUpdateEmailTemplate = (props) => {\r\n\r\n    const { isOpenEmailType, toggleOffcanvas, getAllEmailTemplalte, setSelectedTemplateData, selectedTemplateData, onHandleViewModals } = props\r\n    const [errors, setErrors] = useState({});\r\n    const dispatch = useDispatch();\r\n    const { getEmailTypePending, getEmailTypeRes, getEmailTypeError, addEmailTemplatePending, addEmailTemplateRes, addEmailTemplateError } = useSelector(state => state.emailtemplate);\r\n    const [isActive, setIsActive] = useState(false);\r\n    const [emailType, setEmailType] = useState([])\r\n    const [editorData, setEditorData] = useState('')\r\n    const [templateId, setTemplateId] = useState('')\r\n    const [dropdownValue, setDropdownValue] = useState('');\r\n    const [bodydata, setBodydata] = useState('')\r\n    const [subemailType, setSubEmailType] = useState([])\r\n    const [field, setfield] = useState([])\r\n\r\n    const [addEmailTemplate, setAddEmailTemplate] = useState({\r\n        template_name: '',\r\n        email_title: '',\r\n        email_type: '',\r\n        body: '',\r\n        is_active: '',\r\n        remark: ''\r\n    })\r\n\r\n    useEffect(() => {\r\n        setAddEmailTemplate({\r\n            template_name: selectedTemplateData?.template_name || '',\r\n            email_title: selectedTemplateData?.email_title || '',\r\n            email_type: selectedTemplateData.email_type || '',\r\n            body: selectedTemplateData?.body,\r\n            remark: selectedTemplateData?.remark\r\n        })\r\n        setIsActive(selectedTemplateData?.is_active)\r\n        setTemplateId(selectedTemplateData?.id)\r\n        handleAutoFill(selectedTemplateData?.body)\r\n        // setEditorData(selectedTemplateData?.body)\r\n    }, [selectedTemplateData])\r\n\r\n    useEffect(() => {\r\n        setAddEmailTemplate({\r\n            template_name: onHandleViewModals?.template_name || '',\r\n            email_title: onHandleViewModals?.email_title || '',\r\n            email_type: onHandleViewModals?.email_type,\r\n            body: onHandleViewModals?.body,\r\n            remark: onHandleViewModals?.remark\r\n        })\r\n        setIsActive(onHandleViewModals?.is_active)\r\n        handleAutoFill(onHandleViewModals?.body)\r\n    }, [onHandleViewModals])\r\n\r\n    useEffect(() => {\r\n        getEmailType()\r\n    }, [])\r\n\r\n    const getEmailType = () => {\r\n        dispatch(emailTemplateAction.getEmailTypeRequest());\r\n    }\r\n\r\n    const newFunction = (data) => {\r\n        setDropdownValue(data?.value)\r\n        field.push(data)\r\n\r\n    }\r\n    useEffect(() => {\r\n        if (!getEmailTypePending) {\r\n            if (getEmailTypeError) {\r\n                setEmailType([])\r\n                return;\r\n            }\r\n            if (getEmailTypeRes) {\r\n                if (getEmailTypeRes?.data?.code == 200) {\r\n                    setEmailType(getEmailTypeRes?.data?.data?.data?.data)\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        getEmailTypePending,\r\n        getEmailTypeRes,\r\n        getEmailTypeError\r\n    ]);\r\n\r\n    const handleAutoFill = (data) => {\r\n        setBodydata(data)\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!addEmailTemplatePending) {\r\n            if (addEmailTemplateError) {\r\n                toast.error(addEmailTemplateError?.errorMessage)\r\n                return;\r\n            }\r\n            if (addEmailTemplateRes) {\r\n                if (addEmailTemplateRes?.data?.code === 200) {\r\n                    toast.success(addEmailTemplateRes?.data?.msg)\r\n                    toggleOffcanvas()\r\n                    getAllEmailTemplalte()\r\n                    dispatch(emailTemplateAction.handleClearEmailTemplateStore(\"HANDLE_CLEAR_ADD_EMAIL_TEMPLATE_STORE\"))\r\n                }\r\n            }\r\n        }\r\n    }, [\r\n        addEmailTemplateRes,\r\n        addEmailTemplateError,\r\n        addEmailTemplatePending\r\n    ]);\r\n\r\n    const handleChange = (event) => {\r\n        errors && setErrors({});\r\n        if (event.target.name == 'email_type') {\r\n            setSubEmailType(dropdownOptions?.filter(data => data.task == event.target.value)[0]?.subtasks)\r\n        }\r\n        const { name, value } = event.target\r\n        setAddEmailTemplate({ ...addEmailTemplate, [name]: value })\r\n    }\r\n\r\n    const createEmailTemplate = async () => {\r\n        addEmailTemplate.body = editorData\r\n        addEmailTemplate.is_active = isActive\r\n        addEmailTemplate.field = field\r\n        const validationResponse = await validateSchema(addEmailTemplatechema, addEmailTemplate);\r\n        if (validationResponse.isValid) {\r\n            setErrors({});\r\n            // addEmailTemplate.body = editorData\r\n            // addEmailTemplate.is_active = isActive\r\n            if (selectedTemplateData) {\r\n                addEmailTemplate['_id'] = templateId\r\n                dispatch(emailTemplateAction.updateEmailTemplateRequest(addEmailTemplate));\r\n                getAllEmailTemplalte()\r\n                toggleOffcanvas()\r\n            } else {\r\n                dispatch(emailTemplateAction.addEmailTemplateRequest(addEmailTemplate));\r\n                getAllEmailTemplalte()\r\n            }\r\n\r\n        } else {\r\n            setErrors(validationResponse.errors);\r\n            console.log(validationResponse.errors, \"formattedErrors\");\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isOpenEmailType == false) {\r\n            resetTempateData()\r\n        }\r\n    }, [isOpenEmailType])\r\n\r\n\r\n    const resetTempateData = () => {\r\n        setAddEmailTemplate({\r\n            template_name: '',\r\n            email_title: '',\r\n            email_type: '',\r\n            body: '',\r\n            is_active: ''\r\n        })\r\n        setSelectedTemplateData('')\r\n        setErrors({});\r\n        setEditorData('')\r\n    }\r\n    const dropdownOptions = [\r\n        {\r\n            id: 1,\r\n            task: 'MRF',\r\n            subtasks: [\r\n                { value: '{employee_name}', label: 'Employee Name' },\r\n                { value: '{applying_for}', label: 'Applying for' },\r\n                { value: '{approval_by}', label: 'Approval by' },\r\n                { value: '{mrf_id}', label: 'Mrf id' },\r\n                { value: '{name}', label: 'Name' },\r\n                { value: '{current_date_time}', label: 'Current date time' },\r\n                { value: '{designation}', label: 'Designation' }\r\n            ]\r\n        },\r\n        {\r\n            id: 2,\r\n            task: 'C-off',\r\n            subtasks: [\r\n                { value: '{Name}', label: 'Name' },\r\n                { value: '{emp_name}', label: 'Emp Name' },\r\n                { value: '{date}', label: 'Date' },\r\n                { value: '{no_of_days}', label: 'No of days' },\r\n                { value: '{reason}', label: 'Reason' }\r\n            ]\r\n        },\r\n        {\r\n            id: 3,\r\n            task: 'attendance_correction',\r\n            subtasks: [\r\n                { value: '{manager_full_name}', label: 'manager_full_name' },\r\n                { value: '{emp_name}', label: 'emp_name' },\r\n                { value: '{date}', label: 'date' },\r\n                { value: '{first_check_in}', label: 'first_check_in' },\r\n                { value: '{first_check_out}', label: 'first_check_out' },\r\n                { value: '{corrected_check_in_time}', label: 'corrected_check_in_time' },\r\n                { value: '{corrected_check_out_time}', label: 'corrected_check_out_time' },\r\n\r\n            ]\r\n        },\r\n\r\n        // Add more options as needed\r\n    ];\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className={`offcanvas offcanvas-end creatNewTicketOff ${isOpenEmailType ? 'show' : ''}`}\r\n\r\n                tabIndex={-1}\r\n                style={{\r\n                    visibility: isOpenEmailType ? 'visible' : 'hidden',\r\n                    width: \"1025px\"\r\n                }}\r\n            >\r\n                <div className=\"offcanvas-header\">\r\n                    <h5 className=\"offcanvas-title  fs-5 fw-bold text-primary\">{onHandleViewModals ? \"View\" : selectedTemplateData ? \"Update\" : \"Create New\"} Email Template</h5>\r\n                    <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"\r\n                        onClick={() => toggleOffcanvas('view')}\r\n                    />\r\n                </div>\r\n                <div className=\"offcanvas-body\">\r\n                    <div className=\"formPanel\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <label htmlFor>Template Name<span className='text-danger'>{onHandleViewModals == '' && '*'}</span></label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    {onHandleViewModals != '' ?\r\n                                        <div>\r\n                                            {addEmailTemplate?.template_name}\r\n                                        </div> :\r\n\r\n                                        <input type=\"text\" className=\"form-control fs-7\"\r\n                                            placeholder=\"Enter Template Name\"\r\n                                            name='template_name'\r\n                                            value={addEmailTemplate?.template_name || ''}\r\n                                            onChange={(e) => handleChange(e)}\r\n                                            disabled={onHandleViewModals != '' ? true : false}\r\n                                        />}\r\n\r\n                                    {errors?.template_name && (\r\n                                        <CustomError text={errors.template_name} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <label htmlFor>Subject<span className='text-danger'>{onHandleViewModals == '' && '*'}</span></label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    {onHandleViewModals != '' ?\r\n                                        <div>\r\n                                            {addEmailTemplate?.email_title}\r\n                                        </div> :\r\n\r\n                                        <input type=\"text\" className=\"form-control fs-7\"\r\n                                            name='email_title'\r\n                                            placeholder=\"Enter Title\"\r\n                                            value={addEmailTemplate?.email_title}\r\n                                            onChange={(e) => handleChange(e)}\r\n                                            disabled={onHandleViewModals != '' ? true : false}\r\n                                        />}\r\n\r\n                                    {errors?.email_title && (\r\n                                        <CustomError text={errors.email_title} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <label htmlFor>Email For<span className='text-danger'>{onHandleViewModals == '' && '*'}</span></label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    {onHandleViewModals != '' ?\r\n                                        <div>\r\n                                            {addEmailTemplate?.email_type}\r\n                                        </div> :\r\n\r\n                                        <select className=\"form-select\" required\r\n                                            name='email_type'\r\n                                            value={addEmailTemplate?.email_type}\r\n                                            onChange={(e) => handleChange(e)}\r\n                                            disabled={onHandleViewModals != '' ? true : false}\r\n                                        >\r\n                                            <option value='' hidden selected>Select Required Email Type</option>\r\n                                            {emailType && emailType?.map(data => (\r\n                                                <option value={data?.name}>{data?.name}</option>\r\n                                            ))}\r\n                                        </select>}\r\n\r\n                                    {errors?.email_type && (\r\n                                        <CustomError text={errors.email_type} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        {/* <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <label htmlFor>Email Sub Type<span className='text-danger'>*</span></label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <select className=\"form-select\" value={dropdownValue} onChange={newFunction}\r\n                                        disabled={onHandleViewModals != '' ? true : false}>\r\n                                      <option value='' hidden selected>Select Required Email Type</option>\r\n                                        {subemailType?.map(option => (\r\n                                            <option key={option.value} value={option.value}>\r\n                                                {option.label}\r\n                                            </option>\r\n                                        ))}\r\n                                    </select>\r\n                                    {errors?.email_type && (\r\n                                        <CustomError text={errors.email_type} />\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        </div> */}\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <label htmlFor>Body</label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    {onHandleViewModals != '' ?\r\n                                        <div className=\"cardBox mb-3 mt-3 pt-3 myRequest\">\r\n                                            <div>\r\n                                                <div dangerouslySetInnerHTML={{ __html: addEmailTemplate?.body?.replaceAll('&lt;', '<') }} />\r\n                                            </div>\r\n                                        </div> :\r\n\r\n                                        <Customckediter\r\n                                            editorData={editorData}\r\n                                            setEditorData={setEditorData}\r\n                                            dropdownValue={dropdownValue}\r\n                                            setDropdownValue={setDropdownValue}\r\n                                            bodydata={bodydata}\r\n                                        />}\r\n\r\n                                </div>\r\n                                {errors?.body && (\r\n                                    <CustomError text={errors.body} />\r\n                                )}\r\n                            </div>\r\n\r\n\r\n                        </div>\r\n                        {onHandleViewModals == '' &&\r\n                            <div className=\"row\">\r\n                                <div className=\"col-md-3\">\r\n                                    <div className=\"form-group mb-3\">\r\n                                        <label htmlFor>Template fields</label>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"col-md-9\">\r\n                                    {subemailType?.map(data => (\r\n                                        <span style={{ cursor: 'pointer' }} className=\"badge blueBadge2 me-2\" onClick={() => newFunction(data)}>{data.label}</span>\r\n                                    ))}\r\n                                    {errors?.is_active && (\r\n                                        <CustomError text={errors.is_active} />\r\n                                    )}\r\n                                </div>\r\n\r\n                            </div>}\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <label htmlFor>Re-Mark<span className='text-danger'></span></label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    {onHandleViewModals != '' ?\r\n                                        <div>\r\n                                            {addEmailTemplate?.remark}\r\n                                        </div> :\r\n\r\n                                        <input type=\"text\" className=\"form-control fs-7\"\r\n                                            placeholder=\"Enter ReMark Name\"\r\n                                            name='remark'\r\n                                            value={addEmailTemplate?.remark || ''}\r\n                                            onChange={(e) => handleChange(e)}\r\n                                            disabled={onHandleViewModals != '' ? true : false}\r\n                                        />}\r\n\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-3\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <label htmlFor>Is Active</label>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"col-md-9\">\r\n                                <div className=\"form-group mb-3\">\r\n                                    <input type=\"checkbox\" placeholder=\"Is Active\"\r\n                                        checked={isActive}\r\n                                        onChange={(e) => setIsActive(!isActive)}\r\n                                        disabled={onHandleViewModals != '' ? true : false}\r\n                                    />\r\n                                </div>\r\n                                {errors?.is_active && (\r\n                                    <CustomError text={errors.is_active} />\r\n                                )}\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"d-flex align-items-center justify-content-end gap-2\">\r\n                            {onHandleViewModals == '' &&\r\n                                <CustomButton\r\n                                    type=\"button\"\r\n                                    classNames={\"btn btn-primary gradientBg\"}\r\n                                    handleClick={e => createEmailTemplate()}\r\n                                    // isLoading={departmentData?updateDepartmentPending:addDepartmentPending}\r\n                                    text={`${selectedTemplateData ? \"Update\" : \"Create\"} Template`}\r\n                                />}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CreateAndUpdateEmailTemplate\r\n","import React, { useEffect, useState,useMemo } from 'react'\r\nimport Button from '../../commanComponent/Button'\r\nimport { CustomButton } from '../../globalComponents'\r\nimport ApproveRejectModal from '../../modal/ApproveRejectModal'\r\nimport moment from 'moment-timezone'\r\nimport { toast } from 'react-toastify'\r\nimport { CustomSpinner } from '../../globalComponents'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { getBadgeColor } from '../../../utils/common'\r\nimport CreateAndUpdateEmailTemplate from '../../modal/admin/emailTemplate/CreateAndUpdateEmailTemplate'\r\nimport { emailTemplateAction, notificationActions } from '../../../core/resource/actions';\r\nimport CustomTable from '../../reuseableComponents/customTable/CustomTable'\r\n\r\nconst EmailTemplatedata = (props) => {\r\n    const { ActionList,isLoading,toggleOpenAction,currentPage,setCurrentPage,setSelectedActionData,onHandleDeleteAction,onHandleViewModal} = props\r\n\r\n    const [actionList, setAction] = useState(ActionList)\r\n    const dispatch = useDispatch();\r\n    const [isOpen, setIsOpen] = useState(false)\r\n    const [viewEmailTemplate, setViewEmailTemplate] = useState([])\r\n\r\n    useEffect(() => {\r\n      setAction(ActionList)\r\n    }, [ActionList])\r\n\r\n      const fields = [\r\n        { key: 'sn', label: 'S.N' },\r\n        { key: 'action_name', label: 'Action Name' },\r\n        { key: 'action_type', label: 'Action Type' },\r\n        { key: 'action_type', label: 'Action Type' },\r\n        { key: 'is_active', label: 'Status' },\r\n        { key: 'created_at', label: 'Created At' },\r\n        { key: 'action', label :'Action' }\r\n      ];\r\n\r\n      const updateAtion = (data) => {\r\n        setSelectedActionData(data)\r\n        toggleOpenAction()\r\n      }\r\n\r\n      const scopedSlots = useMemo(() => ({\r\n        sn: (_, index) => (         \r\n           <span>{index+1}</span> \r\n        ),\r\n        is_active: item => (        \r\n          <span\r\n            className={`badge ${getBadgeColor(item.is_active? \"Active\":\"Inactive\")}`}\r\n            // style={{ color: '#fff', padding: x'0.5rem' }}\r\n          >\r\n            {item.is_active? \"Active\":\"Inactive\"}\r\n          </span>\r\n        ),\r\n        created_at: item => moment(item.created_at).format(\"DD-MM-YYYY\"),\r\n        action: item => (\r\n          <div className=\"actionGroup d-flex gap-2\">\r\n            {/* <CustomButton\r\n              text=\"View\"\r\n              handleClick={() => onHandleViewModal(item)}\r\n              classNames=\"btn btn-success\"\r\n            /> */}\r\n            <CustomButton\r\n              text=\"Update\"\r\n              classNames=\"btn btn-primary\"\r\n              handleClick={() => {\r\n                updateAtion(item);\r\n              }}\r\n            />\r\n            <CustomButton\r\n              text=\"Delete\"\r\n              handleClick={() => onHandleDeleteAction(item?.id)}\r\n              classNames=\"btn btn-danger\"\r\n            />\r\n          </div>\r\n        )\r\n      }), [setSelectedActionData, toggleOpenAction, onHandleDeleteAction,onHandleViewModal]);\r\n  \r\n  return (\r\n    <>\r\n    <CustomTable\r\n        data={actionList}\r\n        fields={fields}\r\n        isLoading={isLoading}\r\n        pagination={true}\r\n        currentPage={currentPage}\r\n        setCurrentPage={setCurrentPage}\r\n        totalPages={actionList?.totalPages}\r\n        tableName={\"Action\"}\r\n        // onSearch={handleSearch}\r\n        scopedSlots={scopedSlots}\r\n        />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EmailTemplatedata\r\n","import React, { useEffect, useState, useMemo } from 'react'\r\nimport { AddDesignations, DesignationTable } from '../components/admin/designation'\r\nimport Button from '../components/commanComponent/Button'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { emailTemplateAction } from '../core/resource/actions'\r\nimport { toast } from 'react-toastify'\r\nimport { EmailTemplatedata,EmailActionData } from '../components/admin/EmailTemplate'\r\nimport CreateEmailType from '../components/modal/admin/emailTemplate/CreateEmailType'\r\nimport CreateAndUpdateEmailTemplate from '../components/modal/admin/emailTemplate/CreateAndUpdateEmailTemplate'\r\nimport { pagination } from '../utils/Constants.config'\r\nimport ApproveRejectModal from '../components/modal/ApproveRejectModal'\r\nimport TableTabs from '../components/TableTabs'\r\nimport AddActionEmailTemplate from '../components/modal/admin/emailTemplate/AddActionEmailTemplate'\r\n\r\n\r\nconst EmailTemplate = () => {\r\n  const dispatch = useDispatch()\r\n  const [isOpenEmailType, setIsOpenEmailType] = useState(false);\r\n  const {getActionTemplatePending,\r\n    getActionTemplateRes,\r\n    getActionTemplateError, getEmailTemplatePending, getEmailTemplateRes, getEmailTemplateError, deleteEmailTemplatePending, deleteEmailTemplateRes, deleteEmailTemplateError,\r\n    DeleteActionTemplatePending,\r\n    DeleteActionTemplateRes,\r\n    DeleteActionTemplateError } = useSelector(state => state.emailtemplate);\r\n  const [getemailTemplate, setGetEmailTemplate] = useState([])\r\n  const [currentPage, setCurrentPage] = useState(1)\r\n  const [selectedTemplateData, setSelectedTemplateData] = useState('')\r\n  const [selectedActionData, setSelectedActionData] = useState('')\r\n  const [deleteDepId, setDeleteDepId] = useState()\r\n  const [isShowDeleteModal, setIsShowDelelteModal] = useState(false)\r\n  const [onHandleViewModals, setonHandleViewModal] = useState('')\r\n  const [openAction, setOpenAction] = useState(false)\r\n  const [AllGetAction, setAllGetAction] = useState([])\r\n  const [actionDelete,setActionDelete] = useState()\r\n  const [isActionDelete,setIsActionDelete] = useState(false)\r\n\r\n  const onHandleViewModal = (data) => {\r\n    setonHandleViewModal(data)\r\n    toggleOffcanvas()\r\n  }\r\n\r\n  const onHandleDeleteModal = (id) => {\r\n    setIsShowDelelteModal(!isShowDeleteModal)\r\n    setDeleteDepId(id)\r\n  }\r\n\r\n  const onHandleDeleteAction = id =>{\r\n    setIsActionDelete(!isActionDelete)\r\n    setActionDelete(id)\r\n  }\r\n\r\n  useEffect(() => {\r\n    getAllEmailTemplalte()\r\n    getAllAction()\r\n  }, [currentPage])\r\n\r\n  const getAllEmailTemplalte = () => {\r\n    const params = {\r\n      page: currentPage,\r\n      limit: pagination.limit,\r\n    }\r\n    dispatch(emailTemplateAction.getEmailTemplateRequest(params))\r\n  }\r\n\r\nconst getAllAction =()=>{\r\n  const params = {\r\n    page: currentPage,\r\n    limit: pagination.limit,\r\n  }\r\n    dispatch(emailTemplateAction.getActionTemplateRequest(params))\r\n}\r\n\r\nuseEffect(() => {\r\n    if (!getActionTemplatePending) {\r\n        if (getActionTemplateError) {\r\n            setAllGetAction([])\r\n            return;\r\n        }\r\n        if (getActionTemplateRes) {\r\n            if (getActionTemplateRes?.data?.code == 200) {\r\n                setAllGetAction(getActionTemplateRes?.data?.data?.data?.data)\r\n            }\r\n        }\r\n    }\r\n}, [\r\n    getActionTemplateError,\r\n    getActionTemplateRes,\r\n    getActionTemplatePending\r\n]);\r\n\r\n  useEffect(() => {\r\n    if (!getEmailTemplatePending) {\r\n      if (getEmailTemplateError) {\r\n        setGetEmailTemplate([])\r\n        return;\r\n      }\r\n      if (getEmailTemplateRes) {\r\n        if (getEmailTemplateRes?.data?.code == 200) {\r\n          setGetEmailTemplate(getEmailTemplateRes?.data?.data?.data)\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    getEmailTemplatePending,\r\n    getEmailTemplateRes,\r\n    getEmailTemplateError\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (!deleteEmailTemplatePending) {\r\n      if (deleteEmailTemplateError) {\r\n        dispatch(emailTemplateAction.handleClearEmailTemplateStore('HANDLE_CLEAR_DELETE_EMAIL_TEMPLATE_STORE'))\r\n        return;\r\n      }\r\n      if (deleteEmailTemplateRes) {\r\n        if (deleteEmailTemplateRes?.data?.code == 200) {\r\n          dispatch(emailTemplateAction.handleClearEmailTemplateStore('HANDLE_CLEAR_DELETE_EMAIL_TEMPLATE_STORE'))\r\n          getAllEmailTemplalte()\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    deleteEmailTemplateRes,\r\n    deleteEmailTemplateError,\r\n    deleteEmailTemplatePending\r\n  ]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (!DeleteActionTemplatePending) {\r\n      if (DeleteActionTemplateError) {\r\n        dispatch(emailTemplateAction.handleClearEmailTemplateStore('HANDLE_CLEAR_DELETE_ACTION_TEMPLATE_STORE'))\r\n        return;\r\n      }\r\n      if (DeleteActionTemplateRes) {\r\n        if (DeleteActionTemplateRes?.data?.code == 200) {\r\n          dispatch(emailTemplateAction.handleClearEmailTemplateStore('HANDLE_CLEAR_DELETE_ACTION_TEMPLATE_STORE'))\r\n          getAllAction()\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    deleteEmailTemplateRes,\r\n    DeleteActionTemplateError,\r\n    DeleteActionTemplatePending\r\n  ]);\r\n\r\n\r\n  const toggleOffcanvas = (type) => {\r\n    setIsOpenEmailType(!isOpenEmailType);\r\n    if (type == 'view') {\r\n      setonHandleViewModal('')\r\n    }\r\n  };\r\n\r\n  const toggleOpenAction = (type) => {\r\n    setOpenAction(!openAction)\r\n  };\r\n\r\n  const onDeleteCancelDepartment = (type) => {\r\n    if (type) {\r\n      const params = {\r\n        _id: deleteDepId\r\n      }\r\n      dispatch(emailTemplateAction?.deleteEmailTemplateRequest(params))\r\n      setIsShowDelelteModal(!isShowDeleteModal)\r\n    } else {\r\n      setIsShowDelelteModal(!isShowDeleteModal)\r\n    }\r\n  }\r\n\r\n  const onDeleteActionFunction = (type) => {\r\n    if (type) {\r\n      const params = {\r\n        _id: actionDelete\r\n      }\r\n      dispatch(emailTemplateAction?.DeleteActionTemplateRequest(params))\r\n      setIsActionDelete(!isActionDelete)\r\n    } else {\r\n      setIsActionDelete(!isActionDelete)\r\n    }\r\n  }\r\n\r\n  const memoizedTemplateList = useMemo(() => getemailTemplate, [getemailTemplate]);\r\n  const memoizedActionList = useMemo(() => AllGetAction, [AllGetAction]);\r\n  return (\r\n      <div className=\"cardBox mb-3 mt-3 pt-5 myRequest\">\r\n        <ul className=\"nav nav-tabs leaveTabs mb-4\">\r\n          <li className=\"nav-item\">\r\n            <button\r\n              className=\"nav-link active\"\r\n              data-bs-toggle=\"tab\"\r\n              data-bs-target=\"#createEmailTemplate\"\r\n              type=\"button\"\r\n            >\r\n              Create Email Template\r\n            </button>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <button\r\n              className=\"nav-link\"\r\n              data-bs-toggle=\"tab\"\r\n              data-bs-target=\"#addAction\"\r\n              type=\"button\"\r\n            >\r\n              Add Action\r\n            </button>\r\n          </li>\r\n        </ul>\r\n        <div className=\"tab-content\">\r\n          <div className=\"tab-pane fade active show\" id=\"createEmailTemplate\">\r\n            <div className=\"cardHead d-flex align-items-center justify-content-between\">\r\n              <Button btnClassName={\"btn btn-primary gradientBg\"}\r\n                onClickFun={() => toggleOffcanvas()}\r\n              >Create New Email Template</Button>\r\n            </div>\r\n            <EmailTemplatedata\r\n              TemplateList={memoizedTemplateList}\r\n              isLoading={getEmailTemplatePending}\r\n              toggleOffcanvas={toggleOffcanvas}\r\n              setSelectedTemplateData={setSelectedTemplateData}\r\n              onHandleDeleteModal={onHandleDeleteModal}\r\n              currentPage={currentPage}\r\n              setCurrentPage={setCurrentPage}\r\n              onHandleViewModal={onHandleViewModal}\r\n            />\r\n            <CreateAndUpdateEmailTemplate\r\n              getAllEmailTemplalte={getAllEmailTemplalte}\r\n              isOpenEmailType={isOpenEmailType}\r\n              toggleOffcanvas={toggleOffcanvas}\r\n              setSelectedTemplateData={setSelectedTemplateData}\r\n              selectedTemplateData={selectedTemplateData}\r\n              onHandleViewModals={onHandleViewModals}\r\n            />\r\n          </div>\r\n          <div className=\"tab-pane fade active\" id=\"addAction\">\r\n            <div className=\"cardHead d-flex align-items-center justify-content-between\">\r\n              <Button btnClassName={\"btn btn-primary gradientBg\"}\r\n                onClickFun={() => toggleOpenAction()}\r\n              >Add Action</Button>\r\n            </div>\r\n\r\n            <EmailActionData\r\n              ActionList={memoizedActionList}\r\n              isLoading={getEmailTemplatePending}\r\n              toggleOpenAction={toggleOpenAction}\r\n              setSelectedActionData={setSelectedActionData}\r\n              onHandleDeleteAction={onHandleDeleteAction}\r\n              currentPage={currentPage}\r\n              setCurrentPage={setCurrentPage}\r\n              onHandleViewModal={onHandleViewModal}\r\n            />\r\n\r\n            <AddActionEmailTemplate\r\n              TemplateList={memoizedTemplateList}\r\n              getAllAction={getAllAction}\r\n              toggleOpenAction={toggleOpenAction}\r\n              openAction={openAction}\r\n              setSelectedActionData={setSelectedActionData}\r\n              selectedActionData={selectedActionData}\r\n              onHandleViewModals={onHandleViewModals}\r\n            />\r\n\r\n          </div>\r\n        </div>\r\n        {isActionDelete && (\r\n        <ApproveRejectModal\r\n          onApproveReject={onDeleteActionFunction}\r\n          isShow={isActionDelete}\r\n          desc={\"You want to delete this Action\"}\r\n          btnRightLoading={DeleteActionTemplatePending}\r\n        />)}\r\n      {isShowDeleteModal && (\r\n        <ApproveRejectModal\r\n          onApproveReject={onDeleteCancelDepartment}\r\n          isShow={isShowDeleteModal}\r\n          desc={\"You want to delete this Email Template\"}\r\n          btnRightLoading={deleteEmailTemplatePending}\r\n        />)\r\n      }\r\n\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EmailTemplate\r\n"],"names":["props","TemplateList","isLoading","toggleOffcanvas","currentPage","setCurrentPage","setSelectedTemplateData","onHandleDeleteModal","onHandleViewModal","templateList","settemplate","useState","useEffect","scopedSlots","useMemo","sn","_","index","_jsx","children","is_active","item","className","getBadgeColor","created_at","moment","format","action","_jsxs","CustomButton","text","handleClick","classNames","id","_Fragment","CustomTable","data","fields","key","label","pagination","totalPages","tableName","_addEmailTemplate$bod","isOpenEmailType","getAllEmailTemplalte","selectedTemplateData","onHandleViewModals","errors","setErrors","dispatch","useDispatch","getEmailTypePending","getEmailTypeRes","getEmailTypeError","addEmailTemplatePending","addEmailTemplateRes","addEmailTemplateError","useSelector","state","emailtemplate","isActive","setIsActive","emailType","setEmailType","editorData","setEditorData","templateId","setTemplateId","dropdownValue","setDropdownValue","bodydata","setBodydata","subemailType","setSubEmailType","field","setfield","addEmailTemplate","setAddEmailTemplate","template_name","email_title","email_type","body","remark","handleAutoFill","getEmailType","emailTemplateAction","getEmailTypeRequest","_getEmailTypeRes$data","_getEmailTypeRes$data2","_getEmailTypeRes$data3","_getEmailTypeRes$data4","code","toast","error","errorMessage","_addEmailTemplateRes$","_addEmailTemplateRes$2","success","msg","handleClearEmailTemplateStore","handleChange","event","_dropdownOptions$filt","target","name","dropdownOptions","filter","task","value","subtasks","resetTempateData","tabIndex","style","visibility","width","type","onClick","htmlFor","placeholder","onChange","e","disabled","CustomError","required","hidden","selected","map","dangerouslySetInnerHTML","__html","replaceAll","Customckediter","cursor","push","newFunction","checked","async","validationResponse","validateSchema","addEmailTemplatechema","isValid","updateEmailTemplateRequest","addEmailTemplateRequest","console","log","createEmailTemplate","ActionList","toggleOpenAction","setSelectedActionData","onHandleDeleteAction","actionList","setAction","isOpen","setIsOpen","viewEmailTemplate","setViewEmailTemplate","EmailTemplate","setIsOpenEmailType","getActionTemplatePending","getActionTemplateRes","getActionTemplateError","getEmailTemplatePending","getEmailTemplateRes","getEmailTemplateError","deleteEmailTemplatePending","deleteEmailTemplateRes","deleteEmailTemplateError","DeleteActionTemplatePending","DeleteActionTemplateRes","DeleteActionTemplateError","getemailTemplate","setGetEmailTemplate","selectedActionData","deleteDepId","setDeleteDepId","isShowDeleteModal","setIsShowDelelteModal","setonHandleViewModal","openAction","setOpenAction","AllGetAction","setAllGetAction","actionDelete","setActionDelete","isActionDelete","setIsActionDelete","getAllAction","params","page","limit","getEmailTemplateRequest","getActionTemplateRequest","_getActionTemplateRes","_getActionTemplateRes2","_getActionTemplateRes3","_getActionTemplateRes4","_getEmailTemplateRes$","_getEmailTemplateRes$2","_getEmailTemplateRes$3","_deleteEmailTemplateR","_DeleteActionTemplate","memoizedTemplateList","memoizedActionList","Button","btnClassName","onClickFun","EmailTemplatedata","CreateAndUpdateEmailTemplate","EmailActionData","AddActionEmailTemplate","ApproveRejectModal","onApproveReject","_id","DeleteActionTemplateRequest","isShow","desc","btnRightLoading","deleteEmailTemplateRequest"],"sourceRoot":""}